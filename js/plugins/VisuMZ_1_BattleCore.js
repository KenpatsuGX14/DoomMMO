//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.84;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.84] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x553167=_0xabb9;(function(_0x4ab0f2,_0x1b8de1){const _0x5169a6=_0xabb9,_0x578dd3=_0x4ab0f2();while(!![]){try{const _0x43f2e3=-parseInt(_0x5169a6(0x787))/0x1+parseInt(_0x5169a6(0x4df))/0x2+-parseInt(_0x5169a6(0xfe))/0x3*(parseInt(_0x5169a6(0x11b))/0x4)+parseInt(_0x5169a6(0x856))/0x5*(-parseInt(_0x5169a6(0x58f))/0x6)+-parseInt(_0x5169a6(0x9b0))/0x7+-parseInt(_0x5169a6(0x267))/0x8+parseInt(_0x5169a6(0x978))/0x9;if(_0x43f2e3===_0x1b8de1)break;else _0x578dd3['push'](_0x578dd3['shift']());}catch(_0x343609){_0x578dd3['push'](_0x578dd3['shift']());}}}(_0x196a,0xe3e5a));function _0xabb9(_0x222b57,_0x333335){const _0x196a5b=_0x196a();return _0xabb9=function(_0xabb9c3,_0x504372){_0xabb9c3=_0xabb9c3-0xee;let _0x2a8bf6=_0x196a5b[_0xabb9c3];return _0x2a8bf6;},_0xabb9(_0x222b57,_0x333335);}var label=_0x553167(0x841),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x183dd2){const _0x412c33=_0x553167;return _0x183dd2[_0x412c33(0x786)]&&_0x183dd2[_0x412c33(0x33b)][_0x412c33(0xb5d)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label][_0x553167(0x309)]||{},VisuMZ[_0x553167(0x8e2)]=function(_0x37d435,_0x24f8a0){const _0x12805c=_0x553167;for(const _0x18b99a in _0x24f8a0){if(_0x18b99a[_0x12805c(0x750)](/(.*):(.*)/i)){const _0x41ea12=String(RegExp['$1']),_0x29faf0=String(RegExp['$2'])[_0x12805c(0x512)]()[_0x12805c(0x976)]();let _0x234027,_0x2af315,_0x5e7f24;switch(_0x29faf0){case _0x12805c(0x2b6):_0x234027=_0x24f8a0[_0x18b99a]!==''?Number(_0x24f8a0[_0x18b99a]):0x0;break;case'ARRAYNUM':_0x2af315=_0x24f8a0[_0x18b99a]!==''?JSON[_0x12805c(0x4a1)](_0x24f8a0[_0x18b99a]):[],_0x234027=_0x2af315[_0x12805c(0x5c6)](_0x3fead3=>Number(_0x3fead3));break;case _0x12805c(0x974):_0x234027=_0x24f8a0[_0x18b99a]!==''?eval(_0x24f8a0[_0x18b99a]):null;break;case'ARRAYEVAL':_0x2af315=_0x24f8a0[_0x18b99a]!==''?JSON[_0x12805c(0x4a1)](_0x24f8a0[_0x18b99a]):[],_0x234027=_0x2af315[_0x12805c(0x5c6)](_0x35e8b0=>eval(_0x35e8b0));break;case _0x12805c(0xa34):_0x234027=_0x24f8a0[_0x18b99a]!==''?JSON[_0x12805c(0x4a1)](_0x24f8a0[_0x18b99a]):'';break;case'ARRAYJSON':_0x2af315=_0x24f8a0[_0x18b99a]!==''?JSON['parse'](_0x24f8a0[_0x18b99a]):[],_0x234027=_0x2af315[_0x12805c(0x5c6)](_0x56b8a1=>JSON[_0x12805c(0x4a1)](_0x56b8a1));break;case _0x12805c(0x713):_0x234027=_0x24f8a0[_0x18b99a]!==''?new Function(JSON['parse'](_0x24f8a0[_0x18b99a])):new Function(_0x12805c(0x136));break;case _0x12805c(0x528):_0x2af315=_0x24f8a0[_0x18b99a]!==''?JSON[_0x12805c(0x4a1)](_0x24f8a0[_0x18b99a]):[],_0x234027=_0x2af315[_0x12805c(0x5c6)](_0x4c4b65=>new Function(JSON[_0x12805c(0x4a1)](_0x4c4b65)));break;case'STR':_0x234027=_0x24f8a0[_0x18b99a]!==''?String(_0x24f8a0[_0x18b99a]):'';break;case _0x12805c(0x6a3):_0x2af315=_0x24f8a0[_0x18b99a]!==''?JSON[_0x12805c(0x4a1)](_0x24f8a0[_0x18b99a]):[],_0x234027=_0x2af315[_0x12805c(0x5c6)](_0x552264=>String(_0x552264));break;case _0x12805c(0x59d):_0x5e7f24=_0x24f8a0[_0x18b99a]!==''?JSON[_0x12805c(0x4a1)](_0x24f8a0[_0x18b99a]):{},_0x37d435[_0x41ea12]={},VisuMZ['ConvertParams'](_0x37d435[_0x41ea12],_0x5e7f24);continue;case _0x12805c(0x75c):_0x2af315=_0x24f8a0[_0x18b99a]!==''?JSON[_0x12805c(0x4a1)](_0x24f8a0[_0x18b99a]):[],_0x234027=_0x2af315[_0x12805c(0x5c6)](_0x51957e=>VisuMZ['ConvertParams']({},JSON[_0x12805c(0x4a1)](_0x51957e)));break;default:continue;}_0x37d435[_0x41ea12]=_0x234027;}}return _0x37d435;},(_0x5ba47b=>{const _0xa6c5fe=_0x553167,_0x39605b=_0x5ba47b[_0xa6c5fe(0xc04)];for(const _0x177846 of dependencies){if(!Imported[_0x177846]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'['format'](_0x39605b,_0x177846)),SceneManager[_0xa6c5fe(0x19c)]();break;}}const _0x13c47f=_0x5ba47b['description'];if(_0x13c47f[_0xa6c5fe(0x750)](/\[Version[ ](.*?)\]/i)){const _0x2f5b32=Number(RegExp['$1']);_0x2f5b32!==VisuMZ[label][_0xa6c5fe(0x932)]&&(alert(_0xa6c5fe(0x963)[_0xa6c5fe(0x47d)](_0x39605b,_0x2f5b32)),SceneManager['exit']());}if(_0x13c47f[_0xa6c5fe(0x750)](/\[Tier[ ](\d+)\]/i)){const _0x138456=Number(RegExp['$1']);_0x138456<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0xa6c5fe(0x47d)](_0x39605b,_0x138456,tier)),SceneManager['exit']()):tier=Math[_0xa6c5fe(0x4c1)](_0x138456,tier);}VisuMZ['ConvertParams'](VisuMZ[label]['Settings'],_0x5ba47b['parameters']);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x2fb0a9){const _0x41c4a0=_0x553167;let _0x11a3fc=[];for(const _0x312d58 of _0x2fb0a9){_0x11a3fc=_0x11a3fc['concat'](VisuMZ['ConvertActionSequenceTarget'](_0x312d58));}return _0x11a3fc[_0x41c4a0(0x577)](_0x38d319=>_0x38d319);},VisuMZ[_0x553167(0x87a)]=function(_0x39f9f1){const _0x261c72=_0x553167,_0x2d6f92=BattleManager[_0x261c72(0x88d)]()[_0x261c72(0x577)](_0x125897=>_0x125897&&_0x125897[_0x261c72(0x254)]()),_0x439728=BattleManager['_subject'],_0x162dd2=BattleManager['_target'],_0x2540a0=BattleManager[_0x261c72(0x159)]?BattleManager['_allTargets'][_0x261c72(0xa69)](0x0):_0x2d6f92;_0x39f9f1=_0x39f9f1[_0x261c72(0xb3c)]()[_0x261c72(0x976)]();if(_0x39f9f1===_0x261c72(0x758))return[_0x439728];else{if(_0x39f9f1==='current\x20target')return[_0x162dd2];else{if(_0x39f9f1===_0x261c72(0x6af)){if(_0x162dd2){const _0x27b57d=_0x2540a0['indexOf'](_0x162dd2);return _0x27b57d>=0x0?[_0x2540a0[_0x27b57d-0x1]||_0x162dd2]:[_0x162dd2];}}else{if(_0x39f9f1===_0x261c72(0x80a)){if(_0x162dd2){const _0x2133c4=_0x2540a0[_0x261c72(0x163)](_0x162dd2);return _0x2133c4>=0x0?[_0x2540a0[_0x2133c4+0x1]||_0x162dd2]:[_0x162dd2];}}else{if(_0x39f9f1===_0x261c72(0x3b8))return _0x2540a0;else{if(_0x39f9f1===_0x261c72(0x35a))return[_0x439728][_0x261c72(0xa3b)](_0x2540a0);else{if(_0x39f9f1==='not\x20focus')return _0x2d6f92[_0x261c72(0x577)](_0x2ac8df=>_0x2ac8df!==_0x439728&&!_0x2540a0[_0x261c72(0xb5d)](_0x2ac8df)&&_0x2ac8df[_0x261c72(0x6e2)]());else{if(_0x39f9f1===_0x261c72(0x5b8))return[VisuMZ[_0x261c72(0x9f8)]()];else{if(_0x39f9f1[_0x261c72(0x750)](/SPECIAL (.*)>/i)){const _0x5147fa=String(RegExp['$1'])[_0x261c72(0x23f)](',')[_0x261c72(0x5c6)](_0x58d178=>_0x58d178['trim']());return[VisuMZ[_0x261c72(0x747)](_0x5147fa)];}}}}}}}}}if(_0x439728){if(_0x39f9f1==='alive\x20friends')return _0x439728[_0x261c72(0xa3e)]()['aliveMembers']();else{if(_0x39f9f1===_0x261c72(0x7b7))return _0x439728[_0x261c72(0xa3e)]()[_0x261c72(0x58e)]()[_0x261c72(0x577)](_0xe44984=>_0xe44984!==_0x439728);else{if(_0x39f9f1===_0x261c72(0xb00))return _0x439728[_0x261c72(0xa3e)]()[_0x261c72(0x58e)]()[_0x261c72(0x577)](_0x3a29cb=>_0x3a29cb!==_0x162dd2);else{if(_0x39f9f1===_0x261c72(0x14a))return _0x439728[_0x261c72(0xa3e)]()['deadMembers']();else{if(_0x39f9f1['match'](/FRIEND INDEX (\d+)/i)){const _0x41bd6e=Number(RegExp['$1']);return[_0x439728[_0x261c72(0xa3e)]()[_0x261c72(0xaca)]()[_0x41bd6e]];}}}}}if(_0x39f9f1===_0x261c72(0x48d))return _0x439728['opponentsUnit']()[_0x261c72(0x58e)]();else{if(_0x39f9f1==='alive\x20opponents\x20not\x20target')return _0x439728[_0x261c72(0x8d1)]()[_0x261c72(0x58e)]()[_0x261c72(0x577)](_0x2f0554=>_0x2f0554!==_0x162dd2);else{if(_0x39f9f1===_0x261c72(0xa30))return _0x439728[_0x261c72(0x8d1)]()[_0x261c72(0x810)]();else{if(_0x39f9f1[_0x261c72(0x750)](/OPPONENT INDEX (\d+)/i)){const _0x29c10e=Number(RegExp['$1']);return[_0x439728[_0x261c72(0x8d1)]()['members']()[_0x29c10e]];}}}}}if(_0x39f9f1===_0x261c72(0x623))return $gameParty['aliveMembers']();else{if(_0x39f9f1===_0x261c72(0x7b8))return $gameParty['aliveMembers']()[_0x261c72(0x577)](_0x56a0bc=>_0x56a0bc!==_0x439728);else{if(_0x39f9f1===_0x261c72(0x9c5))return $gameParty[_0x261c72(0x58e)]()[_0x261c72(0x577)](_0x19de6c=>_0x19de6c!==_0x162dd2);else{if(_0x39f9f1==='dead\x20actors')return $gameParty[_0x261c72(0x810)]();else{if(_0x39f9f1['match'](/ACTOR INDEX (\d+)/i)){const _0x3926fe=Number(RegExp['$1']);return[$gameParty[_0x261c72(0xaca)]()[_0x3926fe]];}else{if(_0x39f9f1[_0x261c72(0x750)](/ACTOR ID (\d+)/i)){const _0x1c5455=Number(RegExp['$1']);return[$gameActors[_0x261c72(0xaa9)](_0x1c5455)];}}}}}}if(_0x39f9f1==='alive\x20enemies')return $gameTroop[_0x261c72(0x58e)]();else{if(_0x39f9f1===_0x261c72(0x7f2))return $gameTroop[_0x261c72(0x58e)]()[_0x261c72(0x577)](_0x4a88dd=>_0x4a88dd!==_0x439728);else{if(_0x39f9f1===_0x261c72(0xbbe))return $gameTroop[_0x261c72(0x58e)]()[_0x261c72(0x577)](_0x33c042=>_0x33c042!==_0x162dd2);else{if(_0x39f9f1===_0x261c72(0x121))return $gameTroop['deadMembers']();else{if(_0x39f9f1['match'](/ENEMY INDEX (\d+)/i)){const _0x4dc5ac=Number(RegExp['$1']);return[$gameTroop[_0x261c72(0xaca)]()[_0x4dc5ac]];}else{if(_0x39f9f1[_0x261c72(0x750)](/ENEMY ID (\d+)/i)){const _0x7b88ce=Number(RegExp['$1']);return $gameTroop[_0x261c72(0x58e)]()['filter'](_0x4f294b=>_0x4f294b[_0x261c72(0x7b6)]()===_0x7b88ce);}}}}}}if(_0x39f9f1===_0x261c72(0x9a1))return _0x2d6f92[_0x261c72(0x577)](_0x266b1e=>_0x266b1e[_0x261c72(0x788)]());else{if(_0x39f9f1===_0x261c72(0x507))return _0x2d6f92[_0x261c72(0x577)](_0x54c904=>_0x54c904[_0x261c72(0x788)]()&&_0x54c904!==_0x439728);else{if(_0x39f9f1===_0x261c72(0xbdc))return _0x2d6f92[_0x261c72(0x577)](_0xf63340=>_0xf63340[_0x261c72(0x788)]()&&_0xf63340!==_0x162dd2);else{if(_0x39f9f1===_0x261c72(0x53f))return _0x2d6f92[_0x261c72(0x577)](_0x104fa1=>_0x104fa1['isDead']());}}}return[];},VisuMZ[_0x553167(0x9f8)]=function(){const _0x228fa2=_0x553167;return BattleManager[_0x228fa2(0x8f3)];},VisuMZ[_0x553167(0x747)]=function(_0x2addc2){const _0x21cf62=_0x553167;return BattleManager[_0x21cf62(0x8f3)];},PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x7a9),_0x12c7bd=>{const _0x34a54a=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x34a54a(0x8e2)](_0x12c7bd,_0x12c7bd);const _0x1bb316=$gameTemp[_0x34a54a(0x646)](),_0x369ce8=BattleManager[_0x34a54a(0x984)],_0x5de6e6=BattleManager[_0x34a54a(0x1ef)],_0x1be08a=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x34a54a(0xa69)](0x0):[],_0x20d4bd=BattleManager[_0x34a54a(0x7d3)];if(!_0x1bb316||!_0x369ce8||!_0x5de6e6)return;if(!_0x369ce8[_0x34a54a(0x58c)]())return;if(_0x12c7bd[_0x34a54a(0x68e)])_0x20d4bd[_0x34a54a(0x862)](_0x5de6e6,_0x369ce8[_0x34a54a(0x58c)]());_0x12c7bd[_0x34a54a(0x352)]&&_0x20d4bd[_0x34a54a(0x9d2)]('applyImmortal',_0x5de6e6,_0x1be08a,!![]);if(_0x12c7bd[_0x34a54a(0xa73)])_0x20d4bd[_0x34a54a(0x9d2)](_0x34a54a(0x977),_0x5de6e6,_0x369ce8);if(_0x12c7bd['WaitForMovement'])_0x20d4bd[_0x34a54a(0x9d2)](_0x34a54a(0xc00));if(_0x12c7bd[_0x34a54a(0x5ff)])_0x20d4bd[_0x34a54a(0x9d2)](_0x34a54a(0x3ba),_0x5de6e6,_0x369ce8);if(_0x12c7bd[_0x34a54a(0x7e4)])_0x20d4bd[_0x34a54a(0x9d2)](_0x34a54a(0x282));_0x1bb316[_0x34a54a(0x759)](_0x34a54a(0x3a0));}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],'ActSeq_Set_WholeActionSet',_0x16fc47=>{const _0x275533=_0x553167;if(!SceneManager[_0x275533(0x2c2)]())return;VisuMZ['ConvertParams'](_0x16fc47,_0x16fc47);const _0x195726=$gameTemp['getLastPluginCommandInterpreter'](),_0xafaf5a=BattleManager['_action'],_0x57c27c=BattleManager[_0x275533(0x1ef)],_0x1374c4=BattleManager[_0x275533(0x159)]?BattleManager[_0x275533(0x159)][_0x275533(0xa69)](0x0):[],_0x1df5b1=BattleManager[_0x275533(0x7d3)],_0x2406b5=_0x16fc47[_0x275533(0x423)]??![];if(!_0x195726||!_0xafaf5a||!_0x57c27c)return;if(!_0xafaf5a[_0x275533(0x58c)]())return;let _0x4e27b0=_0x2406b5?_0x1df5b1['getDualWieldTimes'](_0x57c27c):0x1;for(let _0x3d0801=0x0;_0x3d0801<_0x4e27b0;_0x3d0801++){_0x2406b5&&_0x57c27c['isActor']()&&_0x1df5b1[_0x275533(0x9d2)](_0x275533(0xb4e),_0x57c27c,_0x3d0801);if(_0x16fc47[_0x275533(0x847)])_0x1df5b1['push']('performAction',_0x57c27c,_0xafaf5a);if(_0x16fc47[_0x275533(0x2d2)]>0x0)_0x1df5b1[_0x275533(0x9d2)](_0x275533(0x79a),_0x16fc47[_0x275533(0x2d2)]);if(_0x16fc47[_0x275533(0x18d)])_0x1df5b1[_0x275533(0x9d2)](_0x275533(0x439),_0x57c27c,_0x1374c4,_0xafaf5a['item']()[_0x275533(0x8f0)]);if(_0x16fc47[_0x275533(0x7e4)])_0x1df5b1[_0x275533(0x9d2)](_0x275533(0x282));for(const _0x5371b4 of _0x1374c4){if(!_0x5371b4)continue;if(_0x16fc47[_0x275533(0x3b9)])_0x1df5b1[_0x275533(0x9d2)](_0x275533(0x607),_0x57c27c,_0x5371b4);}}_0x2406b5&&_0x57c27c[_0x275533(0x8fb)]()&&_0x1df5b1['push'](_0x275533(0x55f),_0x57c27c);if(_0x16fc47[_0x275533(0x352)])_0x1df5b1[_0x275533(0x9d2)]('applyImmortal',_0x57c27c,_0x1374c4,![]);_0x195726[_0x275533(0x759)]('battlelog');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x74f),_0x432cc0=>{const _0x207a85=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x207a85(0x8e2)](_0x432cc0,_0x432cc0);const _0x1ed5ee=$gameTemp[_0x207a85(0x646)](),_0x4b6d49=BattleManager[_0x207a85(0x984)],_0xd1f02f=BattleManager[_0x207a85(0x1ef)],_0x4c5710=BattleManager[_0x207a85(0x159)]?BattleManager['_allTargets']['slice'](0x0):[],_0x36a33f=BattleManager[_0x207a85(0x7d3)],_0x45ac31=_0x432cc0[_0x207a85(0x423)]??![];if(!_0x1ed5ee||!_0x4b6d49||!_0xd1f02f)return;if(!_0x4b6d49[_0x207a85(0x58c)]())return;let _0x8b2b6e=_0x45ac31?_0x36a33f[_0x207a85(0x93b)](_0xd1f02f):0x1;for(let _0x230414=0x0;_0x230414<_0x8b2b6e;_0x230414++){for(const _0x26f9da of _0x4c5710){if(!_0x26f9da)continue;_0x45ac31&&_0xd1f02f[_0x207a85(0x8fb)]()&&_0x36a33f[_0x207a85(0x9d2)]('setActiveWeaponSet',_0xd1f02f,_0x230414);if(_0x432cc0[_0x207a85(0x847)])_0x36a33f[_0x207a85(0x9d2)](_0x207a85(0x119),_0xd1f02f,_0x4b6d49);if(_0x432cc0[_0x207a85(0x6d7)]>0x0)_0x36a33f[_0x207a85(0x9d2)](_0x207a85(0x79a),_0x432cc0[_0x207a85(0x6d7)]);if(_0x432cc0['ActionAnimation'])_0x36a33f[_0x207a85(0x9d2)](_0x207a85(0x439),_0xd1f02f,[_0x26f9da],_0x4b6d49['item']()['animationId']);if(_0x432cc0[_0x207a85(0x369)]>0x0)_0x36a33f[_0x207a85(0x9d2)]('waitCount',_0x432cc0[_0x207a85(0x369)]);if(_0x432cc0[_0x207a85(0x3b9)])_0x36a33f[_0x207a85(0x9d2)](_0x207a85(0x607),_0xd1f02f,_0x26f9da);}}_0x45ac31&&_0xd1f02f[_0x207a85(0x8fb)]()&&_0x36a33f[_0x207a85(0x9d2)](_0x207a85(0x55f),_0xd1f02f);if(_0x432cc0['ApplyImmortal'])_0x36a33f[_0x207a85(0x9d2)](_0x207a85(0x935),_0xd1f02f,_0x4c5710,![]);_0x1ed5ee[_0x207a85(0x759)](_0x207a85(0x3a0));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x7b5),_0x3b28f1=>{const _0x2307c3=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3b28f1,_0x3b28f1);const _0x5dddcf=$gameTemp[_0x2307c3(0x646)](),_0x2ff9b2=BattleManager[_0x2307c3(0x984)],_0x18c5f9=BattleManager[_0x2307c3(0x1ef)],_0x52d823=BattleManager[_0x2307c3(0x159)]?BattleManager[_0x2307c3(0x159)][_0x2307c3(0xa69)](0x0):[],_0x20f947=BattleManager['_logWindow'];if(!_0x5dddcf||!_0x2ff9b2||!_0x18c5f9)return;if(!_0x2ff9b2[_0x2307c3(0x58c)]())return;if(_0x3b28f1['ApplyImmortal'])_0x20f947[_0x2307c3(0x9d2)]('applyImmortal',_0x18c5f9,_0x52d823,![]);if(_0x3b28f1['WaitForNewLine'])_0x20f947[_0x2307c3(0x9d2)](_0x2307c3(0x8e7));if(_0x3b28f1['WaitForEffect'])_0x20f947[_0x2307c3(0x9d2)](_0x2307c3(0x301));if(_0x3b28f1[_0x2307c3(0x30a)])_0x20f947[_0x2307c3(0x9d2)]('clear');if(_0x3b28f1['ActionEnd'])_0x20f947[_0x2307c3(0x9d2)](_0x2307c3(0x96c),_0x18c5f9);if(_0x3b28f1[_0x2307c3(0x1d0)])_0x20f947[_0x2307c3(0x9d2)](_0x2307c3(0xc00));_0x5dddcf[_0x2307c3(0x759)](_0x2307c3(0x3a0));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_ChangeAngle',_0x5b5ef1=>{const _0x81c488=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x81c488(0x1cf)])return;VisuMZ[_0x81c488(0x8e2)](_0x5b5ef1,_0x5b5ef1);const _0x23d8a0=$gameTemp[_0x81c488(0x646)](),_0x230f47=_0x5b5ef1[_0x81c488(0x8dc)];if(!_0x23d8a0)return;$gameScreen[_0x81c488(0x172)](_0x5b5ef1['Angle'],_0x5b5ef1['Duration'],_0x5b5ef1[_0x81c488(0x90d)]);if(_0x230f47)_0x23d8a0[_0x81c488(0x759)](_0x81c488(0x840));}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x286),_0x51033e=>{const _0x512219=_0x553167;if(!SceneManager[_0x512219(0x2c2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x512219(0x8e2)](_0x51033e,_0x51033e);const _0x2ba455=$gameTemp[_0x512219(0x646)](),_0x2d9b05=_0x51033e[_0x512219(0x8dc)];if(!_0x2ba455)return;$gameScreen[_0x512219(0x172)](0x0,_0x51033e[_0x512219(0x412)],_0x51033e[_0x512219(0x90d)]);if(_0x2d9b05)_0x2ba455[_0x512219(0x759)](_0x512219(0x840));}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Angle_WaitForAngle',_0xaa0d15=>{const _0x4c46df=_0x553167;if(!SceneManager[_0x4c46df(0x2c2)]())return;if(!Imported[_0x4c46df(0x1cf)])return;const _0x2a8e94=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2a8e94)return;_0x2a8e94[_0x4c46df(0x759)](_0x4c46df(0x840));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x934),_0x17d9e3=>{const _0x2341e5=_0x553167;if(!SceneManager[_0x2341e5(0x2c2)]())return;VisuMZ[_0x2341e5(0x8e2)](_0x17d9e3,_0x17d9e3);const _0x5aa9cd=$gameTemp['getLastPluginCommandInterpreter'](),_0x500f33=BattleManager[_0x2341e5(0x984)],_0x279a37=BattleManager['_subject'],_0x46b6b4=VisuMZ[_0x2341e5(0xb0c)](_0x17d9e3[_0x2341e5(0xaf7)]),_0x12b976=_0x17d9e3[_0x2341e5(0xb3a)],_0x129a65=BattleManager[_0x2341e5(0x7d3)];if(!_0x5aa9cd||!_0x500f33||!_0x279a37)return;if(!_0x500f33['item']())return;let _0x4014f0=_0x500f33[_0x2341e5(0x58c)]()[_0x2341e5(0x8f0)];if(_0x4014f0<0x0)_0x4014f0=_0x279a37[_0x2341e5(0xb7b)]();$gameTemp[_0x2341e5(0x59c)](_0x46b6b4,_0x4014f0,_0x12b976),_0x17d9e3['WaitForAnimation']&&_0x5aa9cd[_0x2341e5(0x759)]('battleAnimation');}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x910),_0x246d55=>{const _0x5b46e4=_0x553167;if(!SceneManager[_0x5b46e4(0x2c2)]())return;VisuMZ[_0x5b46e4(0x8e2)](_0x246d55,_0x246d55);const _0x33a584=$gameTemp[_0x5b46e4(0x646)](),_0x55ca50=BattleManager['_subject'],_0x34f4c5=VisuMZ[_0x5b46e4(0xb0c)](_0x246d55[_0x5b46e4(0xaf7)]),_0x25042c=_0x246d55[_0x5b46e4(0xb3a)],_0x11b338=BattleManager[_0x5b46e4(0x7d3)];if(!_0x33a584||!_0x55ca50)return;const _0x65b719=_0x55ca50[_0x5b46e4(0xb7b)]();$gameTemp['requestAnimation'](_0x34f4c5,_0x65b719,_0x25042c),_0x246d55[_0x5b46e4(0x7e4)]&&_0x33a584[_0x5b46e4(0x759)](_0x5b46e4(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x49b),_0x306a4e=>{const _0x516c1d=_0x553167;if(!SceneManager[_0x516c1d(0x2c2)]())return;VisuMZ[_0x516c1d(0x8e2)](_0x306a4e,_0x306a4e);const _0x175f57=_0x456308[_0x516c1d(0x5d9)](_0x306a4e[_0x516c1d(0x3bb)]);if(_0x175f57<=0x0)return;const _0x2c8f56=$gameTemp['getLastPluginCommandInterpreter'](),_0x456308=BattleManager[_0x516c1d(0x1ef)],_0x131d30=VisuMZ[_0x516c1d(0xb0c)](_0x306a4e['Targets']),_0x39e7db=_0x306a4e[_0x516c1d(0xb3a)],_0x51d603=BattleManager[_0x516c1d(0x7d3)];if(!_0x2c8f56||!_0x456308)return;$gameTemp[_0x516c1d(0x59c)](_0x131d30,_0x175f57,_0x39e7db),_0x306a4e[_0x516c1d(0x7e4)]&&_0x2c8f56[_0x516c1d(0x759)](_0x516c1d(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x1c5),_0x2af01e=>{const _0x4c975e=_0x553167;if(!SceneManager[_0x4c975e(0x2c2)]())return;VisuMZ[_0x4c975e(0x8e2)](_0x2af01e,_0x2af01e);const _0x24e272=$gameTemp[_0x4c975e(0x646)](),_0x2ed996=VisuMZ[_0x4c975e(0xb0c)](_0x2af01e[_0x4c975e(0xaf7)]),_0x28d589=_0x2af01e[_0x4c975e(0x560)];let _0x3b9f43=0x0;switch(_0x28d589[_0x4c975e(0x512)]()[_0x4c975e(0x976)]()){case'!':case'EXCLAMATION':_0x3b9f43=0x1;break;case'?':case'QUESTION':_0x3b9f43=0x2;break;case _0x4c975e(0x4eb):case _0x4c975e(0x7c9):case'MUSIC\x20NOTE':case _0x4c975e(0x8f9):case _0x4c975e(0xb9a):_0x3b9f43=0x3;break;case'HEART':case'LOVE':_0x3b9f43=0x4;break;case _0x4c975e(0xa51):case'ANGER':_0x3b9f43=0x5;break;case _0x4c975e(0x926):_0x3b9f43=0x6;break;case'COBWEB':case'ANNOYED':case _0x4c975e(0x8ef):_0x3b9f43=0x7;break;case'SILENCE':case _0x4c975e(0x59f):_0x3b9f43=0x8;break;case'LIGHT':case'BULB':case _0x4c975e(0x909):case _0x4c975e(0x3c9):case'LIGHTBULB':_0x3b9f43=0x9;break;case'Z':case'ZZ':case _0x4c975e(0x6f7):case'SLEEP':_0x3b9f43=0xa;break;case _0x4c975e(0xa9f):_0x3b9f43=0xb;break;case _0x4c975e(0x2e3):_0x3b9f43=0xc;break;case _0x4c975e(0x3c7):_0x3b9f43=0xd;break;case'USER-DEFINED\x204':_0x3b9f43=0xe;break;case _0x4c975e(0x164):_0x3b9f43=0xf;break;}for(const _0xf3e2cd of _0x2ed996){if(!_0xf3e2cd)continue;$gameTemp[_0x4c975e(0xad3)](_0xf3e2cd,_0x3b9f43);}_0x2af01e[_0x4c975e(0x885)]&&_0x24e272&&(_0x24e272[_0x4c975e(0xb72)](0x1),_0x24e272[_0x4c975e(0x759)](_0x4c975e(0x15a)));}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0x2ff),_0xa75790=>{const _0x40af8c=_0x553167;if(!SceneManager[_0x40af8c(0x2c2)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x40af8c(0x8e2)](_0xa75790,_0xa75790);const _0x55cf64=$gameTemp['getLastPluginCommandInterpreter'](),_0x20674b=VisuMZ[_0x40af8c(0xb0c)](_0xa75790[_0x40af8c(0xaf7)]),_0x16a814=_0xa75790[_0x40af8c(0x572)];for(const _0x38430a of _0x20674b){if(!_0x38430a)continue;$gameTemp[_0x40af8c(0xad3)](_0x38430a,[_0x16a814]);}_0xa75790[_0x40af8c(0x885)]&&_0x55cf64&&(_0x55cf64[_0x40af8c(0xb72)](0x1),_0x55cf64[_0x40af8c(0x759)](_0x40af8c(0x15a)));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Animation_BalloonIconRange',_0x1b6515=>{const _0x2ccff4=_0x553167;if(!SceneManager[_0x2ccff4(0x2c2)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ['ConvertParams'](_0x1b6515,_0x1b6515);const _0x2d4d56=$gameTemp[_0x2ccff4(0x646)](),_0x1248d3=VisuMZ[_0x2ccff4(0xb0c)](_0x1b6515[_0x2ccff4(0xaf7)]),_0x39c26c=Math['min'](Number(_0x1b6515[_0x2ccff4(0x6f0)]||0x0),Number(_0x1b6515[_0x2ccff4(0x2e2)]||0x0)),_0xaf83c7=Math['max'](Number(_0x1b6515[_0x2ccff4(0x6f0)]||0x0),Number(_0x1b6515['endIcon']||0x0)),_0x3891b3=[];for(let _0x1a4c08=_0x39c26c;_0x1a4c08<=_0xaf83c7;_0x1a4c08++){_0x3891b3[_0x2ccff4(0x9d2)](_0x1a4c08);}for(const _0x27fb90 of _0x1248d3){if(!_0x27fb90)continue;$gameTemp[_0x2ccff4(0xad3)](_0x27fb90,_0x3891b3);}_0x1b6515[_0x2ccff4(0x885)]&&_0x2d4d56&&(_0x2d4d56['wait'](0x1),_0x2d4d56[_0x2ccff4(0x759)](_0x2ccff4(0x15a)));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Animation_BalloonIconSpecific',_0x398c0f=>{const _0x307068=_0x553167;if(!SceneManager[_0x307068(0x2c2)]())return;if(!Imported[_0x307068(0x40c)])return;VisuMZ[_0x307068(0x8e2)](_0x398c0f,_0x398c0f);const _0x2b5f38=$gameTemp[_0x307068(0x646)](),_0x3ab8f2=VisuMZ[_0x307068(0xb0c)](_0x398c0f[_0x307068(0xaf7)]),_0x2f70bd=_0x398c0f[_0x307068(0x4c3)];for(const _0x5e715c of _0x3ab8f2){if(!_0x5e715c)continue;$gameTemp[_0x307068(0xad3)](_0x5e715c,_0x2f70bd);}_0x398c0f[_0x307068(0x885)]&&_0x2b5f38&&(_0x2b5f38[_0x307068(0xb72)](0x1),_0x2b5f38[_0x307068(0x759)]('battleBalloon'));}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x421),_0x588f6b=>{const _0x33aa62=_0x553167;if(!SceneManager[_0x33aa62(0x2c2)]())return;VisuMZ[_0x33aa62(0x8e2)](_0x588f6b,_0x588f6b);const _0x1b7db3=$gameTemp[_0x33aa62(0x646)](),_0x38fdbd=BattleManager[_0x33aa62(0x984)],_0x54dc8c=_0x588f6b[_0x33aa62(0xb3a)],_0x3f47c4=VisuMZ[_0x33aa62(0xb0c)](_0x588f6b[_0x33aa62(0xaf7)]);if(!_0x1b7db3||!_0x38fdbd)return;if(!_0x38fdbd[_0x33aa62(0x58c)]())return;for(const _0x4f03fb of _0x3f47c4){if(!_0x4f03fb)continue;_0x4f03fb['performCastAnimation'](_0x38fdbd,_0x54dc8c);}if(_0x588f6b[_0x33aa62(0x7e4)])_0x1b7db3[_0x33aa62(0x759)](_0x33aa62(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x714),_0x3baf2b=>{const _0xb046e3=_0x553167;VisuMZ[_0xb046e3(0x8e2)](_0x3baf2b,_0x3baf2b);const _0x29014a=$gameTemp[_0xb046e3(0x646)](),_0x7816c6=VisuMZ[_0xb046e3(0xb0c)](_0x3baf2b[_0xb046e3(0xaf7)]),_0x71d50b=_0x3baf2b[_0xb046e3(0x500)];if(!_0x71d50b)return;for(const _0x2c6a44 of _0x7816c6){if(!_0x2c6a44)continue;if(!_0x2c6a44[_0xb046e3(0x8fb)]())continue;_0x2c6a44[_0xb046e3(0x27b)](_0x71d50b);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xbea),_0x5640bf=>{const _0x111d98=_0x553167;VisuMZ[_0x111d98(0x8e2)](_0x5640bf,_0x5640bf);const _0x34aae7=_0x5640bf[_0x111d98(0xa61)](),_0xc1ce1=$gameActors[_0x111d98(0xaa9)](_0x34aae7)||null;if(!_0xc1ce1){console[_0x111d98(0x56f)]('NO\x20ACTOR\x20FOUND!');return;}const _0x42f93a=_0x5640bf[_0x111d98(0xb40)]();_0xc1ce1[_0x111d98(0x27b)](_0x42f93a);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x6ff),_0x187bc9=>{const _0xf6c7b1=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x187bc9,_0x187bc9);const _0x51d47b=$gameTemp[_0xf6c7b1(0x646)](),_0x3b0359=BattleManager[_0xf6c7b1(0x1ef)],_0x4f0619=VisuMZ[_0xf6c7b1(0xb0c)](_0x187bc9['Targets']),_0x301b01=_0x187bc9[_0xf6c7b1(0xb3a)];if(!_0x51d47b||!_0x3b0359)return;const _0x22ac26=$dataSkilles[_0x3b0359['guardSkillId']()],_0x219bc7=_0x22ac26[_0xf6c7b1(0x8f0)];$gameTemp[_0xf6c7b1(0x59c)](_0x4f0619,_0x219bc7,_0x301b01),_0x187bc9[_0xf6c7b1(0x7e4)]&&_0x51d47b[_0xf6c7b1(0x759)](_0xf6c7b1(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x948),_0x1417de=>{const _0x1486c2=_0x553167;if(!SceneManager[_0x1486c2(0x2c2)]())return;VisuMZ[_0x1486c2(0x8e2)](_0x1417de,_0x1417de);const _0x1c3328=$gameTemp[_0x1486c2(0x646)](),_0x4c9025=VisuMZ[_0x1486c2(0xb0c)](_0x1417de['Targets']),_0x6dc016=Number(_0x1417de[_0x1486c2(0x84d)]||0x1),_0x1e972c=$dataItems[_0x6dc016],_0x4a064a=_0x1417de[_0x1486c2(0xb3a)];if(!_0x1c3328)return;if(!_0x1e972c)return;let _0x4bb8f9=_0x1e972c[_0x1486c2(0x8f0)];$gameTemp[_0x1486c2(0x59c)](_0x4c9025,_0x4bb8f9,_0x4a064a),_0x1417de['WaitForAnimation']&&_0x1c3328[_0x1486c2(0x759)](_0x1486c2(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Animation_PlayAtCoordinate',_0x27e051=>{const _0xa4f8a=_0x553167;if(!SceneManager[_0xa4f8a(0xa7f)])return;if(!SceneManager[_0xa4f8a(0xa7f)][_0xa4f8a(0x306)])return;if(!Imported[_0xa4f8a(0x28b)])return;VisuMZ['ConvertParams'](_0x27e051,_0x27e051);const _0x186e63=$gameTemp[_0xa4f8a(0x646)](),_0x28abeb=Math[_0xa4f8a(0x462)](_0x27e051[_0xa4f8a(0xa48)]),_0x585a4c=Math[_0xa4f8a(0x462)](_0x27e051[_0xa4f8a(0x627)]);$gameTemp['requestPointAnimation'](_0x28abeb,_0x585a4c,_0x27e051[_0xa4f8a(0xbd6)],_0x27e051[_0xa4f8a(0xb3a)],_0x27e051['Mute']),_0x27e051['WaitComplete']&&_0x186e63&&(SceneManager['_scene']['_spriteset']['updatePointAnimations'](),_0x186e63['setWaitMode'](_0xa4f8a(0xa1a)));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Animation_ShowAnimation',_0x4c6278=>{const _0x260f10=_0x553167;if(!SceneManager[_0x260f10(0x2c2)]())return;VisuMZ['ConvertParams'](_0x4c6278,_0x4c6278);const _0x53c4be=$gameTemp['getLastPluginCommandInterpreter'](),_0x114b58=VisuMZ[_0x260f10(0xb0c)](_0x4c6278['Targets']),_0x18b44d=_0x4c6278[_0x260f10(0xbd6)],_0x402ee9=_0x4c6278[_0x260f10(0xb3a)];if(!_0x53c4be)return;$gameTemp[_0x260f10(0x59c)](_0x114b58,_0x18b44d,_0x402ee9);if(_0x4c6278['WaitForAnimation'])_0x53c4be[_0x260f10(0x759)](_0x260f10(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x203),_0x104321=>{const _0x590c43=_0x553167;if(!SceneManager[_0x590c43(0x2c2)]())return;VisuMZ[_0x590c43(0x8e2)](_0x104321,_0x104321);const _0x1c63bc=$gameTemp[_0x590c43(0x646)](),_0x1b44fc=VisuMZ['CreateActionSequenceTargets'](_0x104321[_0x590c43(0xaf7)]),_0x394315=Number(_0x104321[_0x590c43(0xbd6)])||0x1,_0x1b032b=_0x104321[_0x590c43(0xb3a)];if(!_0x1c63bc)return;$gameTemp[_0x590c43(0x59c)](_0x1b44fc,_0x394315,_0x1b032b);if(_0x104321[_0x590c43(0x7e4)])_0x1c63bc['setWaitMode'](_0x590c43(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x778),_0xb6c60b=>{const _0x1bf505=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1bf505(0x8e2)](_0xb6c60b,_0xb6c60b);const _0x1d3d61=$gameTemp[_0x1bf505(0x646)](),_0xec82bc=VisuMZ[_0x1bf505(0xb0c)](_0xb6c60b[_0x1bf505(0xaf7)]),_0xf6d11a=Number(_0xb6c60b[_0x1bf505(0x33f)]||0x1),_0x39ee87=$dataSkills[_0xf6d11a],_0x45fde=_0xb6c60b[_0x1bf505(0xb3a)];if(!_0x1d3d61)return;if(!_0x39ee87)return;let _0x1bbf9e=_0x39ee87[_0x1bf505(0x8f0)];$gameTemp['requestAnimation'](_0xec82bc,_0x1bbf9e,_0x45fde),_0xb6c60b[_0x1bf505(0x7e4)]&&_0x1d3d61[_0x1bf505(0x759)](_0x1bf505(0xa1a));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x41e),_0x353063=>{const _0x25d308=_0x553167;if(!SceneManager['isSceneBattle']())return;const _0x2f05c3=$gameTemp[_0x25d308(0x646)]();if(!_0x2f05c3)return;_0x2f05c3[_0x25d308(0x759)](_0x25d308(0xa1a));}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0x542),_0x59eba4=>{const _0x5f335c=_0x553167;if(!SceneManager[_0x5f335c(0x2c2)]())return;VisuMZ['ConvertParams'](_0x59eba4,_0x59eba4);const _0x4ea5d3=BattleManager[_0x5f335c(0x7d3)],_0x29c77e=_0x59eba4['CopyCombatLog']&&Imported[_0x5f335c(0x243)];_0x4ea5d3['addText'](_0x59eba4[_0x5f335c(0x2f9)]),_0x29c77e&&Imported[_0x5f335c(0x243)]&&$gameSystem['addTextToCombatLog'](_0x59eba4['Text']||'',_0x59eba4[_0x5f335c(0xade)]||0x0);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xb52),_0x20e5c0=>{const _0x3bba3d=_0x553167;if(!SceneManager[_0x3bba3d(0x2c2)]())return;const _0x21d473=BattleManager[_0x3bba3d(0x7d3)];_0x21d473[_0x3bba3d(0xa25)]();}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xb83),_0xf7a5f9=>{const _0x33986d=_0x553167;if(!SceneManager['isSceneBattle']())return;const _0x28e152=$gameTemp[_0x33986d(0x646)](),_0x90c4b2=BattleManager[_0x33986d(0x984)],_0x101e65=BattleManager[_0x33986d(0x1ef)],_0x55d475=BattleManager[_0x33986d(0x7d3)];if(!_0x28e152||!_0x90c4b2||!_0x101e65)return;if(!_0x90c4b2['item']())return;_0x55d475[_0x33986d(0x862)](_0x101e65,_0x90c4b2['item']()),_0x28e152[_0x33986d(0x759)]('battlelog');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x94e),_0x5d0447=>{const _0x2f9318=_0x553167;if(!SceneManager[_0x2f9318(0x2c2)]())return;const _0x494b96=BattleManager[_0x2f9318(0x7d3)];_0x494b96['popBaseLine']();}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x31b),_0x53b76d=>{const _0x11a836=_0x553167;if(!SceneManager[_0x11a836(0x2c2)]())return;const _0x203736=BattleManager[_0x11a836(0x7d3)];_0x203736[_0x11a836(0x3ce)]();}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x777),_0x172763=>{const _0x567eda=_0x553167;if(!SceneManager[_0x567eda(0x2c2)]())return;const _0x1becbf=BattleManager['_logWindow'];_0x1becbf[_0x567eda(0x215)]();}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x8ec),_0x51d2f6=>{const _0xa44962=_0x553167;if(!SceneManager[_0xa44962(0x2c2)]())return;VisuMZ[_0xa44962(0x8e2)](_0x51d2f6,_0x51d2f6),SceneManager[_0xa44962(0xa7f)][_0xa44962(0xbf5)](_0x51d2f6[_0xa44962(0xb61)]);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x463),_0x8b62d1=>{const _0x330d19=_0x553167;if(!SceneManager[_0x330d19(0x2c2)]())return;const _0x376282=$gameTemp[_0x330d19(0x646)]();_0x376282[_0x330d19(0x759)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x612),_0x5cb91e=>{const _0x5c7b81=_0x553167;if(!SceneManager['isSceneBattle']())return;const _0x3b2f9e=$gameTemp[_0x5c7b81(0x646)](),_0x2b0192=BattleManager[_0x5c7b81(0x7d3)];_0x2b0192['waitForNewLine'](),_0x3b2f9e[_0x5c7b81(0x759)](_0x5c7b81(0x3a0));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x662),_0x523c7d=>{const _0x5088cc=_0x553167;if(!SceneManager[_0x5088cc(0x2c2)]())return;if(!Imported[_0x5088cc(0x1cf)])return;VisuMZ['ConvertParams'](_0x523c7d,_0x523c7d);const _0x2925ea=$gameScreen[_0x5088cc(0x738)]();_0x2925ea[_0x5088cc(0x485)]=_0x523c7d['Setting'];}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x302),_0x18155d=>{const _0x25c50f=_0x553167;if(!SceneManager[_0x25c50f(0x2c2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x18155d,_0x18155d);const _0x99335c=$gameTemp[_0x25c50f(0x646)](),_0x125ec9=_0x18155d['WaitForCamera'];$gameScreen['setBattleCameraPoint'](_0x18155d[_0x25c50f(0x430)],_0x18155d[_0x25c50f(0xa6e)],_0x18155d['Duration'],_0x18155d['EasingType']);if(_0x125ec9)_0x99335c[_0x25c50f(0x759)]('battleCamera');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x1ab),_0xa018f=>{const _0x58c5b3=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x58c5b3(0x1cf)])return;VisuMZ[_0x58c5b3(0x8e2)](_0xa018f,_0xa018f);const _0x331f97=$gameTemp[_0x58c5b3(0x646)](),_0x92528c=VisuMZ[_0x58c5b3(0xb0c)](_0xa018f[_0x58c5b3(0xaf7)]),_0x4027da=_0xa018f[_0x58c5b3(0xbee)];$gameScreen[_0x58c5b3(0x40b)](_0x92528c,_0xa018f[_0x58c5b3(0x412)],_0xa018f[_0x58c5b3(0x90d)]);if(_0x4027da)_0x331f97[_0x58c5b3(0x759)](_0x58c5b3(0xafe));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x106),_0xd9b6b4=>{const _0x27d9b3=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x27d9b3(0x8e2)](_0xd9b6b4,_0xd9b6b4);const _0x22d284=$gameTemp[_0x27d9b3(0x646)](),_0x212dfb=_0xd9b6b4['WaitForCamera'];$gameScreen[_0x27d9b3(0x237)](_0xd9b6b4[_0x27d9b3(0x9d1)],_0xd9b6b4['OffsetY'],_0xd9b6b4[_0x27d9b3(0x412)],_0xd9b6b4[_0x27d9b3(0x90d)]);if(_0x212dfb)_0x22d284[_0x27d9b3(0x759)](_0x27d9b3(0xafe));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Camera_Reset',_0x2780a5=>{const _0x513128=_0x553167;if(!SceneManager[_0x513128(0x2c2)]())return;if(!Imported[_0x513128(0x1cf)])return;VisuMZ[_0x513128(0x8e2)](_0x2780a5,_0x2780a5);const _0x41122b=$gameTemp[_0x513128(0x646)](),_0x48482f=_0x2780a5[_0x513128(0xa77)],_0x57c90f=_0x2780a5[_0x513128(0x4a5)],_0x324be7=_0x2780a5[_0x513128(0xbee)];if(_0x48482f){const _0x4dfbad=Math[_0x513128(0x462)](Graphics[_0x513128(0x9ce)]/0x2),_0x4a25a5=Math[_0x513128(0x462)](Graphics['height']/0x2);$gameScreen[_0x513128(0x2a8)](_0x4dfbad,_0x4a25a5,_0x2780a5[_0x513128(0x412)],_0x2780a5[_0x513128(0x90d)]);}_0x57c90f&&$gameScreen[_0x513128(0x237)](0x0,0x0,_0x2780a5[_0x513128(0x412)],_0x2780a5[_0x513128(0x90d)]);if(_0x324be7)_0x41122b[_0x513128(0x759)](_0x513128(0xafe));}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0xee),_0x342031=>{const _0x406139=_0x553167;if(!SceneManager[_0x406139(0x2c2)]())return;if(!Imported[_0x406139(0x1cf)])return;const _0x38a9dd=$gameTemp[_0x406139(0x646)]();if(!_0x38a9dd)return;_0x38a9dd[_0x406139(0x759)]('battleCamera');}),VisuMZ[_0x553167(0x841)][_0x553167(0xad5)]=function(_0x261580){const _0xeaf58c=_0x553167;_0x261580[_0xeaf58c(0x185)]='';const _0x3c0013=VisuMZ[_0xeaf58c(0x488)]['CreateCutinSettings'](_0x261580),_0x3fd077=VisuMZ[_0xeaf58c(0xb0c)](_0x261580[_0xeaf58c(0xaf7)])[0x0]||null;return _0x3fd077&&(_0x3c0013[_0xeaf58c(0x185)]=_0x3fd077['visualCutinPortraitFilename'](),_0x3c0013[_0xeaf58c(0x9e3)]=_0x3fd077[_0xeaf58c(0x8b4)](),_0x3c0013[_0xeaf58c(0xc07)]=_0x3fd077[_0xeaf58c(0x47c)](),_0x3c0013[_0xeaf58c(0xa0c)]=_0x3fd077[_0xeaf58c(0x9a9)](),_0x3fd077[_0xeaf58c(0x602)]()&&(_0x3fd077[_0xeaf58c(0x32e)]()&&(_0x3c0013[_0xeaf58c(0xbc7)]=!_0x3c0013[_0xeaf58c(0xbc7)]),_0x3fd077['flipVisualCutinVert']()&&(_0x3c0013[_0xeaf58c(0x208)]=!_0x3c0013[_0xeaf58c(0x208)]),_0x3c0013[_0xeaf58c(0xa0c)]==='svActor'&&(_0x3c0013[_0xeaf58c(0xbc7)]=!_0x3c0013[_0xeaf58c(0xbc7)]),_0x261580[_0xeaf58c(0x8d8)]['parallaxScrollXinvertEnemy']&&(_0x3c0013[_0xeaf58c(0x643)]*=-0x1),_0x261580[_0xeaf58c(0x8d8)][_0xeaf58c(0x371)]&&(_0x3c0013['parallaxScrollY']*=-0x1),_0x3c0013[_0xeaf58c(0x1ad)]+=_0x261580[_0xeaf58c(0x8d8)][_0xeaf58c(0xb90)]??0x0)),_0x3c0013;},PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x8cc),_0x51d511=>{const _0x20935c=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x20935c(0x8e2)](_0x51d511,_0x51d511);const _0x504818=VisuMZ[_0x20935c(0x841)]['CreateCutinSettings'](_0x51d511);SceneManager['_scene']['startVisualCutin'](_0x504818);const _0x21c41c=$gameTemp['getLastPluginCommandInterpreter']();_0x21c41c&&_0x51d511[_0x20935c(0x464)]&&_0x21c41c[_0x20935c(0x759)](_0x20935c(0x2ec));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xa19),_0x13dc27=>{const _0x5379ac=_0x553167;if(!SceneManager[_0x5379ac(0x2c2)]())return;if(!Imported[_0x5379ac(0x335)])return;VisuMZ[_0x5379ac(0x8e2)](_0x13dc27,_0x13dc27),SceneManager[_0x5379ac(0xa7f)][_0x5379ac(0x9da)]();const _0x2d2b08=$gameTemp[_0x5379ac(0x646)]();_0x2d2b08&&_0x13dc27[_0x5379ac(0x88f)]&&_0x2d2b08['setWaitMode'](_0x5379ac(0xa41));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x5b1),_0x2d9ba8=>{const _0x4cf410=_0x553167;if(!SceneManager[_0x4cf410(0x2c2)]())return;if(!Imported[_0x4cf410(0x335)])return;VisuMZ[_0x4cf410(0x8e2)](_0x2d9ba8,_0x2d9ba8);const _0x50f2d3=_0x2d9ba8[_0x4cf410(0x484)][_0x4cf410(0xb3c)]()[_0x4cf410(0x976)]();SceneManager['_scene'][_0x4cf410(0xb82)](_0x50f2d3);const _0x222f80=$gameTemp[_0x4cf410(0x646)]();_0x222f80&&_0x2d9ba8[_0x4cf410(0x88f)]&&_0x222f80[_0x4cf410(0x759)](_0x4cf410(0xa41));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xab4),_0x4cbd20=>{const _0x598b59=_0x553167;if(!SceneManager[_0x598b59(0x2c2)]())return;if(!Imported[_0x598b59(0x335)])return;const _0x14b885=$gameTemp[_0x598b59(0x646)]();_0x14b885[_0x598b59(0x759)](_0x598b59(0x2ec));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x6e0),_0xed4ccf=>{const _0x4b39ed=_0x553167;if(!SceneManager[_0x4b39ed(0x2c2)]())return;if(!Imported[_0x4b39ed(0x335)])return;const _0x101c1f=$gameTemp['getLastPluginCommandInterpreter']();_0x101c1f[_0x4b39ed(0x759)](_0x4b39ed(0xa41));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x780),_0x1aeaf8=>{const _0x163bd2=_0x553167;if(!SceneManager[_0x163bd2(0x2c2)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x163bd2(0x8e2)](_0x1aeaf8,_0x1aeaf8);const _0x2635b0=VisuMZ[_0x163bd2(0xb0c)](_0x1aeaf8[_0x163bd2(0xaf7)]),_0x22ecfb=_0x1aeaf8[_0x163bd2(0x21e)]['toLowerCase']()[_0x163bd2(0x976)]();for(const _0x39da5d of _0x2635b0){if(!_0x39da5d)continue;_0x39da5d[_0x163bd2(0x24a)](_0x22ecfb);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_DB_DragonbonesTimeScale',_0x2bb210=>{const _0x383cc2=_0x553167;if(!SceneManager[_0x383cc2(0x2c2)]())return;if(!Imported[_0x383cc2(0x637)])return;VisuMZ[_0x383cc2(0x8e2)](_0x2bb210,_0x2bb210);const _0x3ca2f1=VisuMZ[_0x383cc2(0xb0c)](_0x2bb210['Targets']),_0x546eff=_0x2bb210[_0x383cc2(0x8ff)];for(const _0x5ef783 of _0x3ca2f1){if(!_0x5ef783)continue;_0x5ef783[_0x383cc2(0x5fa)]()[_0x383cc2(0x234)]=_0x546eff;}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xa78),_0x2442f7=>{const _0x5f0d59=_0x553167;if(!SceneManager[_0x5f0d59(0x2c2)]())return;if(!Imported[_0x5f0d59(0x902)])return;VisuMZ[_0x5f0d59(0x8e2)](_0x2442f7,_0x2442f7);const _0x1e1f39=BattleManager[_0x5f0d59(0x984)],_0x5ce75=_0x2442f7[_0x5f0d59(0x3a5)];if(!_0x1e1f39)return;_0x1e1f39['_battleCoreAddedElements']=_0x5ce75;}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x98c),_0x22eeb0=>{const _0x526e4f=_0x553167;if(!SceneManager[_0x526e4f(0x2c2)]())return;if(!Imported[_0x526e4f(0x902)])return;const _0x5effc9=BattleManager[_0x526e4f(0x984)];if(!_0x5effc9)return;_0x5effc9['clearElementChanges']();}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x67f),_0x2e7dbc=>{const _0x125d33=_0x553167;if(!SceneManager[_0x125d33(0x2c2)]())return;if(!Imported[_0x125d33(0x902)])return;VisuMZ[_0x125d33(0x8e2)](_0x2e7dbc,_0x2e7dbc);const _0x31ac34=BattleManager[_0x125d33(0x984)],_0x1f3c86=_0x2e7dbc['Elements'];if(!_0x31ac34)return;_0x31ac34[_0x125d33(0x3d3)]=_0x1f3c86;}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],'ActSeq_Element_NullElements',_0x52c87d=>{const _0x5b4535=_0x553167;if(!SceneManager[_0x5b4535(0x2c2)]())return;if(!Imported[_0x5b4535(0x902)])return;const _0x1cc59b=BattleManager[_0x5b4535(0x984)];if(!_0x1cc59b)return;_0x1cc59b[_0x5b4535(0x4e0)]=!![];}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Grid_ActionAnimationAtNode',_0x40b6d1=>{const _0x42695c=_0x553167;VisuMZ[_0x42695c(0x4d3)][_0x42695c(0x419)](_0x40b6d1);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x30e),_0x4ef426=>{const _0x471c12=_0x553167;VisuMZ[_0x471c12(0x4d3)][_0x471c12(0x30e)](_0x4ef426);}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x9a5),_0x37e3be=>{const _0x192908=_0x553167;VisuMZ[_0x192908(0x4d3)][_0x192908(0x9a5)](_0x37e3be);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Grid_AddTriggerToNodeJS',_0x3d378e=>{const _0xd7e9d4=_0x553167;VisuMZ[_0xd7e9d4(0x4d3)]['ActSeq_Grid_AddTriggerToNode'](_0x3d378e);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x213),_0x226084=>{const _0x512738=_0x553167;VisuMZ[_0x512738(0x4d3)]['ActSeq_Grid_AnimationIDAtNode'](_0x226084);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x6f4),_0x5088f1=>{const _0xcf5bc=_0x553167;VisuMZ[_0xcf5bc(0x4d3)][_0xcf5bc(0x6f4)](_0x5088f1);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Grid_AnimationTypeAtNode',_0x143ea9=>{const _0x33a097=_0x553167;VisuMZ[_0x33a097(0x4d3)][_0x33a097(0x401)](_0x143ea9);}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0x9a0),_0x10f168=>{const _0x95776c=_0x553167;VisuMZ[_0x95776c(0x4d3)][_0x95776c(0x9a0)](_0x10f168);}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x618),_0x4b65c0=>{const _0x5246bf=_0x553167;VisuMZ[_0x5246bf(0x4d3)]['ActSeq_Grid_MoveTargetsInDirection'](_0x4b65c0);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x45c),_0x59820a=>{const _0x1b29af=_0x553167;VisuMZ[_0x1b29af(0x4d3)][_0x1b29af(0x45c)](_0x59820a);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xad9),_0x151eaa=>{const _0x265e76=_0x553167;VisuMZ['BattleGridSystem'][_0x265e76(0xad9)](_0x151eaa);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x41d055=>{const _0x2e5247=_0x553167;VisuMZ[_0x2e5247(0x4d3)][_0x2e5247(0x199)](_0x41d055);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x34d),_0x400a12=>{const _0x5feef0=_0x553167;VisuMZ[_0x5feef0(0x4d3)][_0x5feef0(0x34d)](_0x400a12);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x82a),_0x54d7f6=>{const _0x10caf6=_0x553167;VisuMZ['BattleGridSystem'][_0x10caf6(0x82a)](_0x54d7f6);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x7da),_0x332450=>{const _0x92ad04=_0x553167;VisuMZ[_0x92ad04(0x4d3)]['ActSeq_Grid_TraverseToNode'](_0x332450);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x49a),_0x17f93d=>{const _0x4a48b6=_0x553167;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4a48b6(0x2c2)]())return;VisuMZ[_0x4a48b6(0x8e2)](_0x17f93d,_0x17f93d);const _0x4d7c28=VisuMZ[_0x4a48b6(0xb0c)](_0x17f93d['Targets']);for(const _0x2c7272 of _0x4d7c28){if(!_0x2c7272)continue;_0x2c7272['removeHorrorEffect']('noise'),_0x2c7272[_0x4a48b6(0x63a)](_0x4a48b6(0x24d)),_0x2c7272[_0x4a48b6(0x63a)]('tv'),_0x2c7272[_0x4a48b6(0x5de)]();}$gamePlayer['refresh']();}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x42c),_0x26e261=>{const _0x971c20=_0x553167;if(!Imported[_0x971c20(0x2a5)])return;if(!SceneManager[_0x971c20(0x2c2)]())return;VisuMZ['ConvertParams'](_0x26e261,_0x26e261);const _0x10d637=VisuMZ[_0x971c20(0xb0c)](_0x26e261[_0x971c20(0xaf7)]),_0x34b30e=_0x971c20(0x24d);_0x26e261[_0x971c20(0x6c8)]=Math['ceil'](_0x26e261['slices']/0x2),_0x26e261[_0x971c20(0xa06)]=_0x26e261[_0x971c20(0x8ad)],_0x26e261[_0x971c20(0x97f)]=!![];for(const _0x3fce6e of _0x10d637){if(!_0x3fce6e)continue;_0x3fce6e['setHorrorEffectSettings'](_0x34b30e,_0x26e261);}$gamePlayer[_0x971c20(0x215)]();}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x65b),_0x192154=>{const _0x4d6441=_0x553167;if(!Imported[_0x4d6441(0x2a5)])return;if(!SceneManager[_0x4d6441(0x2c2)]())return;VisuMZ[_0x4d6441(0x8e2)](_0x192154,_0x192154);const _0x1ea131=VisuMZ['CreateActionSequenceTargets'](_0x192154[_0x4d6441(0xaf7)]);for(const _0x5932da of _0x1ea131){if(!_0x5932da)continue;_0x5932da['removeHorrorEffect'](_0x4d6441(0x24d));}$gamePlayer[_0x4d6441(0x215)]();}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Horror_NoiseCreate',_0x2c16e6=>{const _0x59b8eb=_0x553167;if(!Imported[_0x59b8eb(0x2a5)])return;if(!SceneManager[_0x59b8eb(0x2c2)]())return;VisuMZ[_0x59b8eb(0x8e2)](_0x2c16e6,_0x2c16e6);const _0x491696=VisuMZ[_0x59b8eb(0xb0c)](_0x2c16e6[_0x59b8eb(0xaf7)]),_0x172aea=_0x59b8eb(0xad6);for(const _0x54af59 of _0x491696){if(!_0x54af59)continue;_0x54af59[_0x59b8eb(0x70a)](_0x172aea,_0x2c16e6);}$gamePlayer[_0x59b8eb(0x215)]();}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x596),_0x5d699b=>{const _0x313b6c=_0x553167;if(!Imported[_0x313b6c(0x2a5)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x313b6c(0x8e2)](_0x5d699b,_0x5d699b);const _0x4ed826=VisuMZ[_0x313b6c(0xb0c)](_0x5d699b[_0x313b6c(0xaf7)]);for(const _0x53bed1 of _0x4ed826){if(!_0x53bed1)continue;_0x53bed1[_0x313b6c(0x63a)]('noise');}$gamePlayer['refresh']();}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x461),_0x57e641=>{const _0x3175e4=_0x553167;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x3175e4(0x2c2)]())return;VisuMZ[_0x3175e4(0x8e2)](_0x57e641,_0x57e641);const _0x3b2889=VisuMZ['CreateActionSequenceTargets'](_0x57e641[_0x3175e4(0xaf7)]),_0x47f0e1='tv';for(const _0xb9b74e of _0x3b2889){if(!_0xb9b74e)continue;_0xb9b74e[_0x3175e4(0x70a)](_0x47f0e1,_0x57e641);}$gamePlayer[_0x3175e4(0x215)]();}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Horror_TVRemove',_0x8cde68=>{const _0x3ce95d=_0x553167;if(!Imported[_0x3ce95d(0x2a5)])return;if(!SceneManager[_0x3ce95d(0x2c2)]())return;VisuMZ[_0x3ce95d(0x8e2)](_0x8cde68,_0x8cde68);const _0x24b7ab=VisuMZ['CreateActionSequenceTargets'](_0x8cde68['Targets']);for(const _0x92cfda of _0x24b7ab){if(!_0x92cfda)continue;_0x92cfda[_0x3ce95d(0x63a)]('tv');}$gamePlayer['refresh']();}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x6f5),_0x326ab6=>{const _0xa4555d=_0x553167;if(!Imported[_0xa4555d(0xb49)])return;const _0x25b562=SceneManager[_0xa4555d(0xa7f)]['_spriteset'];if(!_0x25b562)return;if(VisuMZ[_0xa4555d(0x2e9)][_0xa4555d(0x932)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0xa4555d(0x19c)]();return;}VisuMZ['ConvertParams'](_0x326ab6,_0x326ab6);const _0x3904b2=_0x326ab6['Enable'];_0x25b562[_0xa4555d(0x348)](_0x3904b2);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x54d),_0x14f859=>{const _0x2dbda1=_0x553167;if(!SceneManager[_0x2dbda1(0x2c2)]())return;if(!Imported[_0x2dbda1(0xb49)])return;const _0x4d684b=SceneManager['_scene'][_0x2dbda1(0x306)];if(!_0x4d684b)return;VisuMZ[_0x2dbda1(0x8e2)](_0x14f859,_0x14f859);const _0x26bca6=_0x14f859[_0x2dbda1(0x6f6)]||0x1,_0x395dcf=_0x14f859[_0x2dbda1(0x412)]||0x1,_0x413ef2=_0x14f859[_0x2dbda1(0x90d)]||_0x2dbda1(0x9fe);_0x4d684b[_0x2dbda1(0xa3c)](_0x26bca6,_0x395dcf,_0x413ef2);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x4fa),_0x2d47bb=>{const _0x161c81=_0x553167;if(!Imported[_0x161c81(0xb49)])return;const _0x47e124=SceneManager[_0x161c81(0xa7f)]['_spriteset'];if(!_0x47e124)return;if(VisuMZ[_0x161c81(0x2e9)][_0x161c81(0x932)]<=1.04){alert(_0x161c81(0x1a2)),SceneManager['exit']();return;}VisuMZ[_0x161c81(0x8e2)](_0x2d47bb,_0x2d47bb);const _0xc2b702=_0x2d47bb[_0x161c81(0x72e)];_0x47e124[_0x161c81(0x600)](_0xc2b702);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0xa1d),_0x59cfc1=>{const _0x18b8fe=_0x553167;if(!SceneManager[_0x18b8fe(0x2c2)]())return;if(!Imported[_0x18b8fe(0xb49)])return;const _0x5c210d=SceneManager[_0x18b8fe(0xa7f)][_0x18b8fe(0x306)];if(!_0x5c210d)return;VisuMZ[_0x18b8fe(0x8e2)](_0x59cfc1,_0x59cfc1);const _0x9fe0be=Number(_0x59cfc1[_0x18b8fe(0x6eb)])||0x0,_0x554ab3=Number(_0x59cfc1['Rate']),_0x485390=_0x59cfc1[_0x18b8fe(0x412)]||0x1,_0x37161e=_0x59cfc1[_0x18b8fe(0x90d)]||_0x18b8fe(0x9fe);_0x5c210d['setupMotionBlurImpactFilter'](_0x9fe0be,_0x554ab3,_0x485390,_0x37161e);}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x4ce),_0x4e6f58=>{const _0x39f8f5=_0x553167;if(!SceneManager[_0x39f8f5(0x2c2)]())return;if(!Imported[_0x39f8f5(0xb49)])return;const _0x3ab2c1=SceneManager[_0x39f8f5(0xa7f)][_0x39f8f5(0x306)];if(!_0x3ab2c1)return;VisuMZ[_0x39f8f5(0x8e2)](_0x4e6f58,_0x4e6f58);const _0x27deef=Number(_0x4e6f58['Angle'])||0x0,_0x4efa8a=Number(_0x4e6f58[_0x39f8f5(0x1b0)]),_0x237c55=_0x4e6f58[_0x39f8f5(0x412)]||0x1,_0xfeafa6=_0x4e6f58[_0x39f8f5(0x90d)]||_0x39f8f5(0x9fe),_0x13ca31=VisuMZ[_0x39f8f5(0xb0c)](_0x4e6f58[_0x39f8f5(0xaf7)]);for(const _0x1cafc1 of _0x13ca31){if(!_0x1cafc1)continue;if(!_0x1cafc1[_0x39f8f5(0x8d6)]())continue;_0x1cafc1[_0x39f8f5(0x8d6)]()[_0x39f8f5(0x4cc)](_0x27deef,_0x4efa8a,_0x237c55,_0xfeafa6);}}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x6ab),_0xf48656=>{const _0x1ca15c=_0x553167;if(!SceneManager[_0x1ca15c(0x2c2)]())return;if(!Imported[_0x1ca15c(0xb49)])return;VisuMZ['ConvertParams'](_0xf48656,_0xf48656);const _0x2e9987={'delay':_0xf48656[_0x1ca15c(0x83c)],'duration':_0xf48656[_0x1ca15c(0x456)],'hue':_0xf48656['hue'],'opacityStart':_0xf48656[_0x1ca15c(0xa7d)],'tone':_0xf48656[_0x1ca15c(0x98b)],'visible':!![]},_0x449368=VisuMZ[_0x1ca15c(0xb0c)](_0xf48656[_0x1ca15c(0xaf7)]);for(const _0x4b9b45 of _0x449368){if(!_0x4b9b45)continue;_0x4b9b45[_0x1ca15c(0x717)](_0x2e9987);}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x9f7),_0x2c08aa=>{const _0xc76816=_0x553167;if(!SceneManager[_0xc76816(0x2c2)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x2c08aa,_0x2c08aa);const _0x52be71=VisuMZ['CreateActionSequenceTargets'](_0x2c08aa['Targets']);for(const _0x467a4a of _0x52be71){if(!_0x467a4a)continue;_0x467a4a[_0xc76816(0x78e)]();}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x1d9),_0x1705e3=>{const _0x49553e=_0x553167;if(!Imported[_0x49553e(0xb49)])return;const _0x1c4f2a=SceneManager[_0x49553e(0xa7f)][_0x49553e(0x306)];if(!_0x1c4f2a)return;if(VisuMZ[_0x49553e(0x2e9)][_0x49553e(0x932)]<=1.04){alert(_0x49553e(0x1a2)),SceneManager[_0x49553e(0x19c)]();return;}VisuMZ['ConvertParams'](_0x1705e3,_0x1705e3);const _0x5d5402=_0x1705e3[_0x49553e(0x72e)];_0x1c4f2a[_0x49553e(0x850)](_0x5d5402);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x8d0),_0x3e456d=>{const _0x11ebc1=_0x553167;if(!Imported[_0x11ebc1(0xb49)])return;const _0x4c3468=SceneManager[_0x11ebc1(0xa7f)][_0x11ebc1(0x306)];if(!_0x4c3468)return;if(VisuMZ['ActSeqImpact'][_0x11ebc1(0x932)]<=1.04){alert(_0x11ebc1(0x1a2)),SceneManager[_0x11ebc1(0x19c)]();return;}VisuMZ[_0x11ebc1(0x8e2)](_0x3e456d,_0x3e456d);const _0x72a36=_0x3e456d[_0x11ebc1(0x72e)];_0x4c3468[_0x11ebc1(0x8db)](_0x72a36);}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0x336),_0x2cf558=>{const _0x1620b1=_0x553167;if(!Imported[_0x1620b1(0xb49)])return;const _0x298ce7=SceneManager[_0x1620b1(0xa7f)][_0x1620b1(0x306)];if(!_0x298ce7)return;VisuMZ[_0x1620b1(0x8e2)](_0x2cf558,_0x2cf558);const _0x412b4b=_0x2cf558['X']||0x0,_0x3f49b0=_0x2cf558['Y']||0x0,_0x27c49f=_0x2cf558['Amp']||0x0,_0xa266a3=_0x2cf558[_0x1620b1(0x93a)]||0x0,_0x3c54fd=_0x2cf558[_0x1620b1(0x412)]||0x1;_0x298ce7[_0x1620b1(0x263)](_0x412b4b,_0x3f49b0,_0x27c49f,_0xa266a3,_0x3c54fd);}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Impact_ShockwaveEachTargets',_0x4be33e=>{const _0x49b99d=_0x553167;if(!SceneManager[_0x49b99d(0x2c2)]())return;if(!Imported[_0x49b99d(0xb49)])return;const _0x56f2ca=SceneManager[_0x49b99d(0xa7f)]['_spriteset'];if(!_0x56f2ca)return;VisuMZ[_0x49b99d(0x8e2)](_0x4be33e,_0x4be33e);const _0x4f6069=VisuMZ[_0x49b99d(0xb0c)](_0x4be33e[_0x49b99d(0xaf7)]),_0x49acf6=_0x4be33e['TargetLocation'],_0x118b8a=_0x4be33e[_0x49b99d(0x9d1)]||0x0,_0x5f0877=_0x4be33e[_0x49b99d(0xb21)]||0x0,_0x86deeb=_0x4be33e['Amp']||0x0,_0x588445=_0x4be33e[_0x49b99d(0x93a)]||0x0,_0x289120=_0x4be33e[_0x49b99d(0x412)]||0x1;for(const _0x1d3044 of _0x4f6069){if(!_0x1d3044)continue;if(!_0x1d3044[_0x49b99d(0x8d6)]())continue;const _0x2ca108=_0x1d3044[_0x49b99d(0x8d6)]();let _0x4dda4b=_0x2ca108[_0x49b99d(0x649)],_0x559810=_0x2ca108[_0x49b99d(0x756)];_0x4dda4b+=(Graphics[_0x49b99d(0x9ce)]-Graphics[_0x49b99d(0x5f7)])/0x2,_0x559810+=(Graphics[_0x49b99d(0x908)]-Graphics[_0x49b99d(0xbcf)])/0x2;if(_0x49acf6[_0x49b99d(0x750)](/front/i))_0x4dda4b+=(_0x1d3044[_0x49b99d(0x602)]()?0x1:-0x1)*_0x2ca108['mainSpriteWidth']()/0x2;else _0x49acf6[_0x49b99d(0x750)](/back/i)&&(_0x4dda4b+=(_0x1d3044[_0x49b99d(0x602)]()?-0x1:0x1)*_0x2ca108[_0x49b99d(0x1ca)]()/0x2);if(_0x49acf6[_0x49b99d(0x750)](/head/i))_0x559810-=_0x2ca108['mainSpriteHeight']();else _0x49acf6[_0x49b99d(0x750)](/center/i)&&(_0x559810-=_0x2ca108[_0x49b99d(0x9ad)]()/0x2);_0x4dda4b+=_0x118b8a,_0x559810+=_0x5f0877,_0x56f2ca[_0x49b99d(0x263)](_0x4dda4b,_0x559810,_0x86deeb,_0x588445,_0x289120);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x34e),_0xb67aff=>{const _0x3e1ccc=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3e1ccc(0xb49)])return;const _0x2c4a08=SceneManager[_0x3e1ccc(0xa7f)][_0x3e1ccc(0x306)];if(!_0x2c4a08)return;VisuMZ[_0x3e1ccc(0x8e2)](_0xb67aff,_0xb67aff);const _0x2e35e1=VisuMZ[_0x3e1ccc(0xb0c)](_0xb67aff[_0x3e1ccc(0xaf7)]),_0x49c6b7=_0xb67aff[_0x3e1ccc(0x766)],_0x13a2f6=_0xb67aff[_0x3e1ccc(0x9d1)]||0x0,_0x1b5ecc=_0xb67aff['OffsetY']||0x0,_0x4f7f46=_0xb67aff['Amp']||0x0,_0x5eafb0=_0xb67aff[_0x3e1ccc(0x93a)]||0x0,_0x3b4568=_0xb67aff[_0x3e1ccc(0x412)]||0x1,_0x5456d6=Math[_0x3e1ccc(0x6b0)](..._0x2e35e1[_0x3e1ccc(0x5c6)](_0x5c7d3d=>_0x5c7d3d['battler']()[_0x3e1ccc(0x649)]-_0x5c7d3d[_0x3e1ccc(0x8d6)]()['mainSpriteWidth']()/0x2)),_0x5ad9d7=Math[_0x3e1ccc(0x4c1)](..._0x2e35e1[_0x3e1ccc(0x5c6)](_0x4a324b=>_0x4a324b[_0x3e1ccc(0x8d6)]()['_baseX']+_0x4a324b[_0x3e1ccc(0x8d6)]()[_0x3e1ccc(0x1ca)]()/0x2)),_0x427c36=Math[_0x3e1ccc(0x6b0)](..._0x2e35e1[_0x3e1ccc(0x5c6)](_0x3cf52f=>_0x3cf52f[_0x3e1ccc(0x8d6)]()['_baseY']-_0x3cf52f[_0x3e1ccc(0x8d6)]()[_0x3e1ccc(0x9ad)]())),_0x2f12f1=Math['max'](..._0x2e35e1['map'](_0x4a5314=>_0x4a5314[_0x3e1ccc(0x8d6)]()['_baseY'])),_0x2a944b=_0x2e35e1['filter'](_0x229709=>_0x229709[_0x3e1ccc(0x8fb)]())['length'],_0x4865df=_0x2e35e1['filter'](_0x5ed7b6=>_0x5ed7b6[_0x3e1ccc(0x602)]())['length'];let _0x2e9be7=0x0,_0x2b2aef=0x0;if(_0x49c6b7[_0x3e1ccc(0x750)](/front/i))_0x2e9be7=_0x2a944b>=_0x4865df?_0x5456d6:_0x5ad9d7;else{if(_0x49c6b7[_0x3e1ccc(0x750)](/middle/i))_0x2e9be7=(_0x5456d6+_0x5ad9d7)/0x2,melee=-0x1;else _0x49c6b7['match'](/back/i)&&(_0x2e9be7=_0x2a944b>=_0x4865df?_0x5ad9d7:_0x5456d6);}if(_0x49c6b7[_0x3e1ccc(0x750)](/head/i))_0x2b2aef=_0x427c36;else{if(_0x49c6b7[_0x3e1ccc(0x750)](/center/i))_0x2b2aef=(_0x427c36+_0x2f12f1)/0x2;else _0x49c6b7[_0x3e1ccc(0x750)](/base/i)&&(_0x2b2aef=_0x2f12f1);}_0x2e9be7+=(Graphics[_0x3e1ccc(0x9ce)]-Graphics[_0x3e1ccc(0x5f7)])/0x2,_0x2b2aef+=(Graphics['height']-Graphics[_0x3e1ccc(0xbcf)])/0x2,_0x2e9be7+=_0x13a2f6,_0x2b2aef+=_0x1b5ecc,_0x2c4a08[_0x3e1ccc(0x263)](_0x2e9be7,_0x2b2aef,_0x4f7f46,_0x5eafb0,_0x3b4568);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xb88),_0x1a2762=>{const _0x551765=_0x553167;if(!Imported[_0x551765(0xb49)])return;const _0x323664=SceneManager[_0x551765(0xa7f)][_0x551765(0x306)];if(!_0x323664)return;if(VisuMZ['ActSeqImpact'][_0x551765(0x932)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x551765(0x19c)]();return;}VisuMZ[_0x551765(0x8e2)](_0x1a2762,_0x1a2762);const _0x3bb41c=$gameTemp[_0x551765(0x646)](),_0x5c6efa=Math[_0x551765(0x4c1)](0.01,_0x1a2762[_0x551765(0x151)]);$gameTemp[_0x551765(0x417)](_0x5c6efa,_0x3bb41c);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0xa46),_0x3dfb30=>{const _0x5dc650=_0x553167;if(!Imported[_0x5dc650(0xb49)])return;const _0x49c2c7=SceneManager[_0x5dc650(0xa7f)][_0x5dc650(0x306)];if(!_0x49c2c7)return;if(VisuMZ[_0x5dc650(0x2e9)]['version']<=1.04){alert(_0x5dc650(0x1a2)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x3dfb30,_0x3dfb30);const _0x2d08c5=$gameTemp['getLastPluginCommandInterpreter'](),_0x3915bd=_0x3dfb30['ms']||0x1;VisuMZ['ActSeqImpact'][_0x5dc650(0x5cd)](_0x3915bd,_0x2d08c5);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xa56),_0x3f61ef=>{const _0x51080a=_0x553167;if(!Imported[_0x51080a(0xb49)])return;const _0x5a7715=SceneManager[_0x51080a(0xa7f)][_0x51080a(0x306)];if(!_0x5a7715)return;VisuMZ[_0x51080a(0x8e2)](_0x3f61ef,_0x3f61ef);const _0x23f14e=_0x3f61ef['X']||0x0,_0x5dfcf4=_0x3f61ef['Y']||0x0,_0x39d049=_0x3f61ef[_0x51080a(0x40e)]||0x0,_0x349187=_0x3f61ef['Radius']||0x0,_0x414da3=_0x3f61ef[_0x51080a(0x412)]||0x1,_0x4cfdd8=_0x3f61ef[_0x51080a(0x90d)]||'Linear';_0x5a7715[_0x51080a(0x89d)](_0x39d049,_0x23f14e,_0x5dfcf4,_0x349187,_0x414da3,_0x4cfdd8);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x3a3b5a=>{const _0x1a01c5=_0x553167;if(!Imported[_0x1a01c5(0xb49)])return;const _0x4cc29d=SceneManager[_0x1a01c5(0xa7f)][_0x1a01c5(0x306)];if(!_0x4cc29d)return;VisuMZ['ConvertParams'](_0x3a3b5a,_0x3a3b5a);const _0x2c4544=VisuMZ[_0x1a01c5(0xb0c)](_0x3a3b5a['Targets']),_0x38f32e=_0x3a3b5a[_0x1a01c5(0x766)],_0x46a212=_0x3a3b5a[_0x1a01c5(0x9d1)]||0x0,_0x506c01=_0x3a3b5a['OffsetY']||0x0,_0x3aecfc=_0x3a3b5a['Strength']||0x0,_0x4e12be=_0x3a3b5a['Radius']||0x0,_0x41a74c=_0x3a3b5a[_0x1a01c5(0x412)]||0x1,_0x30cd9b=_0x3a3b5a[_0x1a01c5(0x90d)]||_0x1a01c5(0x9fe),_0x190131=Math[_0x1a01c5(0x6b0)](..._0x2c4544['map'](_0x31b3fc=>_0x31b3fc[_0x1a01c5(0x8d6)]()[_0x1a01c5(0x649)]-_0x31b3fc[_0x1a01c5(0x8d6)]()[_0x1a01c5(0x1ca)]()/0x2)),_0x21356a=Math[_0x1a01c5(0x4c1)](..._0x2c4544[_0x1a01c5(0x5c6)](_0x326c08=>_0x326c08[_0x1a01c5(0x8d6)]()[_0x1a01c5(0x649)]+_0x326c08[_0x1a01c5(0x8d6)]()[_0x1a01c5(0x1ca)]()/0x2)),_0x447309=Math[_0x1a01c5(0x6b0)](..._0x2c4544[_0x1a01c5(0x5c6)](_0x5c1d6b=>_0x5c1d6b[_0x1a01c5(0x8d6)]()['_baseY']-_0x5c1d6b['battler']()[_0x1a01c5(0x9ad)]())),_0x4bb425=Math[_0x1a01c5(0x4c1)](..._0x2c4544[_0x1a01c5(0x5c6)](_0x30646b=>_0x30646b[_0x1a01c5(0x8d6)]()['_baseY'])),_0x4cd228=_0x2c4544[_0x1a01c5(0x577)](_0x538e19=>_0x538e19[_0x1a01c5(0x8fb)]())[_0x1a01c5(0x635)],_0x519157=_0x2c4544[_0x1a01c5(0x577)](_0x4e59bb=>_0x4e59bb[_0x1a01c5(0x602)]())[_0x1a01c5(0x635)];let _0xda17d1=0x0,_0x11af07=0x0;if(_0x38f32e[_0x1a01c5(0x750)](/front/i))_0xda17d1=_0x4cd228>=_0x519157?_0x190131:_0x21356a;else{if(_0x38f32e['match'](/middle/i))_0xda17d1=(_0x190131+_0x21356a)/0x2,melee=-0x1;else _0x38f32e[_0x1a01c5(0x750)](/back/i)&&(_0xda17d1=_0x4cd228>=_0x519157?_0x21356a:_0x190131);}if(_0x38f32e[_0x1a01c5(0x750)](/head/i))_0x11af07=_0x447309;else{if(_0x38f32e['match'](/center/i))_0x11af07=(_0x447309+_0x4bb425)/0x2;else _0x38f32e[_0x1a01c5(0x750)](/base/i)&&(_0x11af07=_0x4bb425);}_0xda17d1+=(Graphics['width']-Graphics[_0x1a01c5(0x5f7)])/0x2,_0x11af07+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0xda17d1+=_0x46a212,_0x11af07+=_0x506c01,_0x4cc29d[_0x1a01c5(0x89d)](_0x3aecfc,_0xda17d1,_0x11af07,_0x4e12be,_0x41a74c,_0x30cd9b);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x813),_0x2e0648=>{const _0xdb3435=_0x553167;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x20f98b=SceneManager[_0xdb3435(0xa7f)][_0xdb3435(0x306)];if(!_0x20f98b)return;if(VisuMZ[_0xdb3435(0x2e9)]['version']<=1.05){alert(_0xdb3435(0x1a2)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x2e0648,_0x2e0648);const _0x1cdf4f=VisuMZ['CreateActionSequenceTargets'](_0x2e0648[_0xdb3435(0xaf7)]),_0x57a0c4={'filename':_0x2e0648[_0xdb3435(0x500)],'horzCells':_0x2e0648[_0xdb3435(0xb71)]||0x1,'vertCells':_0x2e0648[_0xdb3435(0x62e)]||0x1,'frameDelay':_0x2e0648[_0xdb3435(0x2ab)]||0x1,'smooth':_0x2e0648[_0xdb3435(0x14f)]||![],'anchorX':_0x2e0648[_0xdb3435(0x8e9)]||0x0,'anchorY':_0x2e0648[_0xdb3435(0x5b0)]||0x0,'offsetX':_0x2e0648[_0xdb3435(0x56b)]||0x0,'offsetY':_0x2e0648['offsetY']||0x0};for(const _0x53dbcb of _0x1cdf4f){if(!_0x53dbcb)continue;if(!_0x53dbcb['battler']())continue;_0x53dbcb[_0xdb3435(0x8d6)]()['startInjectAnimation'](_0x57a0c4);}const _0x3adc4d=$gameTemp[_0xdb3435(0x646)]();_0x3adc4d&&_0x3adc4d[_0xdb3435(0x759)](_0xdb3435(0x5b2));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x4cd),_0xbf49dc=>{const _0xd6d7dc=_0x553167;if(!Imported[_0xd6d7dc(0xb49)])return;const _0x2dd2b0=SceneManager[_0xd6d7dc(0xa7f)][_0xd6d7dc(0x306)];if(!_0x2dd2b0)return;if(VisuMZ[_0xd6d7dc(0x2e9)][_0xd6d7dc(0x932)]<=1.05){alert(_0xd6d7dc(0x1a2)),SceneManager[_0xd6d7dc(0x19c)]();return;}VisuMZ[_0xd6d7dc(0x8e2)](_0xbf49dc,_0xbf49dc);const _0x22e633=VisuMZ[_0xd6d7dc(0xb0c)](_0xbf49dc['Targets']);for(const _0x38fda4 of _0x22e633){if(!_0x38fda4)continue;if(!_0x38fda4[_0xd6d7dc(0x8d6)]())continue;_0x38fda4['battler']()[_0xd6d7dc(0x1ea)]();}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x94a),_0x1af900=>{const _0x1de165=_0x553167;if(!Imported[_0x1de165(0xb49)])return;const _0x217d36=SceneManager[_0x1de165(0xa7f)][_0x1de165(0x306)];if(!_0x217d36)return;if(VisuMZ[_0x1de165(0x2e9)][_0x1de165(0x932)]<=1.05){alert(_0x1de165(0x1a2)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x1af900,_0x1af900);const _0x479ab1=VisuMZ['CreateActionSequenceTargets'](_0x1af900[_0x1de165(0xaf7)]),_0xa30b78=_0x1af900['pause'];for(const _0x36638a of _0x479ab1){if(!_0x36638a)continue;if(!_0x36638a['battler']())continue;_0x36638a[_0x1de165(0x8d6)]()[_0x1de165(0xad0)](_0xa30b78);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Inject_WaitForInjectAni',_0x14f95d=>{const _0x55bf99=_0x553167;if(!SceneManager[_0x55bf99(0x2c2)]())return;const _0x4148bf=$gameTemp[_0x55bf99(0x646)]();if(!_0x4148bf)return;_0x4148bf[_0x55bf99(0x759)](_0x55bf99(0xf2));}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x9f6),_0x3eee1f=>{const _0x13d2b3=_0x553167;if(!SceneManager[_0x13d2b3(0x2c2)]())return;VisuMZ['ConvertParams'](_0x3eee1f,_0x3eee1f);const _0x48478c=$gameTemp[_0x13d2b3(0x646)](),_0x135559=BattleManager[_0x13d2b3(0x984)],_0x7d67e4=BattleManager[_0x13d2b3(0x1ef)],_0x51ff5a=BattleManager[_0x13d2b3(0x7d3)];if(!_0x48478c||!_0x135559||!_0x7d67e4)return;if(!_0x135559['item']())return;const _0x2259cc=VisuMZ[_0x13d2b3(0xb0c)](_0x3eee1f[_0x13d2b3(0xaf7)]);for(const _0x22f233 of _0x2259cc){if(!_0x22f233)continue;_0x51ff5a[_0x13d2b3(0x9d2)](_0x13d2b3(0x607),_0x7d67e4,_0x22f233);}_0x48478c[_0x13d2b3(0x759)](_0x13d2b3(0x3a0));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xaa5),_0x11b26c=>{const _0xa04af=_0x553167;if(!SceneManager[_0xa04af(0x2c2)]())return;if(!Imported[_0xa04af(0x2b7)])return;$gameTemp[_0xa04af(0x14b)]=!![];}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x340),_0xc0a1ed=>{const _0x4d09bb=_0x553167;if(!SceneManager[_0x4d09bb(0x2c2)]())return;VisuMZ[_0x4d09bb(0x8e2)](_0xc0a1ed,_0xc0a1ed);const _0x17403f=[_0x4d09bb(0x4fb),_0x4d09bb(0xbd8),'ATK',_0x4d09bb(0xbcb),_0x4d09bb(0x4aa),_0x4d09bb(0x9bb),_0x4d09bb(0x4c9),_0x4d09bb(0xae0)],_0x254920=_0xc0a1ed['Buffs'],_0x1e951e=_0xc0a1ed[_0x4d09bb(0x47a)],_0x1eecd7=_0xc0a1ed[_0x4d09bb(0xa9e)],_0x1d2cae=VisuMZ[_0x4d09bb(0xb0c)](_0xc0a1ed['Targets']);for(const _0x531517 of _0x1d2cae){if(!_0x531517)continue;for(const _0x140de3 of _0x254920){const _0x595cf3=_0x17403f[_0x4d09bb(0x163)](_0x140de3[_0x4d09bb(0x512)]()[_0x4d09bb(0x976)]());_0x595cf3>=0x0&&_0x595cf3<=0x7&&_0x531517['addBuff'](_0x595cf3,_0x1eecd7);}for(const _0x394743 of _0x1e951e){const _0x1006e2=_0x17403f[_0x4d09bb(0x163)](_0x394743['toUpperCase']()[_0x4d09bb(0x976)]());_0x1006e2>=0x0&&_0x1006e2<=0x7&&_0x531517[_0x4d09bb(0x4b8)](_0x1006e2,_0x1eecd7);}}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x2f7),_0x5ceb7a=>{const _0x38d4fd=_0x553167;if(!SceneManager[_0x38d4fd(0x2c2)]())return;VisuMZ[_0x38d4fd(0x8e2)](_0x5ceb7a,_0x5ceb7a);const _0x4763cc=_0x5ceb7a[_0x38d4fd(0x7e9)],_0x35003d=VisuMZ[_0x38d4fd(0xb0c)](_0x5ceb7a[_0x38d4fd(0xaf7)]);for(const _0x2480d2 of _0x35003d){if(!_0x2480d2)continue;for(const _0x15e4b4 of _0x4763cc){_0x2480d2['addState'](_0x15e4b4);}}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x407),_0xcaa01a=>{const _0x5edbf3=_0x553167;if(!SceneManager[_0x5edbf3(0x2c2)]())return;VisuMZ[_0x5edbf3(0x8e2)](_0xcaa01a,_0xcaa01a);const _0x107a7f=BattleManager[_0x5edbf3(0x984)],_0x2c0b34={'arPenRate':_0xcaa01a['ArPenRate'],'arPenFlat':_0xcaa01a[_0x5edbf3(0x972)],'arRedRate':_0xcaa01a['ArRedRate'],'arRedFlat':_0xcaa01a[_0x5edbf3(0xb14)]};_0x107a7f[_0x5edbf3(0x74a)]=_0x2c0b34;}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x360),_0x46faca=>{const _0x8421a7=_0x553167;if(!SceneManager[_0x8421a7(0x2c2)]())return;if(!Imported[_0x8421a7(0x62a)])return;VisuMZ[_0x8421a7(0x8e2)](_0x46faca,_0x46faca);const _0x428a34=VisuMZ[_0x8421a7(0xb0c)](_0x46faca['Targets']),_0x415f29=_0x46faca[_0x8421a7(0x4d1)]||0x1;for(const _0x466e5a of _0x428a34){if(!_0x466e5a)continue;if(!_0x466e5a[_0x8421a7(0x602)]())continue;_0x466e5a[_0x8421a7(0x6a6)](_0x415f29);}}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x3e1),_0x81ef4d=>{const _0x47296d=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x47296d(0x7fc)])return;if(!BattleManager['isATB']())return;VisuMZ[_0x47296d(0x8e2)](_0x81ef4d,_0x81ef4d);const _0x5dc91b=VisuMZ[_0x47296d(0xb0c)](_0x81ef4d[_0x47296d(0xaf7)]),_0xe6f159=_0x81ef4d[_0x47296d(0xf8)],_0x4b916b=_0x81ef4d[_0x47296d(0xf8)],_0x23af44=_0x81ef4d[_0x47296d(0x68c)];for(const _0x2d4f5b of _0x5dc91b){if(!_0x2d4f5b)continue;if(_0x2d4f5b[_0x47296d(0x466)]())_0x2d4f5b[_0x47296d(0x383)](_0xe6f159);else{if(_0x2d4f5b[_0x47296d(0x386)]()){_0x2d4f5b['changeAtbCastTime'](_0x4b916b);if(_0x23af44)_0x2d4f5b[_0x47296d(0x74d)]();}}}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],'ActSeq_Mechanics_BoostPointsChange',_0x1ecacb=>{const _0xbbdf0e=_0x553167;if(!SceneManager[_0xbbdf0e(0x2c2)]())return;if(!Imported[_0xbbdf0e(0x26f)])return;VisuMZ[_0xbbdf0e(0x8e2)](_0x1ecacb,_0x1ecacb);const _0x5739bf=VisuMZ[_0xbbdf0e(0xb0c)](_0x1ecacb['Targets']),_0x596c73=_0x1ecacb[_0xbbdf0e(0x45f)];for(const _0xa7b168 of _0x5739bf){if(!_0xa7b168)continue;_0xa7b168[_0xbbdf0e(0x4e8)](_0x596c73);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x921),_0x312544=>{const _0x328947=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x328947(0x26f)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x328947(0x8e2)](_0x312544,_0x312544);const _0x2189fb=_0x312544[_0x328947(0xb97)];$gameVariables[_0x328947(0x915)](_0x2189fb,BattleManager['_subject'][_0x328947(0xbc3)]());}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x4bd),_0x2badd3=>{const _0x582ae0=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x582ae0(0x8e2)](_0x2badd3,_0x2badd3);const _0x558b1e=VisuMZ[_0x582ae0(0xb0c)](_0x2badd3[_0x582ae0(0xaf7)]),_0x2dacb7=_0x2badd3['BreakShields'];for(const _0x4cf651 of _0x558b1e){if(!_0x4cf651)continue;if(_0x4cf651['isBreakStunned']())continue;if(!_0x4cf651[_0x582ae0(0x93c)]())continue;_0x4cf651[_0x582ae0(0x799)](_0x2dacb7);}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x773),_0x57e0b2=>{const _0x4affae=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4affae(0x924)])return;VisuMZ[_0x4affae(0x8e2)](_0x57e0b2,_0x57e0b2);const _0x5a0707=VisuMZ['CreateActionSequenceTargets'](_0x57e0b2['Targets']);for(const _0x477791 of _0x5a0707){if(!_0x477791)continue;if(_0x477791['isBreakStunned']())continue;if(!_0x477791[_0x4affae(0x93c)]())continue;_0x477791[_0x4affae(0x86b)]();}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Mechanics_BtbGain',_0x52cbbb=>{const _0x1c1625=_0x553167;if(!SceneManager[_0x1c1625(0x2c2)]())return;if(!Imported[_0x1c1625(0x443)])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x1c1625(0x8e2)](_0x52cbbb,_0x52cbbb);const _0x4a9a75=VisuMZ['CreateActionSequenceTargets'](_0x52cbbb[_0x1c1625(0xaf7)]),_0x146006=_0x52cbbb[_0x1c1625(0x367)];for(const _0x577d4e of _0x4a9a75){if(!_0x577d4e)continue;_0x577d4e[_0x1c1625(0x2d7)](_0x146006);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Mechanics_Collapse',_0x1dab0f=>{const _0x446852=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1dab0f,_0x1dab0f);const _0x281c1a=$gameTemp['getLastPluginCommandInterpreter'](),_0x43dd54=BattleManager[_0x446852(0x984)],_0x2f1e5f=BattleManager[_0x446852(0x1ef)];if(!_0x281c1a||!_0x43dd54||!_0x2f1e5f)return;if(!_0x43dd54[_0x446852(0x58c)]())return;const _0x35cd4a=VisuMZ[_0x446852(0xb0c)](_0x1dab0f[_0x446852(0xaf7)]);for(const _0x3524ed of _0x35cd4a){if(!_0x3524ed)continue;_0x1dab0f[_0x446852(0xba3)]&&(_0x3524ed[_0x446852(0x4d8)](),_0x3524ed[_0x446852(0x672)](_0x3524ed[_0x446852(0x154)]())),_0x3524ed[_0x446852(0x472)]()&&_0x3524ed[_0x446852(0x9dd)]();}_0x281c1a[_0x446852(0x759)](_0x446852(0x673));}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Mechanics_CtbOrder',_0xc1211=>{const _0x12d7ca=_0x553167;if(!SceneManager[_0x12d7ca(0x2c2)]())return;if(!Imported[_0x12d7ca(0x916)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x12d7ca(0x8e2)](_0xc1211,_0xc1211);const _0x2804ec=VisuMZ[_0x12d7ca(0xb0c)](_0xc1211[_0x12d7ca(0xaf7)]),_0x28c7a0=_0xc1211[_0x12d7ca(0x803)];for(const _0x4f98c7 of _0x2804ec){if(!_0x4f98c7)continue;_0x4f98c7[_0x12d7ca(0x291)](_0x28c7a0);}}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Mechanics_CtbSpeed',_0x41cf65=>{const _0x1b3aaf=_0x553167;if(!SceneManager[_0x1b3aaf(0x2c2)]())return;if(!Imported[_0x1b3aaf(0x916)])return;if(!BattleManager[_0x1b3aaf(0x1eb)]())return;VisuMZ[_0x1b3aaf(0x8e2)](_0x41cf65,_0x41cf65);const _0x3e2053=VisuMZ[_0x1b3aaf(0xb0c)](_0x41cf65['Targets']),_0x468646=_0x41cf65[_0x1b3aaf(0xf8)],_0x4fd88c=_0x41cf65['ChargeRate'];for(const _0x212467 of _0x3e2053){if(!_0x212467)continue;if(_0x212467['_tpbState']===_0x1b3aaf(0x6e7))_0x212467[_0x1b3aaf(0x1c3)](_0x468646);else _0x212467[_0x1b3aaf(0x620)]===_0x1b3aaf(0xafb)&&_0x212467[_0x1b3aaf(0x3fc)](_0x4fd88c);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x8ba),_0x22c595=>{const _0x5f4115=_0x553167;if(!SceneManager[_0x5f4115(0x2c2)]())return;VisuMZ[_0x5f4115(0x8e2)](_0x22c595,_0x22c595);const _0x3857a1=BattleManager[_0x5f4115(0x984)];if(!_0x3857a1)return;let _0x2f1e6f=_0x22c595['Formula'];_0x3857a1['setCustomDamageFormula'](_0x2f1e6f);}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0xa5f),_0x16ce41=>{const _0x52103a=_0x553167;if(!SceneManager[_0x52103a(0x2c2)]())return;VisuMZ['ConvertParams'](_0x16ce41,_0x16ce41);const _0x4e1e90=VisuMZ['CreateActionSequenceTargets'](_0x16ce41[_0x52103a(0xaf7)]);for(const _0x27658c of _0x4e1e90){if(!_0x27658c)continue;if(_0x27658c[_0x52103a(0x34f)]())_0x27658c[_0x52103a(0x951)]();}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xa7b),_0x55f8bf=>{const _0x12366f=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x12366f(0x8e2)](_0x55f8bf,_0x55f8bf);const _0x1b3952=$gameTemp['getLastPluginCommandInterpreter'](),_0x4f9496=BattleManager['_subject'],_0x2900bd=_0x55f8bf[_0x12366f(0xb96)];if(!_0x1b3952)return;if(!_0x4f9496)return;_0x4f9496&&_0x4f9496[_0x12366f(0x82f)]()&&_0x2900bd[_0x12366f(0x512)]()['trim']()!==_0x12366f(0x857)&&_0x1b3952[_0x12366f(0x86c)]([_0x2900bd]);}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Mechanics_EmulateAttackEffect',_0x380cef=>{const _0x32b71a=_0x553167;if(!SceneManager[_0x32b71a(0x2c2)]())return;VisuMZ[_0x32b71a(0x8e2)](_0x380cef,_0x380cef);const _0x393196=$gameTemp[_0x32b71a(0x646)](),_0x595991=BattleManager[_0x32b71a(0x7d3)];if(!_0x393196)return;const _0x2b1a45=VisuMZ[_0x32b71a(0xb0c)](_0x380cef[_0x32b71a(0xb9b)]),_0x1f4241=VisuMZ[_0x32b71a(0xb0c)](_0x380cef[_0x32b71a(0xaf7)]);for(const _0x32cee0 of _0x2b1a45){for(const _0x42f278 of _0x1f4241){if(!_0x42f278)continue;const _0x4736cc=$dataSkills[_0x32cee0[_0x32b71a(0xb2e)]()];_0x595991['push'](_0x32b71a(0x458),_0x32cee0,_0x42f278,_0x4736cc);}}_0x393196[_0x32b71a(0x759)](_0x32b71a(0x3a0));}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0xaa3),_0x59de48=>{const _0x1860e5=_0x553167;if(!SceneManager[_0x1860e5(0x2c2)]())return;VisuMZ[_0x1860e5(0x8e2)](_0x59de48,_0x59de48);const _0x4efff3=$gameTemp[_0x1860e5(0x646)](),_0x1e3bad=BattleManager[_0x1860e5(0x7d3)];if(!_0x4efff3)return;const _0xb79388=VisuMZ[_0x1860e5(0xb0c)](_0x59de48[_0x1860e5(0xb9b)]),_0x1ddd85=VisuMZ['CreateActionSequenceTargets'](_0x59de48[_0x1860e5(0xaf7)]);for(const _0x3b9ed9 of _0xb79388){for(const _0x4931fe of _0x1ddd85){if(!_0x4931fe)continue;const _0x535965=$dataSkills[_0x3b9ed9[_0x1860e5(0xbf8)]()];_0x1e3bad[_0x1860e5(0x9d2)](_0x1860e5(0x458),_0x3b9ed9,_0x4931fe,_0x535965);}}_0x4efff3[_0x1860e5(0x759)](_0x1860e5(0x3a0));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x248),_0x4bb164=>{const _0x54e792=_0x553167;if(!SceneManager[_0x54e792(0x2c2)]())return;VisuMZ[_0x54e792(0x8e2)](_0x4bb164,_0x4bb164);const _0x2787f2=$gameTemp['getLastPluginCommandInterpreter'](),_0x4f52da=BattleManager[_0x54e792(0x7d3)],_0x167803=Number(_0x4bb164[_0x54e792(0x84d)]||0x1),_0x26b875=$dataItems[_0x167803];if(!_0x2787f2)return;if(!_0x26b875)return;const _0x110feb=VisuMZ['CreateActionSequenceTargets'](_0x4bb164[_0x54e792(0xb9b)]),_0x1347f0=VisuMZ[_0x54e792(0xb0c)](_0x4bb164['Targets']);for(const _0x5a40a6 of _0x110feb){for(const _0x523a99 of _0x1347f0){if(!_0x523a99)continue;_0x4f52da[_0x54e792(0x9d2)](_0x54e792(0x458),_0x5a40a6,_0x523a99,_0x26b875);}}_0x2787f2[_0x54e792(0x759)](_0x54e792(0x3a0));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x112),_0x561826=>{const _0x60dfa9=_0x553167;if(!SceneManager[_0x60dfa9(0x2c2)]())return;VisuMZ['ConvertParams'](_0x561826,_0x561826);let _0x359ad5=Number(_0x561826[_0x60dfa9(0x33f)]||0x0);if(_0x359ad5<=0x0){const _0x332901=BattleManager['_action'];if(_0x332901&&_0x332901[_0x60dfa9(0x2bb)]())_0x359ad5=_0x332901[_0x60dfa9(0x58c)]()['id'];else return;}const _0x204519=$dataSkills[_0x359ad5];if(!_0x204519)return;const _0x38bfd8=VisuMZ[_0x60dfa9(0xb0c)](_0x561826[_0x60dfa9(0xb9b)]);for(const _0x1c13fa of _0x38bfd8){_0x1c13fa['paySkillCost'](_0x204519);}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x84c),_0x2236ce=>{const _0x573724=_0x553167;if(!SceneManager[_0x573724(0x2c2)]())return;VisuMZ[_0x573724(0x8e2)](_0x2236ce,_0x2236ce);const _0x11c6ab=$gameTemp[_0x573724(0x646)](),_0x11a462=BattleManager['_logWindow'],_0x197870=Number(_0x2236ce[_0x573724(0x33f)]||0x1),_0x18cac2=$dataSkills[_0x197870];if(!_0x11c6ab)return;if(!_0x18cac2)return;const _0x4974f9=VisuMZ[_0x573724(0xb0c)](_0x2236ce['Users']),_0x1f28ad=VisuMZ['CreateActionSequenceTargets'](_0x2236ce[_0x573724(0xaf7)]);for(const _0x272e40 of _0x4974f9){for(const _0x40e501 of _0x1f28ad){if(!_0x40e501)continue;_0x11a462[_0x573724(0x9d2)]('emulateActionEffect',_0x272e40,_0x40e501,_0x18cac2);}}_0x11c6ab[_0x573724(0x759)](_0x573724(0x3a0));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x872),_0x2350c9=>{const _0x34d4c2=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x34d4c2(0x8e2)](_0x2350c9,_0x2350c9);const _0x5e6c4b=VisuMZ['CreateActionSequenceTargets'](_0x2350c9[_0x34d4c2(0xaf7)]);for(const _0x49de2f of _0x5e6c4b){if(!_0x49de2f)continue;if(!_0x49de2f[_0x34d4c2(0x602)]())continue;_0x49de2f[_0x34d4c2(0x9dc)]();}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x427),_0x33f0ff=>{const _0x27898b=_0x553167;if(!SceneManager[_0x27898b(0x2c2)]())return;if(!Imported[_0x27898b(0xb2a)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x27898b(0x8e2)](_0x33f0ff,_0x33f0ff);const _0x20a3a0=_0x33f0ff[_0x27898b(0x81d)];BattleManager['_subject']&&BattleManager[_0x27898b(0x1ef)]['friendsUnit']()[_0x27898b(0x2cb)](_0x20a3a0);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Mechanics_FtbAction',_0x551891=>{const _0x4fb55a=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4fb55a(0x9e9)])return;if(!BattleManager[_0x4fb55a(0x259)]())return;VisuMZ[_0x4fb55a(0x8e2)](_0x551891,_0x551891);const _0x51dc07=_0x551891[_0x4fb55a(0x81d)];BattleManager[_0x4fb55a(0x1ef)]&&BattleManager['_subject'][_0x4fb55a(0xa3e)]()[_0x4fb55a(0x9ae)](_0x51dc07);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x71c),_0x31b8ab=>{const _0xfd0cca=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xfd0cca(0x8e2)](_0x31b8ab,_0x31b8ab);const _0x1524e5=VisuMZ[_0xfd0cca(0xb0c)](_0x31b8ab[_0xfd0cca(0xaf7)]),_0x29dd81=_0x31b8ab['HP_Rate'],_0x2c98d2=_0x31b8ab['HP_Flat'],_0x2aa5e8=_0x31b8ab[_0xfd0cca(0x4b4)],_0x3835c6=_0x31b8ab['MP_Flat'],_0x482ec9=_0x31b8ab[_0xfd0cca(0x76f)],_0x2dc43a=_0x31b8ab['TP_Flat'],_0x423f88=_0x31b8ab[_0xfd0cca(0xb22)];for(const _0x181d92 of _0x1524e5){if(!_0x181d92)continue;const _0x5a0cf2=_0x181d92['isAlive'](),_0x367bae=Math['round'](_0x29dd81*_0x181d92[_0xfd0cca(0x652)]+_0x2c98d2),_0x569aa0=Math['round'](_0x2aa5e8*_0x181d92[_0xfd0cca(0xb1a)]+_0x3835c6),_0x55866d=Math[_0xfd0cca(0x462)](_0x482ec9*_0x181d92[_0xfd0cca(0x718)]()+_0x2dc43a);if(_0x367bae!==0x0)_0x181d92[_0xfd0cca(0x725)](_0x367bae);if(_0x569aa0!==0x0)_0x181d92[_0xfd0cca(0x3e4)](_0x569aa0);if(_0x55866d!==0x0)_0x181d92[_0xfd0cca(0x828)](_0x55866d);if(_0x423f88)_0x181d92[_0xfd0cca(0x951)]();_0x5a0cf2&&_0x181d92[_0xfd0cca(0x82f)]()&&_0x181d92['performCollapse']();}}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Mechanics_Immortal',_0x317130=>{const _0x5d9f43=_0x553167;if(!SceneManager[_0x5d9f43(0x2c2)]())return;VisuMZ[_0x5d9f43(0x8e2)](_0x317130,_0x317130);const _0x5478b3=VisuMZ[_0x5d9f43(0xb0c)](_0x317130[_0x5d9f43(0xaf7)]);for(const _0xc8173d of _0x5478b3){if(!_0xc8173d)continue;_0xc8173d['setImmortal'](_0x317130['Immortal']);}}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0x123),_0x14de13=>{const _0x4caab4=_0x553167;if(!SceneManager[_0x4caab4(0x2c2)]())return;VisuMZ[_0x4caab4(0x8e2)](_0x14de13,_0x14de13);const _0x1376bf=BattleManager[_0x4caab4(0x984)],_0x1d717f={'criticalHitRate':_0x14de13[_0x4caab4(0x436)],'criticalHitFlat':_0x14de13['CriticalHitFlat'],'criticalDmgRate':_0x14de13[_0x4caab4(0x30c)],'criticalDmgFlat':_0x14de13[_0x4caab4(0x5d7)],'damageRate':_0x14de13[_0x4caab4(0x7c3)],'damageFlat':_0x14de13['DamageFlat'],'hitRate':_0x14de13[_0x4caab4(0x12e)],'hitFlat':_0x14de13[_0x4caab4(0x311)]};_0x1376bf[_0x4caab4(0x660)]=_0x1d717f;}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x241),_0x422be9=>{const _0x1094a0=_0x553167;if(!SceneManager[_0x1094a0(0x2c2)]())return;VisuMZ['ConvertParams'](_0x422be9,_0x422be9);const _0x4d27b9=_0x422be9['CommonEventID'];SceneManager[_0x1094a0(0xa7f)][_0x1094a0(0x67a)](_0x4d27b9);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x324),_0x10bebf=>{const _0x42ea5b=_0x553167;if(!SceneManager[_0x42ea5b(0x2c2)]())return;if(!Imported[_0x42ea5b(0x96b)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x42ea5b(0x8e2)](_0x10bebf,_0x10bebf);const _0x4f7378=VisuMZ[_0x42ea5b(0xb0c)](_0x10bebf[_0x42ea5b(0xaf7)]);for(const _0x231bdb of _0x4f7378){if(!_0x231bdb)continue;let _0x399b6c=_0x10bebf[_0x42ea5b(0x8f1)],_0x131495=_0x10bebf[_0x42ea5b(0x8bf)],_0x3254e9=_0x10bebf[_0x42ea5b(0x15d)];BattleManager[_0x42ea5b(0x9ee)][_0x42ea5b(0xb5d)](_0x231bdb)?_0x399b6c+=_0x3254e9:_0x131495+=_0x3254e9,BattleManager['turnOrderChangeOTB'](_0x231bdb,-_0x399b6c,![]),BattleManager[_0x42ea5b(0xbc5)](_0x231bdb,-_0x131495,!![]);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x1f2),_0x3d417d=>{const _0x197f50=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x197f50(0x64f)])return;if(!BattleManager[_0x197f50(0x3ca)]())return;VisuMZ[_0x197f50(0x8e2)](_0x3d417d,_0x3d417d);const _0x3ee33f=BattleManager['_subject'][_0x197f50(0xa3e)](),_0x2f4ea4=_0x3d417d[_0x197f50(0x5ef)],_0x175239=_0x3d417d[_0x197f50(0x1f5)]||_0x197f50(0x142),_0x10cee5=_0x3d417d['alterType']||_0x197f50(0x142),_0x6f0e83=_0x3d417d[_0x197f50(0xf6)]||0x0,_0x312242=_0x3d417d[_0x197f50(0x3c0)]||0x0;(_0x3ee33f['canAlterActionCostPTB']()||_0x2f4ea4)&&(_0x2f4ea4&&(_0x3ee33f['_ptbActionCost']=_0x3ee33f['_ptbActionCost']||{},_0x3ee33f[_0x197f50(0x551)][_0x197f50(0x460)]=0x0),_0x3ee33f['alterActionCostPTB'](_0x175239,_0x10cee5,_0x6f0e83,_0x312242));}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x3fa),_0x541d1e=>{const _0x2ddbec=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x2ddbec(0x3ca)]())return;VisuMZ[_0x2ddbec(0x8e2)](_0x541d1e,_0x541d1e);const _0x1c4a35=BattleManager['_subject']['friendsUnit']();let _0x4c811f=Math['max'](_0x541d1e[_0x2ddbec(0xc05)],0x0),_0x49285a=_0x1c4a35['getFullActionsPTB'](),_0x26881b=_0x1c4a35['getHalfActionsPTB']();while(_0x4c811f--){if(_0x49285a<=0x0&&_0x26881b<=0x0)break;else _0x49285a>0x0?(_0x49285a--,_0x26881b++):_0x26881b--;}_0x1c4a35[_0x2ddbec(0x628)](_0x49285a),_0x1c4a35[_0x2ddbec(0x15c)](_0x26881b);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Mechanics_PtbFullHalfAction',_0x54ffef=>{const _0x35b64a=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x35b64a(0x64f)])return;if(!BattleManager[_0x35b64a(0x3ca)]())return;VisuMZ[_0x35b64a(0x8e2)](_0x54ffef,_0x54ffef);const _0x5425d6=BattleManager[_0x35b64a(0x1ef)][_0x35b64a(0xa3e)]();let _0x246b34=_0x54ffef[_0x35b64a(0x3c6)],_0x7798ab=_0x54ffef[_0x35b64a(0x492)];_0x5425d6[_0x35b64a(0x7a4)](_0x246b34),_0x5425d6[_0x35b64a(0x82e)](_0x7798ab);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x46e02b=>{const _0x220d6f=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x220d6f(0x8e2)](_0x46e02b,_0x46e02b);const _0x263d71=[_0x220d6f(0x4fb),_0x220d6f(0xbd8),'ATK',_0x220d6f(0xbcb),_0x220d6f(0x4aa),_0x220d6f(0x9bb),'AGI',_0x220d6f(0xae0)],_0x1d1595=_0x46e02b['Buffs'],_0xf86ced=_0x46e02b['Debuffs'],_0x193c2a=VisuMZ[_0x220d6f(0xb0c)](_0x46e02b[_0x220d6f(0xaf7)]);for(const _0x2886ca of _0x193c2a){if(!_0x2886ca)continue;for(const _0xecf5f7 of _0x1d1595){const _0x402ccf=_0x263d71['indexOf'](_0xecf5f7[_0x220d6f(0x512)]()['trim']());_0x402ccf>=0x0&&_0x402ccf<=0x7&&_0x2886ca[_0x220d6f(0x251)](_0x402ccf)&&_0x2886ca['removeBuff'](_0x402ccf);}for(const _0x2ab2ff of _0xf86ced){const _0x150367=_0x263d71[_0x220d6f(0x163)](_0x2ab2ff[_0x220d6f(0x512)]()[_0x220d6f(0x976)]());_0x150367>=0x0&&_0x150367<=0x7&&_0x2886ca['isDebuffAffected'](_0x150367)&&_0x2886ca['removeBuff'](_0x150367);}}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x1b4),_0x2528f9=>{const _0x4ab768=_0x553167;if(!SceneManager[_0x4ab768(0x2c2)]())return;VisuMZ[_0x4ab768(0x8e2)](_0x2528f9,_0x2528f9);const _0x57241d=_0x2528f9[_0x4ab768(0x7e9)],_0x35de88=VisuMZ[_0x4ab768(0xb0c)](_0x2528f9[_0x4ab768(0xaf7)]);for(const _0x791e75 of _0x35de88){if(!_0x791e75)continue;for(const _0x4473d0 of _0x57241d){_0x791e75['removeState'](_0x4473d0);}}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x191),_0x4ae697=>{const _0x29656e=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x29656e(0x14e)])return;VisuMZ[_0x29656e(0x8e2)](_0x4ae697,_0x4ae697);const _0x3cbaaf=VisuMZ[_0x29656e(0xb0c)](_0x4ae697[_0x29656e(0xaf7)]),_0x4cdefa=Number(_0x4ae697['StateID']),_0x304254=Number(_0x4ae697['Turns']),_0x94d31a=_0x4ae697[_0x29656e(0x1ae)];for(const _0xafc444 of _0x3cbaaf){if(!_0xafc444)continue;_0x94d31a&&!_0xafc444[_0x29656e(0x96e)](_0x4cdefa)?(_0xafc444[_0x29656e(0x672)](_0x4cdefa),_0xafc444[_0x29656e(0x647)](_0x4cdefa,_0x304254)):_0xafc444[_0x29656e(0x946)](_0x4cdefa,_0x304254);}}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0xb9f),_0x41a4c2=>{const _0x2ed80a=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ed80a(0x14e)])return;VisuMZ['ConvertParams'](_0x41a4c2,_0x41a4c2);const _0x5a8c6c=VisuMZ[_0x2ed80a(0xb0c)](_0x41a4c2[_0x2ed80a(0xaf7)]),_0x408768=Number(_0x41a4c2[_0x2ed80a(0x9f0)]),_0x3ce06f=Math['max'](Number(_0x41a4c2[_0x2ed80a(0xa9e)]),0x0),_0x20d314=_0x41a4c2['AutoAddState'];for(const _0x1ab619 of _0x5a8c6c){if(!_0x1ab619)continue;_0x20d314&&!_0x1ab619['isStateAffected'](_0x408768)&&_0x1ab619[_0x2ed80a(0x672)](_0x408768),_0x1ab619[_0x2ed80a(0x647)](_0x408768,_0x3ce06f);}}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x395),_0x45c838=>{const _0x40aa50=_0x553167;if(!SceneManager[_0x40aa50(0x2c2)]())return;if(!Imported[_0x40aa50(0x51d)])return;if(!BattleManager[_0x40aa50(0x950)]())return;VisuMZ[_0x40aa50(0x8e2)](_0x45c838,_0x45c838);const _0x3dfeae=_0x45c838['Exploited'],_0x229f09=VisuMZ['CreateActionSequenceTargets'](_0x45c838[_0x40aa50(0xaf7)]),_0x59bfcd=_0x45c838[_0x40aa50(0x651)],_0x1b7887=_0x45c838[_0x40aa50(0xbf7)],_0x477511=_0x45c838[_0x40aa50(0x724)],_0x25c16f=BattleManager['_action'];if(_0x3dfeae)for(const _0x55d7ee of _0x229f09){if(!_0x55d7ee)continue;if(_0x55d7ee===BattleManager['_subject'])continue;if(_0x59bfcd)_0x55d7ee[_0x40aa50(0xb0f)](![]);_0x55d7ee[_0x40aa50(0xa0b)](BattleManager['_subject'],_0x25c16f);}if(_0x1b7887&&BattleManager[_0x40aa50(0x1ef)]){if(_0x477511)BattleManager[_0x40aa50(0x1ef)][_0x40aa50(0xb0f)](![]);const _0x3788c1=_0x229f09[0x0];BattleManager['_subject'][_0x40aa50(0x9aa)](_0x3788c1,_0x25c16f);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x6bf),_0x43c9b2=>{const _0x278ec5=_0x553167;if(!SceneManager[_0x278ec5(0x2c2)]())return;if(!Imported[_0x278ec5(0x51d)])return;if(!BattleManager[_0x278ec5(0x950)]())return;VisuMZ[_0x278ec5(0x8e2)](_0x43c9b2,_0x43c9b2);const _0x49ac0b=_0x43c9b2[_0x278ec5(0xa2a)];BattleManager[_0x278ec5(0x1ef)]&&BattleManager[_0x278ec5(0x1ef)][_0x278ec5(0x2b5)](_0x49ac0b);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x1d3),_0xbbf067=>{const _0x33b6e6=_0x553167;if(!SceneManager[_0x33b6e6(0x2c2)]())return;if(!Imported[_0x33b6e6(0x51d)])return;if(!BattleManager[_0x33b6e6(0x950)]())return;VisuMZ[_0x33b6e6(0x8e2)](_0xbbf067,_0xbbf067);let _0x24a0ba=_0xbbf067[_0x33b6e6(0xa2a)];if(BattleManager['_subject']){BattleManager[_0x33b6e6(0x1ef)][_0x33b6e6(0x370)]=BattleManager[_0x33b6e6(0x1ef)][_0x33b6e6(0x370)]||[];while(_0x24a0ba--){if(BattleManager[_0x33b6e6(0x1ef)]['_actions']['length']<=0x0)break;BattleManager[_0x33b6e6(0x1ef)][_0x33b6e6(0x370)][_0x33b6e6(0x906)]();}}}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Mechanics_SwapWeapon',_0x573d1f=>{const _0x3e406d=_0x553167;if(!SceneManager[_0x3e406d(0x2c2)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x3e406d(0x8e2)](_0x573d1f,_0x573d1f);const _0x2708c6=VisuMZ[_0x3e406d(0xb0c)](_0x573d1f[_0x3e406d(0xaf7)]),_0x43c635=_0x573d1f[_0x3e406d(0xb02)];for(const _0x367a28 of _0x2708c6){if(!_0x367a28)continue;if(!_0x367a28[_0x3e406d(0x8fb)]())continue;_0x367a28[_0x3e406d(0x1a9)](_0x43c635);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Mechanics_TextPopup',_0x1d2f5e=>{const _0x4ad26c=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4ad26c(0x8e2)](_0x1d2f5e,_0x1d2f5e);const _0x209193=VisuMZ['CreateActionSequenceTargets'](_0x1d2f5e[_0x4ad26c(0xaf7)]),_0x366348=_0x1d2f5e['Text'],_0x593b12={'textColor':ColorManager[_0x4ad26c(0x30b)](_0x1d2f5e[_0x4ad26c(0x3b0)]),'flashColor':_0x1d2f5e[_0x4ad26c(0xa44)],'flashDuration':_0x1d2f5e[_0x4ad26c(0xa17)]};for(const _0x4b1690 of _0x209193){if(!_0x4b1690)continue;_0x4b1690[_0x4ad26c(0xa00)](_0x366348,_0x593b12);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x849),_0x2f8950=>{const _0x4cfb09=_0x553167;if(!SceneManager[_0x4cfb09(0x2c2)]())return;VisuMZ[_0x4cfb09(0x8e2)](_0x2f8950,_0x2f8950);const _0x2fd4da=VisuMZ[_0x4cfb09(0xb0c)](_0x2f8950[_0x4cfb09(0xaf7)]);let _0x53d9ba=$gameVariables['value'](_0x2f8950[_0x4cfb09(0x633)]);Imported['VisuMZ_0_CoreEngine']&&_0x2f8950[_0x4cfb09(0xbb9)]&&(_0x53d9ba=VisuMZ[_0x4cfb09(0x853)](_0x53d9ba));const _0x35a874=String(_0x53d9ba),_0x544c07={'textColor':ColorManager[_0x4cfb09(0x30b)](_0x2f8950[_0x4cfb09(0x3b0)]),'flashColor':_0x2f8950[_0x4cfb09(0xa44)],'flashDuration':_0x2f8950['FlashDuration']};for(const _0x3a969c of _0x2fd4da){if(!_0x3a969c)continue;_0x3a969c[_0x4cfb09(0xa00)](_0x35a874,_0x544c07);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0xb5a),_0x2e874b=>{const _0x449224=_0x553167;if(!SceneManager[_0x449224(0x2c2)]())return;const _0x8a0d5a=$gameTemp[_0x449224(0x646)]();if(!_0x8a0d5a)return;_0x8a0d5a[_0x449224(0x759)](_0x449224(0x673));}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0xb43),_0x12939a=>{const _0x110637=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x110637(0x8e2)](_0x12939a,_0x12939a);const _0x1afac5=VisuMZ[_0x110637(0xb0c)](_0x12939a[_0x110637(0xaf7)]);for(const _0x4ed63c of _0x1afac5){if(!_0x4ed63c)continue;_0x4ed63c['clearFreezeMotion']();}}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x615),_0x5d8849=>{const _0x364172=_0x553167;if(!SceneManager[_0x364172(0x2c2)]())return;VisuMZ['ConvertParams'](_0x5d8849,_0x5d8849);const _0x33d65b=VisuMZ[_0x364172(0xb0c)](_0x5d8849['Targets']),_0x2eb89c=_0x5d8849[_0x364172(0x428)]['toLowerCase']()[_0x364172(0x976)]();let _0x1cab8d=_0x5d8849[_0x364172(0x6d6)];const _0x2a75aa=_0x5d8849[_0x364172(0x50a)];![_0x364172(0xa94),_0x364172(0x558),_0x364172(0x531),_0x364172(0x450)][_0x364172(0xb5d)](_0x2eb89c)&&(_0x1cab8d=![]);for(const _0x2574ab of _0x33d65b){if(!_0x2574ab)continue;_0x2574ab[_0x364172(0x342)](_0x2eb89c,_0x1cab8d,_0x2a75aa);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Motion_MotionType',_0x1cc3e8=>{const _0x335719=_0x553167;if(!SceneManager[_0x335719(0x2c2)]())return;VisuMZ['ConvertParams'](_0x1cc3e8,_0x1cc3e8);const _0x129d56=VisuMZ[_0x335719(0xb0c)](_0x1cc3e8[_0x335719(0xaf7)]),_0x42f28e=_0x1cc3e8['MotionType']['toLowerCase']()['trim'](),_0x42aefc=_0x1cc3e8[_0x335719(0x6d6)];for(const _0x842d27 of _0x129d56){if(!_0x842d27)continue;_0x842d27[_0x335719(0x3d4)]=_0x42aefc;if(_0x42f28e['match'](/ATTACK[ ](\d+)/i))_0x842d27[_0x335719(0xbac)](Number(RegExp['$1']));else _0x42f28e===_0x335719(0xa94)?_0x842d27[_0x335719(0xb65)]():_0x842d27['requestMotion'](_0x42f28e);if(!_0x42aefc)_0x842d27[_0x335719(0x574)](0x0);else{if(_0x42aefc&&[_0x335719(0x558),_0x335719(0x531),_0x335719(0x4d7)][_0x335719(0xb5d)](_0x42f28e)){}}_0x842d27[_0x335719(0x3d4)]=undefined;}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x225),_0x3a9fee=>{const _0x16287e=_0x553167;if(!SceneManager[_0x16287e(0x2c2)]())return;VisuMZ[_0x16287e(0x8e2)](_0x3a9fee,_0x3a9fee);const _0x2b5a83=BattleManager[_0x16287e(0x984)];if(!_0x2b5a83)return;if(!_0x2b5a83['item']())return;const _0x369b7b=VisuMZ[_0x16287e(0xb0c)](_0x3a9fee[_0x16287e(0xaf7)]);for(const _0x5ab201 of _0x369b7b){if(!_0x5ab201)continue;_0x5ab201['performAction'](_0x2b5a83);}}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x4f5),_0x524e70=>{const _0x153c74=_0x553167;if(!SceneManager[_0x153c74(0x2c2)]())return;VisuMZ[_0x153c74(0x8e2)](_0x524e70,_0x524e70);const _0x5681ac=VisuMZ['CreateActionSequenceTargets'](_0x524e70['Targets']);for(const _0x133d60 of _0x5681ac){if(!_0x133d60)continue;if(!_0x133d60[_0x153c74(0x8d6)]())continue;_0x133d60[_0x153c74(0x8d6)]()[_0x153c74(0x1e7)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x553167(0x7ad),_0x2d0f1d=>{const _0x3a85be=_0x553167;if(!SceneManager[_0x3a85be(0x2c2)]())return;VisuMZ[_0x3a85be(0x8e2)](_0x2d0f1d,_0x2d0f1d);const _0x5585f2=$gameTemp[_0x3a85be(0x646)](),_0x4b8d59=_0x2d0f1d[_0x3a85be(0x823)]*Sprite_Battler[_0x3a85be(0x914)];_0x5585f2['wait'](_0x4b8d59);}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0xa5b),_0x525dff=>{const _0x25de5d=_0x553167;if(!SceneManager[_0x25de5d(0x2c2)]())return;VisuMZ[_0x25de5d(0x8e2)](_0x525dff,_0x525dff);const _0x5ca606=$gameTemp['getLastPluginCommandInterpreter'](),_0x224a6c=BattleManager[_0x25de5d(0x984)];if(!_0x5ca606||!_0x224a6c)return;if(!_0x224a6c[_0x25de5d(0x58c)]())return;const _0x25bda8=VisuMZ[_0x25de5d(0xb0c)](_0x525dff['Targets']);for(const _0x433f39 of _0x25bda8){if(!_0x433f39)continue;_0x433f39['performActionStart'](_0x224a6c);}if(_0x525dff[_0x25de5d(0x1d0)])_0x5ca606[_0x25de5d(0x759)]('battleMove');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x4f3),_0x46b13e=>{const _0x5bb5ff=_0x553167;if(!SceneManager[_0x5bb5ff(0x2c2)]())return;if(!$gameSystem[_0x5bb5ff(0x196)]())return;VisuMZ[_0x5bb5ff(0x8e2)](_0x46b13e,_0x46b13e);const _0x29dec5=$gameTemp['getLastPluginCommandInterpreter'](),_0x23f302=VisuMZ[_0x5bb5ff(0xb0c)](_0x46b13e[_0x5bb5ff(0xaf7)]),_0x51b134=_0x46b13e[_0x5bb5ff(0x293)],_0x5cf1a0=_0x46b13e[_0x5bb5ff(0xaae)],_0x19c3b2=_0x46b13e[_0x5bb5ff(0x31d)],_0x5294f0=_0x46b13e[_0x5bb5ff(0x412)],_0x4d41fc=_0x46b13e[_0x5bb5ff(0x2d8)],_0x12db3c=_0x46b13e[_0x5bb5ff(0x90d)],_0x4a460b=_0x46b13e[_0x5bb5ff(0x428)],_0x1cce31=_0x46b13e[_0x5bb5ff(0x1d0)];if(!_0x29dec5)return;for(const _0x3c656a of _0x23f302){if(!_0x3c656a)continue;let _0x20b1d1=_0x5cf1a0,_0x17611b=_0x19c3b2;if(_0x51b134[_0x5bb5ff(0x750)](/horz/i))_0x20b1d1*=_0x3c656a[_0x5bb5ff(0x8fb)]()?-0x1:0x1;if(_0x51b134[_0x5bb5ff(0x750)](/vert/i))_0x17611b*=_0x3c656a[_0x5bb5ff(0x8fb)]()?-0x1:0x1;_0x3c656a[_0x5bb5ff(0x631)](_0x20b1d1,_0x17611b,_0x5294f0,_0x4d41fc,_0x12db3c),_0x3c656a['requestMotion'](_0x4a460b);}if(_0x1cce31)_0x29dec5[_0x5bb5ff(0x759)](_0x5bb5ff(0x579));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x298),_0x7fae05=>{const _0x380a41=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x380a41(0x196)]())return;VisuMZ[_0x380a41(0x8e2)](_0x7fae05,_0x7fae05);const _0xa987a5=$gameTemp[_0x380a41(0x646)](),_0x149bb5=VisuMZ[_0x380a41(0xb0c)](_0x7fae05[_0x380a41(0xaf7)]),_0x4469fb=_0x7fae05[_0x380a41(0x4ee)],_0x1b9b2d=_0x7fae05['OffsetX'],_0x195df3=_0x7fae05[_0x380a41(0xb21)],_0x27c6d4=_0x7fae05[_0x380a41(0x412)],_0x575680=_0x7fae05[_0x380a41(0x2d8)],_0x2c1abd=_0x7fae05[_0x380a41(0x90d)],_0x381c49=_0x7fae05['MotionType'],_0x453869=_0x7fae05['WaitForMovement'];if(!_0xa987a5)return;for(const _0x5681da of _0x149bb5){if(!_0x5681da)continue;const _0x2e9541=_0x7fae05['DestinationJS'](_0x5681da)||{'x':0x0,'y':0x0};let _0x4c7bcf=_0x2e9541['x'],_0x5316c5=_0x2e9541['y'];if(_0x4469fb['match'](/none/i))_0x4c7bcf+=_0x1b9b2d,_0x5316c5+=_0x195df3;else{if(_0x4469fb[_0x380a41(0x750)](/horz/i)&&_0x4469fb[_0x380a41(0x750)](/vert/i))_0x4c7bcf+=_0x5681da['isActor']()?-_0x1b9b2d:_0x1b9b2d,_0x5316c5+=_0x5681da['isActor']()?-_0x195df3:_0x195df3;else{if(_0x4469fb[_0x380a41(0x750)](/horz/i))_0x4c7bcf+=_0x5681da[_0x380a41(0x8fb)]()?-_0x1b9b2d:_0x1b9b2d,_0x5316c5+=_0x195df3;else _0x4469fb['match'](/vert/i)&&(_0x4c7bcf+=_0x1b9b2d,_0x5316c5+=_0x5681da[_0x380a41(0x8fb)]()?-_0x195df3:_0x195df3);}}_0x5681da[_0x380a41(0x3d5)](_0x4c7bcf,_0x5316c5,_0x27c6d4,_0x575680,_0x2c1abd,-0x1),_0x5681da[_0x380a41(0x188)](_0x381c49);}if(_0x453869)_0xa987a5['setWaitMode'](_0x380a41(0x579));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0xba4),_0x41473d=>{const _0x466344=_0x553167;if(!SceneManager[_0x466344(0x2c2)]())return;if(!$gameSystem[_0x466344(0x196)]())return;VisuMZ[_0x466344(0x8e2)](_0x41473d,_0x41473d);const _0x3c8258=$gameTemp['getLastPluginCommandInterpreter'](),_0x56bfd7=VisuMZ[_0x466344(0xb0c)](_0x41473d[_0x466344(0xaf7)]),_0x4ab860=_0x41473d[_0x466344(0x334)],_0x103c32=_0x41473d[_0x466344(0x4ee)],_0x1d4083=_0x41473d['OffsetX'],_0x565618=_0x41473d[_0x466344(0xb21)],_0x22d883=_0x41473d[_0x466344(0x412)],_0x1869f9=_0x41473d['FaceDirection'],_0x1233fb=_0x41473d[_0x466344(0x90d)],_0x1aa9e6=_0x41473d[_0x466344(0x428)],_0x2d34d5=_0x41473d['WaitForMovement'];if(!_0x3c8258)return;for(const _0x5023f0 of _0x56bfd7){if(!_0x5023f0)continue;let _0x5cfaba=_0x5023f0[_0x466344(0x8d6)]()[_0x466344(0x649)],_0x5eb57a=_0x5023f0[_0x466344(0x8d6)]()[_0x466344(0x756)];if(_0x4ab860[_0x466344(0x750)](/home/i))_0x5cfaba=_0x5023f0['battler']()[_0x466344(0x173)],_0x5eb57a=_0x5023f0[_0x466344(0x8d6)]()[_0x466344(0x6ea)];else{if(_0x4ab860[_0x466344(0x750)](/center/i))_0x5cfaba=Graphics[_0x466344(0x5f7)]/0x2,_0x5eb57a=Graphics[_0x466344(0xbcf)]/0x2;else _0x4ab860[_0x466344(0x750)](/point (\d+), (\d+)/i)&&(_0x5cfaba=Number(RegExp['$1']),_0x5eb57a=Number(RegExp['$2']));}if(_0x103c32[_0x466344(0x750)](/none/i))_0x5cfaba+=_0x1d4083,_0x5eb57a+=_0x565618;else{if(_0x103c32[_0x466344(0x750)](/horz/i)&&_0x103c32[_0x466344(0x750)](/vert/i))_0x5cfaba+=_0x5023f0[_0x466344(0x8fb)]()?-_0x1d4083:_0x1d4083,_0x5eb57a+=_0x5023f0[_0x466344(0x8fb)]()?-_0x565618:_0x565618;else{if(_0x103c32[_0x466344(0x750)](/horz/i))_0x5cfaba+=_0x5023f0[_0x466344(0x8fb)]()?-_0x1d4083:_0x1d4083,_0x5eb57a+=_0x565618;else _0x103c32[_0x466344(0x750)](/vert/i)&&(_0x5cfaba+=_0x1d4083,_0x5eb57a+=_0x5023f0[_0x466344(0x8fb)]()?-_0x565618:_0x565618);}}_0x5023f0[_0x466344(0x3d5)](_0x5cfaba,_0x5eb57a,_0x22d883,_0x1869f9,_0x1233fb,-0x1),_0x5023f0[_0x466344(0x188)](_0x1aa9e6);}if(_0x2d34d5)_0x3c8258[_0x466344(0x759)](_0x466344(0x579));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x91e),_0x1b73d6=>{const _0x42a50c=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x42a50c(0x196)]())return;VisuMZ[_0x42a50c(0x8e2)](_0x1b73d6,_0x1b73d6);const _0x165375=$gameTemp['getLastPluginCommandInterpreter'](),_0x435ffd=VisuMZ[_0x42a50c(0xb0c)](_0x1b73d6[_0x42a50c(0x66c)]),_0x1910ec=VisuMZ[_0x42a50c(0xb0c)](_0x1b73d6[_0x42a50c(0xbf2)]),_0x7b5dd6=_0x1b73d6[_0x42a50c(0x766)];let _0x779a2f=_0x1b73d6[_0x42a50c(0xa37)];const _0x2c946f=_0x1b73d6['OffsetAdjust'],_0x267f1a=_0x1b73d6[_0x42a50c(0x9d1)],_0x1887b4=_0x1b73d6[_0x42a50c(0xb21)],_0x54e1a9=_0x1b73d6[_0x42a50c(0x412)],_0xde950e=_0x1b73d6['FaceDirection'],_0xc74364=_0x1b73d6['EasingType'],_0x4d6be8=_0x1b73d6[_0x42a50c(0x428)],_0x128b29=_0x1b73d6['WaitForMovement'],_0x406f41=Math[_0x42a50c(0x6b0)](..._0x1910ec['map'](_0x48d60c=>_0x48d60c[_0x42a50c(0x8d6)]()[_0x42a50c(0x649)]-_0x48d60c[_0x42a50c(0x8d6)]()[_0x42a50c(0x1ca)]()/0x2)),_0x950ef6=Math[_0x42a50c(0x4c1)](..._0x1910ec[_0x42a50c(0x5c6)](_0x3ddc69=>_0x3ddc69[_0x42a50c(0x8d6)]()['_baseX']+_0x3ddc69[_0x42a50c(0x8d6)]()[_0x42a50c(0x1ca)]()/0x2)),_0x1a2402=Math[_0x42a50c(0x6b0)](..._0x1910ec[_0x42a50c(0x5c6)](_0x5ebe5e=>_0x5ebe5e[_0x42a50c(0x8d6)]()[_0x42a50c(0x756)]-_0x5ebe5e[_0x42a50c(0x8d6)]()[_0x42a50c(0x9ad)]())),_0x4b8a98=Math['max'](..._0x1910ec['map'](_0x4cd75e=>_0x4cd75e[_0x42a50c(0x8d6)]()['_baseY'])),_0x1c451b=_0x1910ec['filter'](_0x5a1998=>_0x5a1998[_0x42a50c(0x8fb)]())['length'],_0x1dc93b=_0x1910ec[_0x42a50c(0x577)](_0x59162a=>_0x59162a[_0x42a50c(0x602)]())[_0x42a50c(0x635)];let _0x3fcfe7=0x0,_0x468389=0x0;if(_0x7b5dd6[_0x42a50c(0x750)](/front/i))_0x3fcfe7=_0x1c451b>=_0x1dc93b?_0x406f41:_0x950ef6;else{if(_0x7b5dd6[_0x42a50c(0x750)](/middle/i))_0x3fcfe7=(_0x406f41+_0x950ef6)/0x2,_0x779a2f=-0x1;else _0x7b5dd6[_0x42a50c(0x750)](/back/i)&&(_0x3fcfe7=_0x1c451b>=_0x1dc93b?_0x950ef6:_0x406f41);}if(_0x7b5dd6[_0x42a50c(0x750)](/head/i))_0x468389=_0x1a2402;else{if(_0x7b5dd6[_0x42a50c(0x750)](/center/i))_0x468389=(_0x1a2402+_0x4b8a98)/0x2;else _0x7b5dd6['match'](/base/i)&&(_0x468389=_0x4b8a98);}if(!_0x165375)return;for(const _0x596997 of _0x435ffd){if(!_0x596997)continue;let _0x49c22d=_0x3fcfe7,_0x2fb605=_0x468389;if(_0x2c946f['match'](/none/i))_0x49c22d+=_0x267f1a,_0x2fb605+=_0x1887b4;else{if(_0x2c946f['match'](/horz/i)&&_0x2c946f[_0x42a50c(0x750)](/vert/i))_0x49c22d+=_0x596997[_0x42a50c(0x8fb)]()?-_0x267f1a:_0x267f1a,_0x2fb605+=_0x596997[_0x42a50c(0x8fb)]()?-_0x1887b4:_0x1887b4;else{if(_0x2c946f[_0x42a50c(0x750)](/horz/i))_0x49c22d+=_0x596997['isActor']()?-_0x267f1a:_0x267f1a,_0x2fb605+=_0x1887b4;else _0x2c946f['match'](/vert/i)&&(_0x49c22d+=_0x267f1a,_0x2fb605+=_0x596997[_0x42a50c(0x8fb)]()?-_0x1887b4:_0x1887b4);}}_0x596997[_0x42a50c(0x3d5)](_0x49c22d,_0x2fb605,_0x54e1a9,_0xde950e,_0xc74364,_0x779a2f),_0x596997['requestMotion'](_0x4d6be8);}if(_0x128b29)_0x165375[_0x42a50c(0x759)]('battleMove');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x228),_0x3ced6c=>{const _0x257aa5=_0x553167;if(!SceneManager[_0x257aa5(0x2c2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x257aa5(0x8e2)](_0x3ced6c,_0x3ced6c);const _0x50fb2e=VisuMZ['CreateActionSequenceTargets'](_0x3ced6c[_0x257aa5(0xaf7)]);let _0x200fc1=_0x3ced6c['Direction'][_0x257aa5(0x750)](/back/i);for(const _0x3af04f of _0x50fb2e){if(!_0x3af04f)continue;if(_0x3ced6c[_0x257aa5(0x1bc)]['match'](/rand/i))_0x200fc1=Math['randomInt'](0x2);_0x3af04f[_0x257aa5(0x7d7)](!!_0x200fc1);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Movement_FaceJsPoint',_0x5644ae=>{const _0x51d229=_0x553167;if(!SceneManager[_0x51d229(0x2c2)]())return;if(!$gameSystem[_0x51d229(0x196)]())return;VisuMZ[_0x51d229(0x8e2)](_0x5644ae,_0x5644ae);const _0x301af1=VisuMZ[_0x51d229(0xb0c)](_0x5644ae[_0x51d229(0xaf7)]),_0x58fc32=_0x5644ae[_0x51d229(0x8d9)];for(const _0x2412c5 of _0x301af1){if(!_0x2412c5)continue;const _0xab838e=_0x5644ae[_0x51d229(0xa29)](_0x2412c5)||{'x':0x0,'y':0x0};let _0x223489=_0xab838e['x'],_0x179329=_0xab838e['y'];_0x2412c5[_0x51d229(0x9d7)](Math[_0x51d229(0x462)](_0x223489),Math[_0x51d229(0x462)](_0x179329),!!_0x58fc32);}}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Movement_FacePoint',_0x14d531=>{const _0x1020cb=_0x553167;if(!SceneManager[_0x1020cb(0x2c2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1020cb(0x8e2)](_0x14d531,_0x14d531);const _0x302786=VisuMZ[_0x1020cb(0xb0c)](_0x14d531[_0x1020cb(0xaf7)]);let _0x443054=_0x14d531['Point'];const _0x1a7230=_0x14d531[_0x1020cb(0x8d9)];for(const _0x5e69de of _0x302786){if(!_0x5e69de)continue;let _0x4c9248=_0x5e69de[_0x1020cb(0x8d6)]()['_baseX'],_0x2148e8=_0x5e69de[_0x1020cb(0x8d6)]()[_0x1020cb(0x756)];if(_0x443054[_0x1020cb(0x750)](/home/i))_0x4c9248=_0x5e69de['battler']()[_0x1020cb(0x173)],_0x2148e8=_0x5e69de[_0x1020cb(0x8d6)]()['_homeY'];else{if(_0x443054[_0x1020cb(0x750)](/center/i))_0x4c9248=Graphics[_0x1020cb(0x5f7)]/0x2,_0x2148e8=Graphics[_0x1020cb(0xbcf)]/0x2;else _0x443054[_0x1020cb(0x750)](/point (\d+), (\d+)/i)&&(_0x4c9248=Number(RegExp['$1']),_0x2148e8=Number(RegExp['$2']));}_0x5e69de[_0x1020cb(0x9d7)](Math[_0x1020cb(0x462)](_0x4c9248),Math[_0x1020cb(0x462)](_0x2148e8),!!_0x1a7230);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x5f4),_0x1efbab=>{const _0x4696fd=_0x553167;if(!SceneManager[_0x4696fd(0x2c2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x1efbab,_0x1efbab);const _0x3e68f8=VisuMZ['CreateActionSequenceTargets'](_0x1efbab['Targets1']),_0x170a57=VisuMZ[_0x4696fd(0xb0c)](_0x1efbab[_0x4696fd(0xbf2)]),_0x57028c=_0x170a57[_0x4696fd(0x5c6)](_0x252c65=>_0x252c65&&_0x252c65['battler']()?_0x252c65[_0x4696fd(0x8d6)]()[_0x4696fd(0x649)]:0x0)/(_0x170a57[_0x4696fd(0x635)]||0x1),_0x3b18dd=_0x170a57[_0x4696fd(0x5c6)](_0x28a010=>_0x28a010&&_0x28a010[_0x4696fd(0x8d6)]()?_0x28a010[_0x4696fd(0x8d6)]()[_0x4696fd(0x756)]:0x0)/(_0x170a57[_0x4696fd(0x635)]||0x1),_0x884312=_0x1efbab[_0x4696fd(0x8d9)];for(const _0x234690 of _0x3e68f8){if(!_0x234690)continue;_0x234690[_0x4696fd(0x9d7)](Math[_0x4696fd(0x462)](_0x57028c),Math[_0x4696fd(0x462)](_0x3b18dd),!!_0x884312);}}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x6ba),_0x3d4180=>{const _0x5494b3=_0x553167;if(!SceneManager[_0x5494b3(0x2c2)]())return;VisuMZ[_0x5494b3(0x8e2)](_0x3d4180,_0x3d4180);const _0x1d2def=$gameTemp[_0x5494b3(0x646)](),_0x4837f5=VisuMZ['CreateActionSequenceTargets'](_0x3d4180[_0x5494b3(0xaf7)]),_0x3cc602=_0x3d4180['Height'],_0x1049c1=_0x3d4180[_0x5494b3(0x412)],_0x4c7f85=_0x3d4180['EasingType'],_0x4fb0bc=_0x3d4180[_0x5494b3(0xb55)];if(!_0x1d2def)return;for(const _0xf58155 of _0x4837f5){if(!_0xf58155)continue;_0xf58155[_0x5494b3(0x4a4)](_0x3cc602,_0x1049c1,_0x4c7f85);}if(_0x4fb0bc)_0x1d2def[_0x5494b3(0x759)](_0x5494b3(0x420));}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Movement_HomeReset',_0x62bab1=>{const _0x14e035=_0x553167;if(!SceneManager[_0x14e035(0x2c2)]())return;VisuMZ[_0x14e035(0x8e2)](_0x62bab1,_0x62bab1);const _0x220ae9=$gameTemp[_0x14e035(0x646)]();if(!_0x220ae9)return;const _0x32fa64=VisuMZ[_0x14e035(0xb0c)](_0x62bab1['Targets']);for(const _0x7bdc37 of _0x32fa64){if(!_0x7bdc37)continue;_0x7bdc37['performActionEndMembers']();}BattleManager['_subject']&&BattleManager[_0x14e035(0x1ef)][_0x14e035(0x96c)]();if(_0x62bab1['WaitForMovement'])_0x220ae9[_0x14e035(0x759)](_0x14e035(0x579));}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],'ActSeq_Movement_Jump',_0x1d3a09=>{const _0x269759=_0x553167;if(!SceneManager[_0x269759(0x2c2)]())return;VisuMZ['ConvertParams'](_0x1d3a09,_0x1d3a09);const _0x211322=$gameTemp['getLastPluginCommandInterpreter'](),_0x258518=VisuMZ[_0x269759(0xb0c)](_0x1d3a09[_0x269759(0xaf7)]),_0x596322=_0x1d3a09[_0x269759(0x316)],_0x43ff0e=_0x1d3a09[_0x269759(0x412)],_0x48ba7d=_0x1d3a09[_0x269759(0x54f)];if(!_0x211322)return;for(const _0x2a206c of _0x258518){if(!_0x2a206c)continue;_0x2a206c[_0x269759(0x413)](_0x596322,_0x43ff0e);}if(_0x48ba7d)_0x211322[_0x269759(0x759)](_0x269759(0x8c2));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x515),_0x4ffe86=>{const _0x1590f9=_0x553167;if(!SceneManager[_0x1590f9(0x2c2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1590f9(0x8e2)](_0x4ffe86,_0x4ffe86);const _0x3a0506=$gameTemp['getLastPluginCommandInterpreter'](),_0x51e9e3=VisuMZ['CreateActionSequenceTargets'](_0x4ffe86[_0x1590f9(0xaf7)]),_0x21cc5f=_0x4ffe86[_0x1590f9(0x293)],_0x8968cb=_0x4ffe86[_0x1590f9(0xaae)],_0x177640=_0x4ffe86[_0x1590f9(0x31d)],_0x196f5b=_0x4ffe86[_0x1590f9(0x412)],_0x391a5d=_0x4ffe86[_0x1590f9(0x2d8)],_0x63e40e=_0x4ffe86[_0x1590f9(0x90d)],_0x30b7a0=_0x4ffe86[_0x1590f9(0x428)],_0x433cd6=_0x4ffe86[_0x1590f9(0x1d0)];if(!_0x3a0506)return;for(const _0x5cafb5 of _0x51e9e3){if(!_0x5cafb5)continue;let _0x198a02=_0x8968cb,_0x4b0097=_0x177640;if(_0x21cc5f['match'](/horz/i))_0x198a02*=_0x5cafb5[_0x1590f9(0x8fb)]()?-0x1:0x1;if(_0x21cc5f['match'](/vert/i))_0x4b0097*=_0x5cafb5[_0x1590f9(0x8fb)]()?-0x1:0x1;_0x5cafb5['moveBattlerDistance'](_0x198a02,_0x4b0097,_0x196f5b,_0x391a5d,_0x63e40e),_0x5cafb5['requestMotion'](_0x30b7a0);}if(_0x433cd6)_0x3a0506[_0x1590f9(0x759)](_0x1590f9(0x579));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x6fe),_0x274bd5=>{const _0x9a590d=_0x553167;if(!SceneManager[_0x9a590d(0x2c2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x274bd5,_0x274bd5);const _0x3702c2=$gameTemp['getLastPluginCommandInterpreter'](),_0x1e5774=VisuMZ[_0x9a590d(0xb0c)](_0x274bd5[_0x9a590d(0xaf7)]),_0x2b4abd=_0x274bd5[_0x9a590d(0x4ee)],_0x3585dc=_0x274bd5['OffsetX'],_0x1e50ae=_0x274bd5[_0x9a590d(0xb21)],_0x116889=_0x274bd5[_0x9a590d(0x412)],_0x15252e=_0x274bd5[_0x9a590d(0x2d8)],_0x3cced6=_0x274bd5[_0x9a590d(0x90d)],_0x4733df=_0x274bd5[_0x9a590d(0x428)],_0x7993fb=_0x274bd5[_0x9a590d(0x1d0)];if(!_0x3702c2)return;for(const _0x1d3a76 of _0x1e5774){if(!_0x1d3a76)continue;const _0x2103bb=_0x274bd5[_0x9a590d(0x586)](_0x1d3a76)||{'x':0x0,'y':0x0};let _0x3a6e43=_0x2103bb['x'],_0x5d2a87=_0x2103bb['y'];if(_0x2b4abd['match'](/none/i))_0x3a6e43+=_0x3585dc,_0x5d2a87+=_0x1e50ae;else{if(_0x2b4abd[_0x9a590d(0x750)](/horz/i)&&_0x2b4abd[_0x9a590d(0x750)](/vert/i))_0x3a6e43+=_0x1d3a76[_0x9a590d(0x8fb)]()?-_0x3585dc:_0x3585dc,_0x5d2a87+=_0x1d3a76[_0x9a590d(0x8fb)]()?-_0x1e50ae:_0x1e50ae;else{if(_0x2b4abd[_0x9a590d(0x750)](/horz/i))_0x3a6e43+=_0x1d3a76[_0x9a590d(0x8fb)]()?-_0x3585dc:_0x3585dc,_0x5d2a87+=_0x1e50ae;else _0x2b4abd[_0x9a590d(0x750)](/vert/i)&&(_0x3a6e43+=_0x3585dc,_0x5d2a87+=_0x1d3a76['isActor']()?-_0x1e50ae:_0x1e50ae);}}_0x1d3a76[_0x9a590d(0x7a8)](_0x3a6e43,_0x5d2a87,_0x116889,_0x15252e,_0x3cced6,-0x1),_0x1d3a76[_0x9a590d(0x188)](_0x4733df);}if(_0x7993fb)_0x3702c2['setWaitMode'](_0x9a590d(0x579));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x52b),_0x290aae=>{const _0x57c652=_0x553167;if(!SceneManager[_0x57c652(0x2c2)]())return;if(!$gameSystem[_0x57c652(0x196)]())return;VisuMZ[_0x57c652(0x8e2)](_0x290aae,_0x290aae);const _0x3329b2=$gameTemp[_0x57c652(0x646)](),_0x5711af=VisuMZ['CreateActionSequenceTargets'](_0x290aae[_0x57c652(0xaf7)]),_0x23ceaf=_0x290aae[_0x57c652(0x334)],_0x58fffc=_0x290aae['OffsetAdjust'],_0x53c080=_0x290aae['OffsetX'],_0x27656d=_0x290aae[_0x57c652(0xb21)],_0x4cb88b=_0x290aae[_0x57c652(0x412)],_0x2e9900=_0x290aae[_0x57c652(0x2d8)],_0x4098d5=_0x290aae['EasingType'],_0x14cbff=_0x290aae[_0x57c652(0x428)],_0x35228b=_0x290aae[_0x57c652(0x1d0)];if(!_0x3329b2)return;for(const _0x3752ed of _0x5711af){if(!_0x3752ed)continue;let _0x3922a4=_0x3752ed['battler']()[_0x57c652(0x649)],_0x188fb1=_0x3752ed[_0x57c652(0x8d6)]()['_baseY'];if(_0x23ceaf['match'](/home/i))_0x3922a4=_0x3752ed[_0x57c652(0x8d6)]()['_homeX'],_0x188fb1=_0x3752ed[_0x57c652(0x8d6)]()[_0x57c652(0x6ea)];else{if(_0x23ceaf[_0x57c652(0x750)](/center/i))_0x3922a4=Graphics[_0x57c652(0x5f7)]/0x2,_0x188fb1=Graphics['boxHeight']/0x2;else _0x23ceaf[_0x57c652(0x750)](/point (\d+), (\d+)/i)&&(_0x3922a4=Number(RegExp['$1']),_0x188fb1=Number(RegExp['$2']));}if(_0x58fffc[_0x57c652(0x750)](/none/i))_0x3922a4+=_0x53c080,_0x188fb1+=_0x27656d;else{if(_0x58fffc[_0x57c652(0x750)](/horz/i)&&_0x58fffc['match'](/vert/i))_0x3922a4+=_0x3752ed['isActor']()?-_0x53c080:_0x53c080,_0x188fb1+=_0x3752ed['isActor']()?-_0x27656d:_0x27656d;else{if(_0x58fffc[_0x57c652(0x750)](/horz/i))_0x3922a4+=_0x3752ed[_0x57c652(0x8fb)]()?-_0x53c080:_0x53c080,_0x188fb1+=_0x27656d;else _0x58fffc[_0x57c652(0x750)](/vert/i)&&(_0x3922a4+=_0x53c080,_0x188fb1+=_0x3752ed[_0x57c652(0x8fb)]()?-_0x27656d:_0x27656d);}}_0x3752ed[_0x57c652(0x7a8)](_0x3922a4,_0x188fb1,_0x4cb88b,_0x2e9900,_0x4098d5,-0x1),_0x3752ed[_0x57c652(0x188)](_0x14cbff);}if(_0x35228b)_0x3329b2[_0x57c652(0x759)](_0x57c652(0x579));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Movement_MoveToTarget',_0x5fd300=>{const _0x2a890d=_0x553167;if(!SceneManager[_0x2a890d(0x2c2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2a890d(0x8e2)](_0x5fd300,_0x5fd300);const _0x3488f2=$gameTemp['getLastPluginCommandInterpreter'](),_0x1f62e2=VisuMZ[_0x2a890d(0xb0c)](_0x5fd300[_0x2a890d(0x66c)]),_0x32cc55=VisuMZ['CreateActionSequenceTargets'](_0x5fd300[_0x2a890d(0xbf2)]),_0x326f3d=_0x5fd300[_0x2a890d(0x766)];let _0x503201=_0x5fd300[_0x2a890d(0xa37)];const _0x6f8a27=_0x5fd300[_0x2a890d(0x4ee)],_0x35f549=_0x5fd300[_0x2a890d(0x9d1)],_0x2dbd54=_0x5fd300[_0x2a890d(0xb21)],_0x34a99d=_0x5fd300['Duration'],_0x21315d=_0x5fd300[_0x2a890d(0x2d8)],_0x217728=_0x5fd300['EasingType'],_0x2ff65e=_0x5fd300[_0x2a890d(0x428)],_0x256770=_0x5fd300[_0x2a890d(0x1d0)],_0x1acf10=Math['min'](..._0x32cc55[_0x2a890d(0x5c6)](_0x3dbdc7=>_0x3dbdc7[_0x2a890d(0x8d6)]()[_0x2a890d(0x649)]-_0x3dbdc7[_0x2a890d(0x8d6)]()[_0x2a890d(0x1ca)]()/0x2)),_0x1db67=Math['max'](..._0x32cc55['map'](_0x5d2bd9=>_0x5d2bd9[_0x2a890d(0x8d6)]()[_0x2a890d(0x649)]+_0x5d2bd9[_0x2a890d(0x8d6)]()[_0x2a890d(0x1ca)]()/0x2)),_0x2bc8b6=Math['min'](..._0x32cc55[_0x2a890d(0x5c6)](_0x191221=>_0x191221[_0x2a890d(0x8d6)]()[_0x2a890d(0x756)]-_0x191221[_0x2a890d(0x8d6)]()[_0x2a890d(0x9ad)]())),_0x47a339=Math[_0x2a890d(0x4c1)](..._0x32cc55[_0x2a890d(0x5c6)](_0xdc1737=>_0xdc1737[_0x2a890d(0x8d6)]()[_0x2a890d(0x756)])),_0x5b5930=_0x32cc55[_0x2a890d(0x577)](_0x306d2e=>_0x306d2e['isActor']())[_0x2a890d(0x635)],_0x572369=_0x32cc55['filter'](_0x5178d6=>_0x5178d6['isEnemy']())[_0x2a890d(0x635)];let _0x3cc49c=0x0,_0x2ffcf5=0x0;if(_0x326f3d[_0x2a890d(0x750)](/front/i))_0x3cc49c=_0x5b5930>=_0x572369?_0x1acf10:_0x1db67;else{if(_0x326f3d[_0x2a890d(0x750)](/middle/i))_0x3cc49c=(_0x1acf10+_0x1db67)/0x2,_0x503201=-0x1;else _0x326f3d[_0x2a890d(0x750)](/back/i)&&(_0x3cc49c=_0x5b5930>=_0x572369?_0x1db67:_0x1acf10);}if(_0x326f3d[_0x2a890d(0x750)](/head/i))_0x2ffcf5=_0x2bc8b6;else{if(_0x326f3d[_0x2a890d(0x750)](/center/i))_0x2ffcf5=(_0x2bc8b6+_0x47a339)/0x2;else _0x326f3d['match'](/base/i)&&(_0x2ffcf5=_0x47a339);}if(!_0x3488f2)return;for(const _0x41eb13 of _0x1f62e2){if(!_0x41eb13)continue;let _0x401c0e=_0x3cc49c,_0x16834a=_0x2ffcf5;if(_0x6f8a27[_0x2a890d(0x750)](/none/i))_0x401c0e+=_0x35f549,_0x16834a+=_0x2dbd54;else{if(_0x6f8a27['match'](/horz/i)&&_0x6f8a27[_0x2a890d(0x750)](/vert/i))_0x401c0e+=_0x41eb13[_0x2a890d(0x8fb)]()?-_0x35f549:_0x35f549,_0x16834a+=_0x41eb13['isActor']()?-_0x2dbd54:_0x2dbd54;else{if(_0x6f8a27['match'](/horz/i))_0x401c0e+=_0x41eb13[_0x2a890d(0x8fb)]()?-_0x35f549:_0x35f549,_0x16834a+=_0x2dbd54;else _0x6f8a27['match'](/vert/i)&&(_0x401c0e+=_0x35f549,_0x16834a+=_0x41eb13[_0x2a890d(0x8fb)]()?-_0x2dbd54:_0x2dbd54);}}_0x41eb13[_0x2a890d(0x7a8)](_0x401c0e,_0x16834a,_0x34a99d,_0x21315d,_0x217728,_0x503201),_0x41eb13[_0x2a890d(0x188)](_0x2ff65e);}if(_0x256770)_0x3488f2[_0x2a890d(0x759)](_0x2a890d(0x579));}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Movement_Opacity',_0x26eb21=>{const _0x492ebd=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x492ebd(0x8e2)](_0x26eb21,_0x26eb21);const _0x12bc8b=$gameTemp['getLastPluginCommandInterpreter'](),_0x418bdc=VisuMZ['CreateActionSequenceTargets'](_0x26eb21[_0x492ebd(0xaf7)]),_0x1d50c9=_0x26eb21[_0x492ebd(0x630)],_0x3198d6=_0x26eb21[_0x492ebd(0x412)],_0x2a2e96=_0x26eb21[_0x492ebd(0x90d)],_0xd081f3=_0x26eb21['WaitForOpacity'];if(!_0x12bc8b)return;for(const _0x43942f of _0x418bdc){if(!_0x43942f)continue;_0x43942f[_0x492ebd(0x120)](_0x1d50c9,_0x3198d6,_0x2a2e96);}if(_0xd081f3)_0x12bc8b[_0x492ebd(0x759)](_0x492ebd(0xb93));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Movement_Scale',_0xca0a8=>{const _0x2b5df7=_0x553167;if(!SceneManager[_0x2b5df7(0x2c2)]())return;VisuMZ[_0x2b5df7(0x8e2)](_0xca0a8,_0xca0a8);const _0x13440f=$gameTemp[_0x2b5df7(0x646)](),_0x4cf62d=VisuMZ[_0x2b5df7(0xb0c)](_0xca0a8[_0x2b5df7(0xaf7)]),_0x51cc16=_0xca0a8[_0x2b5df7(0x55b)],_0x448777=_0xca0a8[_0x2b5df7(0x354)],_0x2082e2=_0xca0a8[_0x2b5df7(0x412)],_0x1a4212=_0xca0a8['EasingType'],_0x1e064e=_0xca0a8[_0x2b5df7(0x642)];if(!_0x13440f)return;for(const _0x50de61 of _0x4cf62d){if(!_0x50de61)continue;_0x50de61[_0x2b5df7(0x4bf)](_0x51cc16,_0x448777,_0x2082e2,_0x1a4212);}if(_0x1e064e)_0x13440f['setWaitMode'](_0x2b5df7(0x1c2));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x11e),_0x4429a5=>{const _0x17a7f7=_0x553167;if(!SceneManager[_0x17a7f7(0x2c2)]())return;VisuMZ[_0x17a7f7(0x8e2)](_0x4429a5,_0x4429a5);const _0x562aad=$gameTemp['getLastPluginCommandInterpreter'](),_0x55045a=VisuMZ[_0x17a7f7(0xb0c)](_0x4429a5[_0x17a7f7(0xaf7)]),_0xce88e3=_0x4429a5[_0x17a7f7(0x16e)],_0x245504=_0x4429a5[_0x17a7f7(0x5d6)],_0x5986cc=_0x4429a5[_0x17a7f7(0x412)],_0x1b6b0c=_0x4429a5['EasingType'],_0x404c80=_0x4429a5[_0x17a7f7(0xb69)];if(!_0x562aad)return;for(const _0x1fb1db of _0x55045a){if(!_0x1fb1db)continue;_0x1fb1db['skewBattler'](_0xce88e3,_0x245504,_0x5986cc,_0x1b6b0c);}if(_0x404c80)_0x562aad['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Movement_Spin',_0x10ae26=>{const _0x2ec0b5=_0x553167;if(!SceneManager[_0x2ec0b5(0x2c2)]())return;VisuMZ[_0x2ec0b5(0x8e2)](_0x10ae26,_0x10ae26);const _0x19190f=$gameTemp[_0x2ec0b5(0x646)](),_0x5505d1=VisuMZ['CreateActionSequenceTargets'](_0x10ae26[_0x2ec0b5(0xaf7)]),_0x39b5f2=_0x10ae26[_0x2ec0b5(0x6eb)],_0x2294e5=_0x10ae26[_0x2ec0b5(0x412)],_0x4ddb5a=_0x10ae26[_0x2ec0b5(0x90d)],_0x352d3c=_0x10ae26[_0x2ec0b5(0x28e)],_0x113818=_0x10ae26['WaitForSpin'];if(!_0x19190f)return;for(const _0x2a5585 of _0x5505d1){if(!_0x2a5585)continue;_0x2a5585['spinBattler'](_0x39b5f2,_0x2294e5,_0x4ddb5a,_0x352d3c);}if(_0x113818)_0x19190f[_0x2ec0b5(0x759)]('battleSpin');}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x223),_0x23a88d=>{const _0x1a57d8=_0x553167;if(!SceneManager[_0x1a57d8(0x2c2)]())return;const _0x351453=$gameTemp[_0x1a57d8(0x646)]();if(!_0x351453)return;_0x351453[_0x1a57d8(0x759)](_0x1a57d8(0x420));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x8da),_0x41d1e1=>{const _0x1bee42=_0x553167;if(!SceneManager[_0x1bee42(0x2c2)]())return;const _0x44a376=$gameTemp[_0x1bee42(0x646)]();if(!_0x44a376)return;_0x44a376[_0x1bee42(0x759)](_0x1bee42(0x8c2));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x727),_0x360206=>{const _0x4048ba=_0x553167;if(!SceneManager['isSceneBattle']())return;const _0x4cc0a4=$gameTemp[_0x4048ba(0x646)]();if(!_0x4cc0a4)return;_0x4cc0a4[_0x4048ba(0x759)](_0x4048ba(0x579));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Movement_WaitForOpacity',_0x368e09=>{const _0x30e901=_0x553167;if(!SceneManager[_0x30e901(0x2c2)]())return;const _0x4dbfe1=$gameTemp[_0x30e901(0x646)]();if(!_0x4dbfe1)return;_0x4dbfe1['setWaitMode']('battleOpacity');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Movement_WaitForScale',_0x702136=>{const _0x349d7d=_0x553167;if(!SceneManager[_0x349d7d(0x2c2)]())return;const _0x239902=$gameTemp[_0x349d7d(0x646)]();if(!_0x239902)return;_0x239902[_0x349d7d(0x759)](_0x349d7d(0x1c2));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x776),_0x5d6e05=>{const _0x486763=_0x553167;if(!SceneManager[_0x486763(0x2c2)]())return;const _0x485f9d=$gameTemp[_0x486763(0x646)]();if(!_0x485f9d)return;_0x485f9d[_0x486763(0x759)](_0x486763(0x266));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x2aa),_0x976c5b=>{const _0x3090ad=_0x553167;if(!SceneManager[_0x3090ad(0x2c2)]())return;const _0x3abaf3=$gameTemp[_0x3090ad(0x646)]();if(!_0x3abaf3)return;_0x3abaf3[_0x3090ad(0x759)]('battleSpin');}),VisuMZ[_0x553167(0x841)][_0x553167(0x23b)]=function(){const _0x1fb3a1=_0x553167;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;if(VisuMZ[_0x1fb3a1(0x66b)][_0x1fb3a1(0x932)]<1.08){let _0x42a640='';_0x42a640+=_0x1fb3a1(0x89a),_0x42a640+=_0x1fb3a1(0x3da),alert(_0x42a640),SceneManager[_0x1fb3a1(0x19c)]();}},PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0xbab),_0x499333=>{const _0x56d148=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x56d148(0x244)])return;VisuMZ[_0x56d148(0x8e2)](_0x499333,_0x499333),VisuMZ[_0x56d148(0x841)][_0x56d148(0x23b)]();const _0x147b07=$gameTemp[_0x56d148(0x646)](),_0xbf0418=_0x499333[_0x56d148(0x43a)];if(!_0x147b07)return;const _0x2f6d6d=BattleManager[_0x56d148(0x306)];if(!_0x2f6d6d)return;_0x2f6d6d['createActionSequenceProjectile'](_0x499333);if(_0xbf0418)_0x147b07[_0x56d148(0x759)](_0x56d148(0x287));}),PluginManager[_0x553167(0x822)](pluginData['name'],'ActSeq_Projectile_Icon',_0x8e4417=>{const _0x3ec94f=_0x553167;if(!SceneManager[_0x3ec94f(0x2c2)]())return;if(!Imported[_0x3ec94f(0x244)])return;VisuMZ[_0x3ec94f(0x8e2)](_0x8e4417,_0x8e4417),VisuMZ[_0x3ec94f(0x841)][_0x3ec94f(0x23b)]();const _0x1be3ba=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ee9ac=_0x8e4417[_0x3ec94f(0x43a)];if(!_0x1be3ba)return;const _0x27e846=BattleManager[_0x3ec94f(0x306)];if(!_0x27e846)return;_0x27e846[_0x3ec94f(0x4a3)](_0x8e4417);if(_0x3ee9ac)_0x1be3ba[_0x3ec94f(0x759)](_0x3ec94f(0x287));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x189),_0x3cc7c4=>{const _0x32f67f=_0x553167;if(!SceneManager[_0x32f67f(0x2c2)]())return;if(!Imported[_0x32f67f(0x244)])return;VisuMZ[_0x32f67f(0x8e2)](_0x3cc7c4,_0x3cc7c4),VisuMZ[_0x32f67f(0x841)][_0x32f67f(0x23b)]();const _0x5c1eec=$gameTemp[_0x32f67f(0x646)](),_0xf39609=_0x3cc7c4[_0x32f67f(0x43a)];if(!_0x5c1eec)return;const _0x6a9a97=BattleManager['_spriteset'];if(!_0x6a9a97)return;_0x6a9a97[_0x32f67f(0x4a3)](_0x3cc7c4);if(_0xf39609)_0x5c1eec['setWaitMode'](_0x32f67f(0x287));}),PluginManager[_0x553167(0x822)](pluginData['name'],_0x553167(0x71f),_0x5cce19=>{const _0x4c4e1a=_0x553167;if(!SceneManager[_0x4c4e1a(0x2c2)]())return;if(!Imported[_0x4c4e1a(0x1cf)])return;VisuMZ[_0x4c4e1a(0x8e2)](_0x5cce19,_0x5cce19);const _0x4a640a=$gameTemp[_0x4c4e1a(0x646)](),_0x26554d=_0x5cce19[_0x4c4e1a(0xb69)];if(!_0x4a640a)return;$gameScreen[_0x4c4e1a(0x663)](_0x5cce19[_0x4c4e1a(0x16e)],_0x5cce19[_0x4c4e1a(0x5d6)],_0x5cce19[_0x4c4e1a(0x412)],_0x5cce19[_0x4c4e1a(0x90d)]);if(_0x26554d)_0x4a640a[_0x4c4e1a(0x759)](_0x4c4e1a(0x12c));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x20b),_0x36fd68=>{const _0x2bdcaa=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2bdcaa(0x8e2)](_0x36fd68,_0x36fd68);const _0xc20a77=$gameTemp[_0x2bdcaa(0x646)](),_0x5012ea=_0x36fd68[_0x2bdcaa(0xb69)];if(!_0xc20a77)return;$gameScreen[_0x2bdcaa(0x663)](0x0,0x0,_0x36fd68[_0x2bdcaa(0x412)],_0x36fd68['EasingType']);if(_0x5012ea)_0xc20a77[_0x2bdcaa(0x759)](_0x2bdcaa(0x12c));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x94b),_0x225018=>{const _0x2cb37d=_0x553167;if(!SceneManager[_0x2cb37d(0x2c2)]())return;if(!Imported[_0x2cb37d(0x1cf)])return;const _0x4ef2df=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4ef2df)return;_0x4ef2df[_0x2cb37d(0x759)](_0x2cb37d(0x12c));}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Target_CurrentIndex',_0xe6fbc0=>{const _0x18ac82=_0x553167;if(!SceneManager[_0x18ac82(0x2c2)]())return;VisuMZ[_0x18ac82(0x8e2)](_0xe6fbc0,_0xe6fbc0);const _0x4a142a=$gameTemp[_0x18ac82(0x646)](),_0x443dd3=_0xe6fbc0[_0x18ac82(0x257)],_0x3e4718=_0xe6fbc0['JumpToLabel'];if(!_0x4a142a)return;BattleManager[_0x18ac82(0x848)]=_0x443dd3,BattleManager[_0x18ac82(0x8f3)]=BattleManager[_0x18ac82(0x159)]?BattleManager['_allTargets'][BattleManager[_0x18ac82(0x848)]]||null:null,BattleManager[_0x18ac82(0x8f3)]&&_0x3e4718[_0x18ac82(0x512)]()[_0x18ac82(0x976)]()!==_0x18ac82(0x857)&&_0x4a142a[_0x18ac82(0x86c)]([_0x3e4718]);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x562),_0x2f5eea=>{const _0x644499=_0x553167;if(!SceneManager[_0x644499(0x2c2)]())return;VisuMZ[_0x644499(0x8e2)](_0x2f5eea,_0x2f5eea);const _0x279bea=$gameTemp[_0x644499(0x646)](),_0x22bbc9=_0x2f5eea[_0x644499(0xb96)];if(!_0x279bea)return;BattleManager['_targetIndex']++,BattleManager[_0x644499(0x8f3)]=BattleManager[_0x644499(0x159)][BattleManager[_0x644499(0x848)]]||null,BattleManager[_0x644499(0x8f3)]&&_0x22bbc9['toUpperCase']()[_0x644499(0x976)]()!==_0x644499(0x857)&&_0x279bea[_0x644499(0x86c)]([_0x22bbc9]);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x36d),_0x4426f1=>{const _0x3a5a5a=_0x553167;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3a5a5a(0x8e2)](_0x4426f1,_0x4426f1);const _0x3b0df6=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bc9ab=_0x4426f1[_0x3a5a5a(0xb96)];if(!_0x3b0df6)return;BattleManager['_targetIndex']--,BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0x3a5a5a(0x848)]]||null,BattleManager[_0x3a5a5a(0x8f3)]&&_0x3bc9ab[_0x3a5a5a(0x512)]()[_0x3a5a5a(0x976)]()!==_0x3a5a5a(0x857)&&_0x3b0df6[_0x3a5a5a(0x86c)]([_0x3bc9ab]);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Target_RandTarget',_0x110ebc=>{const _0x456fc3=_0x553167;if(!SceneManager[_0x456fc3(0x2c2)]())return;VisuMZ['ConvertParams'](_0x110ebc,_0x110ebc);const _0x4925f1=$gameTemp['getLastPluginCommandInterpreter'](),_0x536100=_0x110ebc[_0x456fc3(0x858)],_0x59eeaf=_0x110ebc[_0x456fc3(0xb96)];if(!_0x4925f1)return;const _0x5a7c80=BattleManager[_0x456fc3(0x848)];for(;;){BattleManager[_0x456fc3(0x848)]=Math[_0x456fc3(0x852)](BattleManager[_0x456fc3(0x159)][_0x456fc3(0x635)]);if(!_0x536100)break;if(BattleManager['_targetIndex']!==_0x5a7c80)break;if(BattleManager[_0x456fc3(0x159)][_0x456fc3(0x635)]<=0x1){BattleManager[_0x456fc3(0x848)]=0x0;break;}}BattleManager[_0x456fc3(0x8f3)]=BattleManager[_0x456fc3(0x159)][BattleManager[_0x456fc3(0x848)]]||null,BattleManager[_0x456fc3(0x8f3)]&&_0x59eeaf[_0x456fc3(0x512)]()['trim']()!==_0x456fc3(0x857)&&_0x4925f1[_0x456fc3(0x86c)]([_0x59eeaf]);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_BattleVoice_PlayCommonLine',_0x302ed7=>{const _0x740b60=_0x553167;if(!SceneManager[_0x740b60(0x2c2)]())return;if(!Imported[_0x740b60(0x71b)])return;if(!ConfigManager[_0x740b60(0x344)])return;VisuMZ[_0x740b60(0x8e2)](_0x302ed7,_0x302ed7);const _0x4d853b=VisuMZ[_0x740b60(0xb0c)](_0x302ed7[_0x740b60(0xaf7)]);let _0x283814=_0x302ed7[_0x740b60(0x879)]||'';for(const _0x1ff15e of _0x4d853b){if(!_0x1ff15e)continue;_0x1ff15e[_0x740b60(0xa66)](_0x283814);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_BattleVoice_PlaySpecialLine',_0x45af2b=>{const _0x1c9c46=_0x553167;if(!SceneManager[_0x1c9c46(0x2c2)]())return;if(!Imported[_0x1c9c46(0x71b)])return;if(!ConfigManager[_0x1c9c46(0x344)])return;VisuMZ[_0x1c9c46(0x8e2)](_0x45af2b,_0x45af2b);const _0x1de29d=VisuMZ[_0x1c9c46(0xb0c)](_0x45af2b['Targets']);let _0x246c31=(_0x45af2b['VoiceLineType']||'')+(_0x45af2b[_0x1c9c46(0x2de)]||'');for(const _0x278aee of _0x1de29d){if(!_0x278aee)continue;_0x278aee['playBattleVoice'](_0x246c31);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Weapon_ClearActiveWeapon',_0x2832d1=>{const _0x44eb20=_0x553167;if(!SceneManager[_0x44eb20(0x2c2)]())return;VisuMZ[_0x44eb20(0x8e2)](_0x2832d1,_0x2832d1);const _0x2f73d2=VisuMZ[_0x44eb20(0xb0c)](_0x2832d1['Targets']);for(const _0xab71b4 of _0x2f73d2){if(!_0xab71b4)continue;if(!_0xab71b4['isActor']())continue;_0xab71b4[_0x44eb20(0x887)]();}}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x819),_0x141e3d=>{const _0x347164=_0x553167;if(!SceneManager[_0x347164(0x2c2)]())return;VisuMZ[_0x347164(0x8e2)](_0x141e3d,_0x141e3d);const _0x14322d=$gameTemp[_0x347164(0x646)]();let _0x10a913=![];const _0xf54bec=_0x141e3d[_0x347164(0xb96)],_0x412e1b=VisuMZ['CreateActionSequenceTargets'](_0x141e3d[_0x347164(0xaf7)]);for(const _0x3ad889 of _0x412e1b){if(!_0x3ad889)continue;if(!_0x3ad889[_0x347164(0x8fb)]())continue;_0x3ad889[_0x347164(0x5ba)](),_0x3ad889[_0x347164(0x5d2)]()[_0x347164(0x635)]>0x0?_0x10a913=!![]:_0x3ad889[_0x347164(0x887)]();}_0x10a913&&_0xf54bec[_0x347164(0x512)]()['trim']()!==_0x347164(0x857)&&_0x14322d[_0x347164(0x86c)]([_0xf54bec]);}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x979),_0x337536=>{const _0x1d6a30=_0x553167;if(!SceneManager[_0x1d6a30(0x2c2)]())return;VisuMZ[_0x1d6a30(0x8e2)](_0x337536,_0x337536);let _0x2a1a37=_0x337536['SlotID'];_0x2a1a37--,_0x2a1a37=Math['max'](_0x2a1a37,0x0);const _0x16afd6=VisuMZ[_0x1d6a30(0xb0c)](_0x337536[_0x1d6a30(0xaf7)]);for(const _0x1a34c1 of _0x16afd6){if(!_0x1a34c1)continue;if(!_0x1a34c1[_0x1d6a30(0x8fb)]())continue;_0x1a34c1[_0x1d6a30(0x409)](_0x2a1a37);}}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],_0x553167(0x104),_0x28fc5b=>{const _0x403f21=_0x553167;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x403f21(0x1cf)])return;VisuMZ[_0x403f21(0x8e2)](_0x28fc5b,_0x28fc5b);const _0x5b1446=$gameTemp[_0x403f21(0x646)](),_0x685e74=_0x28fc5b[_0x403f21(0x25d)];if(!_0x5b1446)return;$gameScreen['setBattleZoom'](_0x28fc5b[_0x403f21(0x151)],_0x28fc5b[_0x403f21(0x412)],_0x28fc5b['EasingType']);if(_0x685e74)_0x5b1446[_0x403f21(0x759)]('battleZoom');}),PluginManager[_0x553167(0x822)](pluginData[_0x553167(0xc04)],'ActSeq_Zoom_Reset',_0xe53f85=>{const _0x580ab2=_0x553167;if(!SceneManager[_0x580ab2(0x2c2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x580ab2(0x8e2)](_0xe53f85,_0xe53f85);const _0x329598=$gameTemp[_0x580ab2(0x646)](),_0x394579=_0xe53f85[_0x580ab2(0x25d)];if(!_0x329598)return;$gameScreen[_0x580ab2(0x141)](0x1,_0xe53f85[_0x580ab2(0x412)],_0xe53f85[_0x580ab2(0x90d)]);if(_0x394579)_0x329598[_0x580ab2(0x759)]('battleZoom');}),PluginManager['registerCommand'](pluginData[_0x553167(0xc04)],_0x553167(0x483),_0x5f5bea=>{const _0xf8172c=_0x553167;if(!SceneManager[_0xf8172c(0x2c2)]())return;if(!Imported[_0xf8172c(0x1cf)])return;const _0x54f7b9=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x54f7b9)return;_0x54f7b9[_0xf8172c(0x759)](_0xf8172c(0x186));}),VisuMZ[_0x553167(0x841)][_0x553167(0x8f4)]=Scene_Boot[_0x553167(0x22b)]['onDatabaseLoaded'],Scene_Boot[_0x553167(0x22b)][_0x553167(0x34b)]=function(){const _0x481a43=_0x553167;this[_0x481a43(0x4b1)](),this[_0x481a43(0xb7d)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ['BattleCore'][_0x481a43(0x8f4)]['call'](this),this[_0x481a43(0xb0d)](),this[_0x481a43(0xbfb)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot[_0x553167(0x22b)][_0x553167(0xb0d)]=function(){const _0x203e2c=_0x553167;if(VisuMZ[_0x203e2c(0x891)])return;this[_0x203e2c(0xb87)](),this[_0x203e2c(0x744)](),this[_0x203e2c(0x3e3)]();},Scene_Boot[_0x553167(0x22b)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x33e9c5=_0x553167,_0x1325e9=$dataSystem[_0x33e9c5(0x209)]['length'];for(let _0x152fa6=0x0;_0x152fa6<_0x1325e9;_0x152fa6++){const _0x3ec7af=$dataSystem[_0x33e9c5(0x800)][_0x152fa6];if(_0x3ec7af)continue;$dataSystem[_0x33e9c5(0x800)][_0x152fa6]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x553167(0x22b)][_0x553167(0xb7d)]=function(){const _0x50e65b=_0x553167,_0x4aa050=VisuMZ[_0x50e65b(0x841)][_0x50e65b(0x309)];_0x4aa050[_0x50e65b(0x2e0)][_0x50e65b(0x80c)]===undefined&&(_0x4aa050[_0x50e65b(0x2e0)][_0x50e65b(0x80c)]=_0x50e65b(0x4c6)),_0x4aa050['Actor'][_0x50e65b(0x29c)]===undefined&&(_0x4aa050[_0x50e65b(0x5d0)][_0x50e65b(0x29c)]=![]),_0x4aa050[_0x50e65b(0x194)]['SmoothImage']===undefined&&(_0x4aa050[_0x50e65b(0x194)][_0x50e65b(0x29c)]=!![]),_0x4aa050[_0x50e65b(0x5d0)][_0x50e65b(0x1c1)]===undefined&&(_0x4aa050['Actor'][_0x50e65b(0x1c1)]=![]),_0x4aa050[_0x50e65b(0x5d0)][_0x50e65b(0x166)]===undefined&&(_0x4aa050['Actor']['PrioritySortActors']=!![]);},VisuMZ[_0x553167(0x9ef)]={},Scene_Boot[_0x553167(0x22b)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x5c363f=_0x553167;for(const _0xaa2d84 of VisuMZ[_0x5c363f(0x841)][_0x5c363f(0x309)][_0x5c363f(0x2e0)][_0x5c363f(0x3ac)]){if(!_0xaa2d84)continue;const _0x9d835d=_0xaa2d84[_0x5c363f(0x806)][_0x5c363f(0x512)]()[_0x5c363f(0x976)]();VisuMZ[_0x5c363f(0x9ef)][_0x9d835d]=_0xaa2d84;}},VisuMZ[_0x553167(0x841)][_0x553167(0xace)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x553167(0x22b)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x458c63=_0x553167,_0x1a7d83=VisuMZ['BattleCore']['RegExp'],_0x302267=_0x458c63(0x606),_0x55f508=[[_0x458c63(0xb79),_0x458c63(0x3b6)],[_0x458c63(0x689),_0x458c63(0xa63)]],_0x38e560=[[_0x458c63(0x32c),'JS\x20%1APPLY\x20%2'],[_0x458c63(0x73c),_0x458c63(0x939)]],_0x200853=[['',''],['AsUser','AS\x20USER'],[_0x458c63(0x4ad),_0x458c63(0x79f)]];for(const _0xabbb74 of _0x38e560){for(const _0x1e56ba of _0x200853){for(const _0x4331f7 of _0x55f508){const _0x295884=_0xabbb74[0x0]['format'](_0x4331f7[0x0],_0x1e56ba[0x0]),_0x134153=_0xabbb74[0x1][_0x458c63(0x47d)](_0x4331f7[0x1],_0x1e56ba[0x1])['trim'](),_0x1c1a85=new RegExp(_0x302267[_0x458c63(0x47d)](_0x134153),'i');_0x1a7d83[_0x295884]=_0x1c1a85;}}}const _0xee5b23=[['%1StartActionJS',_0x458c63(0x795)],[_0x458c63(0x765),_0x458c63(0xbd2)]];for(const _0x2a7cf6 of _0xee5b23){for(const _0x155367 of _0x55f508){const _0x4dc25a=_0x2a7cf6[0x0]['format'](_0x155367[0x0]),_0x5d0a51=_0x2a7cf6[0x1][_0x458c63(0x47d)](_0x155367[0x1]),_0x5bf853=new RegExp(_0x302267['format'](_0x5d0a51),'i');_0x1a7d83[_0x4dc25a]=_0x5bf853;}}const _0x506e99=[[_0x458c63(0x5b4),'JS\x20%1START\x20BATTLE'],[_0x458c63(0x82c),_0x458c63(0x814)],[_0x458c63(0x4b3),_0x458c63(0x289)],[_0x458c63(0x7e0),_0x458c63(0x919)],[_0x458c63(0x8ae),_0x458c63(0x76e)],['EscapeFailureJS',_0x458c63(0x833)],['%1StartTurnJS','JS\x20%1START\x20TURN'],[_0x458c63(0x851),_0x458c63(0x6db)],[_0x458c63(0x455),'JS\x20%1REGENERATE']];for(const _0x2927e8 of _0x506e99){for(const _0x54ae0c of _0x55f508){const _0x263bd6=_0x2927e8[0x0][_0x458c63(0x47d)](_0x54ae0c[0x0]),_0x1e775a=_0x2927e8[0x1][_0x458c63(0x47d)](_0x54ae0c[0x1]),_0x1baa75=new RegExp(_0x302267['format'](_0x1e775a),'i');_0x1a7d83[_0x263bd6]=_0x1baa75;}}},Scene_Boot[_0x553167(0x22b)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x194b9a=_0x553167,_0x7abf48=$dataSkills['concat']($dataItems);for(const _0xe9ae76 of _0x7abf48){if(!_0xe9ae76)continue;VisuMZ[_0x194b9a(0x841)][_0x194b9a(0xa83)](_0xe9ae76);}},Scene_Boot['prototype'][_0x553167(0x744)]=function(){const _0x541011=_0x553167,_0x5790fc=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x34f017 of _0x5790fc){if(!_0x34f017)continue;VisuMZ[_0x541011(0x841)][_0x541011(0xb30)](_0x34f017),$dataStates[_0x541011(0x613)]!==undefined&&VisuMZ[_0x541011(0x841)][_0x541011(0x6bb)](_0x34f017);}},Scene_Boot[_0x553167(0x22b)][_0x553167(0xbfb)]=function(){const _0x90d459=_0x553167,_0x3641f1=VisuMZ['BattleCore'][_0x90d459(0x309)]['Mechanics'][_0x90d459(0xb36)],_0x4e4968=[];for(const _0x15bcec of _0x3641f1){const _0x179f94=$dataTroops[_0x15bcec];if(_0x179f94)_0x4e4968[_0x90d459(0x9d2)](JsonEx[_0x90d459(0x323)](_0x179f94));}for(const _0xe80d1d of $dataTroops){if(!_0xe80d1d)continue;for(const _0x1fc0f3 of _0x4e4968){if(_0x1fc0f3['id']===_0xe80d1d['id'])continue;_0xe80d1d[_0x90d459(0x701)]=_0xe80d1d['pages'][_0x90d459(0xa3b)](_0x1fc0f3['pages']);}}},Scene_Boot[_0x553167(0x22b)][_0x553167(0x6ae)]=function(){const _0x18fce4=_0x553167,_0x58f921=VisuMZ[_0x18fce4(0x841)][_0x18fce4(0x309)][_0x18fce4(0x5d5)];if(_0x58f921[_0x18fce4(0x14c)]>0x0&&$dataCommonEvents[_0x58f921[_0x18fce4(0x14c)]]){const _0x40d8e5=$dataCommonEvents[_0x58f921[_0x18fce4(0x14c)]],_0x14a3ac=_0x40d8e5[_0x18fce4(0x5d3)][_0x18fce4(0x635)]-0x2,_0x5c5dcd=_0x40d8e5[_0x18fce4(0x5d3)][_0x14a3ac];if(_0x5c5dcd&&_0x5c5dcd[_0x18fce4(0x148)]!==0xe6){const _0x4cb067={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5a3b00=_0x40d8e5[_0x18fce4(0x5d3)][_0x18fce4(0xa87)]();_0x40d8e5[_0x18fce4(0x5d3)][_0x18fce4(0x275)](_0x4cb067),_0x40d8e5[_0x18fce4(0x5d3)]['unshift'](_0x5a3b00);}}},Scene_Boot[_0x553167(0x22b)][_0x553167(0xb12)]=function(){const _0x1f325e=_0x553167;VisuMZ[_0x1f325e(0x841)]['CreateCommonEventKeys'](),VisuMZ[_0x1f325e(0x841)][_0x1f325e(0x387)]($dataSkills),VisuMZ[_0x1f325e(0x841)][_0x1f325e(0x387)]($dataItems);},VisuMZ['BattleCore'][_0x553167(0xc03)]=function(){const _0x17ee53=_0x553167;VisuMZ[_0x17ee53(0x841)]['_commonEventKey']={};for(const _0x1f4cfe of $dataCommonEvents){if(!_0x1f4cfe)continue;if(_0x1f4cfe[_0x17ee53(0xc04)][_0x17ee53(0x750)](/\[(.*)\]/i)){let _0x14ff6d=String(RegExp['$1'])[_0x17ee53(0xa4a)](/,/g,'')[_0x17ee53(0x512)]()[_0x17ee53(0x976)]();VisuMZ[_0x17ee53(0x841)][_0x17ee53(0x884)][_0x14ff6d]=_0x1f4cfe['id'];}}},VisuMZ[_0x553167(0x841)][_0x553167(0x387)]=function(_0x569103){const _0xd8fbad=_0x553167;for(const _0x4b139a of _0x569103){if(!_0x4b139a)continue;VisuMZ[_0xd8fbad(0x841)][_0xd8fbad(0x9b1)](_0x4b139a);}},VisuMZ['BattleCore'][_0x553167(0x9b1)]=function(_0x5d5073){const _0x273ac0=_0x553167;if(!_0x5d5073)return;if(!_0x5d5073[_0x273ac0(0x5ed)])return;VisuMZ[_0x273ac0(0x841)][_0x273ac0(0x884)]=VisuMZ[_0x273ac0(0x841)][_0x273ac0(0x884)]||{};const _0x2e5fd4=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x1a37a0=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x1491cd=[];const _0x17b535=_0x5d5073[_0x273ac0(0x645)]['match'](_0x2e5fd4);if(_0x17b535){for(const _0x6765d8 of _0x17b535){_0x6765d8[_0x273ac0(0x750)](_0x2e5fd4);const _0x3e07d2=String(RegExp['$1'])[_0x273ac0(0x23f)](',')[_0x273ac0(0x5c6)](_0x25bd72=>String(_0x25bd72)['toUpperCase']()[_0x273ac0(0x976)]());_0x1491cd=_0x1491cd[_0x273ac0(0xa3b)](_0x3e07d2);}!_0x5d5073['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5d5073['note']+=_0x273ac0(0x535));;}if(_0x5d5073[_0x273ac0(0x645)][_0x273ac0(0x750)](_0x1a37a0)){const _0x4a7469=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x273ac0(0x5c6)](_0x551c21=>String(_0x551c21)[_0x273ac0(0x512)]()[_0x273ac0(0x976)]());_0x1491cd=_0x1491cd[_0x273ac0(0xa3b)](_0x4a7469);!_0x5d5073[_0x273ac0(0x645)][_0x273ac0(0x750)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5d5073[_0x273ac0(0x645)]+=_0x273ac0(0x535));;}for(const _0x4d168f of _0x1491cd){if(VisuMZ[_0x273ac0(0x841)][_0x273ac0(0x884)][_0x4d168f]){const _0x1213e5=VisuMZ[_0x273ac0(0x841)][_0x273ac0(0x884)][_0x4d168f],_0x3b8ef9={'code':0x2c,'dataId':_0x1213e5,'value1':0x1,'value2':0x0};_0x5d5073['effects'][_0x273ac0(0x9d2)](_0x3b8ef9);}}},Scene_Boot[_0x553167(0x22b)][_0x553167(0x3e3)]=function(){const _0x404ce1=_0x553167,_0x1333cf=$dataSkills[_0x404ce1(0xa3b)]($dataItems);for(const _0x338b67 of _0x1333cf){if(!_0x338b67)continue;VisuMZ[_0x404ce1(0x841)][_0x404ce1(0x3bf)](_0x338b67);}},VisuMZ[_0x553167(0x841)][_0x553167(0x1c7)]=VisuMZ[_0x553167(0x1c7)],VisuMZ['ParseActorNotetags']=function(_0x186171){const _0x26d8ab=_0x553167;VisuMZ['BattleCore'][_0x26d8ab(0x1c7)]&&VisuMZ[_0x26d8ab(0x841)][_0x26d8ab(0x1c7)][_0x26d8ab(0x7f7)](this,_0x186171),VisuMZ[_0x26d8ab(0x841)][_0x26d8ab(0xb30)](_0x186171);},VisuMZ['BattleCore'][_0x553167(0x95a)]=VisuMZ[_0x553167(0x95a)],VisuMZ['ParseClassNotetags']=function(_0x57a6c0){const _0x299b30=_0x553167;VisuMZ['BattleCore'][_0x299b30(0x95a)]&&VisuMZ[_0x299b30(0x841)]['ParseClassNotetags'][_0x299b30(0x7f7)](this,_0x57a6c0),VisuMZ[_0x299b30(0x841)][_0x299b30(0xb30)](_0x57a6c0);},VisuMZ[_0x553167(0x841)][_0x553167(0xbae)]=VisuMZ[_0x553167(0xbae)],VisuMZ[_0x553167(0xbae)]=function(_0x2a04f9){const _0x38b85b=_0x553167;VisuMZ[_0x38b85b(0x841)][_0x38b85b(0xbae)]&&VisuMZ['BattleCore']['ParseSkillNotetags']['call'](this,_0x2a04f9),VisuMZ[_0x38b85b(0x841)][_0x38b85b(0xa83)](_0x2a04f9),VisuMZ[_0x38b85b(0x841)][_0x38b85b(0x3bf)](_0x2a04f9);},VisuMZ['BattleCore'][_0x553167(0x729)]=VisuMZ['ParseItemNotetags'],VisuMZ[_0x553167(0x729)]=function(_0x84a577){const _0x58a56a=_0x553167;VisuMZ['BattleCore']['ParseItemNotetags']&&VisuMZ[_0x58a56a(0x841)][_0x58a56a(0x729)][_0x58a56a(0x7f7)](this,_0x84a577),VisuMZ[_0x58a56a(0x841)][_0x58a56a(0xa83)](_0x84a577),VisuMZ[_0x58a56a(0x841)]['Parse_Notetags_Targets'](_0x84a577);},VisuMZ[_0x553167(0x841)][_0x553167(0x1df)]=VisuMZ[_0x553167(0x1df)],VisuMZ['ParseWeaponNotetags']=function(_0xc5318a){const _0x1b59c8=_0x553167;VisuMZ[_0x1b59c8(0x841)][_0x1b59c8(0x1df)]&&VisuMZ[_0x1b59c8(0x841)][_0x1b59c8(0x1df)][_0x1b59c8(0x7f7)](this,_0xc5318a),VisuMZ[_0x1b59c8(0x841)][_0x1b59c8(0xb30)](_0xc5318a);},VisuMZ[_0x553167(0x841)][_0x553167(0xb29)]=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x553167(0xb29)]=function(_0x2d1943){const _0x2f76d9=_0x553167;VisuMZ[_0x2f76d9(0x841)]['ParseArmorNotetags']&&VisuMZ[_0x2f76d9(0x841)][_0x2f76d9(0xb29)][_0x2f76d9(0x7f7)](this,_0x2d1943),VisuMZ['BattleCore'][_0x2f76d9(0xb30)](_0x2d1943);},VisuMZ[_0x553167(0x841)]['ParseEnemyNotetags']=VisuMZ[_0x553167(0x9cf)],VisuMZ[_0x553167(0x9cf)]=function(_0x742ca7){const _0xebac28=_0x553167;VisuMZ[_0xebac28(0x841)][_0xebac28(0x9cf)]&&VisuMZ['BattleCore'][_0xebac28(0x9cf)]['call'](this,_0x742ca7),VisuMZ['BattleCore'][_0xebac28(0xb30)](_0x742ca7);},VisuMZ['BattleCore'][_0x553167(0x912)]=VisuMZ[_0x553167(0x912)],VisuMZ[_0x553167(0x912)]=function(_0x3e092a){const _0x21470e=_0x553167;VisuMZ[_0x21470e(0x841)][_0x21470e(0x912)]&&VisuMZ['BattleCore'][_0x21470e(0x912)][_0x21470e(0x7f7)](this,_0x3e092a),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x3e092a),VisuMZ[_0x21470e(0x841)][_0x21470e(0x6bb)](_0x3e092a);},VisuMZ[_0x553167(0x841)][_0x553167(0xa83)]=function(_0x3a18a5){const _0x5a1ee1=_0x553167,_0x1155e1=[_0x5a1ee1(0x770),_0x5a1ee1(0xb66),'PreDamageJS','PostDamageJS',_0x5a1ee1(0x832),_0x5a1ee1(0x78b),_0x5a1ee1(0x495),_0x5a1ee1(0xb3d)];for(const _0x3abe13 of _0x1155e1){VisuMZ[_0x5a1ee1(0x841)]['createJS'](_0x3a18a5,_0x3abe13);}const _0x1c906f=_0x3a18a5[_0x5a1ee1(0x645)];_0x1c906f[_0x5a1ee1(0x750)](/<ALWAYS CRITICAL/i)&&(_0x3a18a5[_0x5a1ee1(0x2c7)][_0x5a1ee1(0x3b3)]=!![]),_0x1c906f[_0x5a1ee1(0x750)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x3a18a5['repeats']=Math['max'](0x1,Number(RegExp['$1']))),_0x1c906f[_0x5a1ee1(0x750)](/<TARGET:[ ](.*)>/i)&&(_0x3a18a5[_0x5a1ee1(0x5ea)]=String(RegExp['$1'])[_0x5a1ee1(0x512)]()[_0x5a1ee1(0x976)]());},VisuMZ[_0x553167(0x841)][_0x553167(0xb30)]=function(_0x48bc4a){const _0x3ce274=_0x553167,_0x599a59=[_0x3ce274(0x21a),_0x3ce274(0x55d),'PreDamageAsUserJS',_0x3ce274(0x459),'PreApplyAsTargetJS',_0x3ce274(0x854),_0x3ce274(0x965),_0x3ce274(0xbb2),_0x3ce274(0x832),_0x3ce274(0x78b),_0x3ce274(0x495),_0x3ce274(0xb3d),'PreStartBattleJS',_0x3ce274(0x219),'PreEndBattleJS','PostEndBattleJS',_0x3ce274(0x4b3),'BattleDefeatJS',_0x3ce274(0x8ae),_0x3ce274(0x34a),_0x3ce274(0xba8),_0x3ce274(0x9f4),_0x3ce274(0x571),_0x3ce274(0x8af),_0x3ce274(0x1f8),'PostRegenerateJS'];for(const _0x3d98aa of _0x599a59){VisuMZ[_0x3ce274(0x841)]['createJS'](_0x48bc4a,_0x3d98aa);}const _0x2ac91a=[_0x3ce274(0x988),_0x3ce274(0x47f),_0x3ce274(0x61e),_0x3ce274(0x869),_0x3ce274(0x62b)];for(const _0x417a4f of _0x2ac91a){VisuMZ[_0x3ce274(0x841)][_0x3ce274(0x212)](_0x48bc4a,_0x417a4f);}},VisuMZ[_0x553167(0x841)][_0x553167(0x3bf)]=function(_0x37379d){const _0x3b986d=_0x553167,_0x2f7897=_0x37379d['note'];if(_0x2f7897['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0xc9071a=String(RegExp['$1']),_0x163815=VisuMZ[_0x3b986d(0x841)][_0x3b986d(0x8f7)](_0x37379d,_0x3b986d(0xaf7));VisuMZ[_0x3b986d(0x841)][_0x3b986d(0x2f4)](_0xc9071a,_0x163815);}if(_0x2f7897[_0x3b986d(0x750)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4369d5=String(RegExp['$1']),_0x35f4eb=VisuMZ[_0x3b986d(0x841)][_0x3b986d(0x8f7)](_0x37379d,_0x3b986d(0xb62));VisuMZ[_0x3b986d(0x841)]['createCommandVisibleJS'](_0x4369d5,_0x35f4eb);}},VisuMZ[_0x553167(0x841)]['JS']={},VisuMZ[_0x553167(0x841)]['createJS']=function(_0x498691,_0x545241){const _0x4aac10=_0x553167,_0x3da13f=_0x498691[_0x4aac10(0x645)];if(_0x3da13f[_0x4aac10(0x750)](VisuMZ[_0x4aac10(0x841)][_0x4aac10(0xace)][_0x545241])){const _0x3814ec=RegExp['$1'],_0x3d8f87=_0x4aac10(0x736)['format'](_0x3814ec),_0x2e3722=VisuMZ['BattleCore'][_0x4aac10(0x8f7)](_0x498691,_0x545241);VisuMZ[_0x4aac10(0x841)]['JS'][_0x2e3722]=new Function(_0x3d8f87);}},VisuMZ[_0x553167(0x841)][_0x553167(0x8f7)]=function(_0x454dce,_0x109046){const _0x3b9115=_0x553167;if(VisuMZ[_0x3b9115(0x8f7)])return VisuMZ[_0x3b9115(0x8f7)](_0x454dce,_0x109046);let _0x416c3b='';if($dataActors['includes'](_0x454dce))_0x416c3b=_0x3b9115(0x391)[_0x3b9115(0x47d)](_0x454dce['id'],_0x109046);if($dataClasses['includes'](_0x454dce))_0x416c3b=_0x3b9115(0xac0)[_0x3b9115(0x47d)](_0x454dce['id'],_0x109046);if($dataSkills[_0x3b9115(0xb5d)](_0x454dce))_0x416c3b='Skill-%1-%2'['format'](_0x454dce['id'],_0x109046);if($dataItems[_0x3b9115(0xb5d)](_0x454dce))_0x416c3b=_0x3b9115(0x4dc)[_0x3b9115(0x47d)](_0x454dce['id'],_0x109046);if($dataWeapons['includes'](_0x454dce))_0x416c3b=_0x3b9115(0x63d)[_0x3b9115(0x47d)](_0x454dce['id'],_0x109046);if($dataArmors['includes'](_0x454dce))_0x416c3b='Armor-%1-%2'[_0x3b9115(0x47d)](_0x454dce['id'],_0x109046);if($dataEnemies[_0x3b9115(0xb5d)](_0x454dce))_0x416c3b=_0x3b9115(0x83b)[_0x3b9115(0x47d)](_0x454dce['id'],_0x109046);if($dataStates[_0x3b9115(0xb5d)](_0x454dce))_0x416c3b=_0x3b9115(0x478)[_0x3b9115(0x47d)](_0x454dce['id'],_0x109046);return _0x416c3b;},VisuMZ['BattleCore'][_0x553167(0x2f4)]=function(_0x221455,_0x1a02cf){const _0x564e9a=_0x553167,_0x2b64af=_0x564e9a(0x9db)[_0x564e9a(0x47d)](_0x221455);VisuMZ[_0x564e9a(0x841)]['JS'][_0x1a02cf]=new Function(_0x2b64af);},VisuMZ[_0x553167(0x841)][_0x553167(0x1aa)]=function(_0x3b12ff,_0x22c92c){const _0x34d3cb=_0x553167,_0x3b9669=_0x34d3cb(0x180)[_0x34d3cb(0x47d)](_0x3b12ff);VisuMZ[_0x34d3cb(0x841)]['JS'][_0x22c92c]=new Function(_0x3b9669);},VisuMZ['BattleCore'][_0x553167(0x212)]=function(_0x2c51b2,_0x18cf2b){const _0x4c904b=_0x553167,_0x1e24af=_0x2c51b2[_0x4c904b(0x645)];if(_0x1e24af[_0x4c904b(0x750)](VisuMZ['BattleCore'][_0x4c904b(0xace)][_0x18cf2b])){const _0x152920=RegExp['$1'],_0x349999=_0x4c904b(0x5fc)[_0x4c904b(0x47d)](_0x152920),_0x28d71d=VisuMZ[_0x4c904b(0x841)][_0x4c904b(0x8f7)](_0x2c51b2,_0x18cf2b);VisuMZ[_0x4c904b(0x841)]['JS'][_0x28d71d]=new Function(_0x349999);}},VisuMZ[_0x553167(0x841)][_0x553167(0x6bb)]=function(_0x146382){const _0x419135=_0x553167;_0x146382['description']='-';const _0x57a225=_0x146382[_0x419135(0x645)];_0x57a225['match'](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x146382[_0x419135(0x33b)]=String(RegExp['$1'])[_0x419135(0x976)]()),_0x57a225[_0x419135(0x750)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING)>/i)&&(_0x146382['excludeListing']=!![]);},TextManager[_0x553167(0x998)]=VisuMZ[_0x553167(0x841)]['Settings']['PartyCmd'][_0x553167(0x4fd)],TextManager[_0x553167(0xa27)]=VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x898)][_0x553167(0x27a)],TextManager[_0x553167(0xb44)]=VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x898)][_0x553167(0x41b)],TextManager['visualHpGauge']=VisuMZ[_0x553167(0x841)]['Settings']['HpGauge']['Name'],ColorManager[_0x553167(0x30b)]=function(_0x31ee38){const _0x339ef4=_0x553167;return _0x31ee38=String(_0x31ee38),_0x31ee38[_0x339ef4(0x750)](/#(.*)/i)?_0x339ef4(0x3ad)[_0x339ef4(0x47d)](String(RegExp['$1'])):this[_0x339ef4(0x3be)](Number(_0x31ee38));},DataManager[_0x553167(0x7ca)]=function(_0xf466a){const _0x369b09=_0x553167;if(_0xf466a[_0x369b09(0x645)][_0x369b09(0x750)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1cf751=String(RegExp['$1'])[_0x369b09(0x512)]()['trim']();if(_0x1cf751===_0x369b09(0x11f))return _0x369b09(0x11f);if(VisuMZ[_0x369b09(0x9ef)][_0x1cf751])return _0x1cf751;}const _0x3754c4=VisuMZ['BattleCore'][_0x369b09(0x309)][_0x369b09(0x2e0)][_0x369b09(0x697)][_0x369b09(0x512)]()['trim']();if(VisuMZ[_0x369b09(0x9ef)][_0x3754c4])return _0x3754c4;return _0x369b09(0x11f);},DataManager[_0x553167(0x958)]=function(_0x2759bf){const _0x1dfdc7=_0x553167;_0x2759bf=_0x2759bf[_0x1dfdc7(0x512)]()[_0x1dfdc7(0x976)](),this['_stypeIDs']=this[_0x1dfdc7(0x44e)]||{};if(this['_stypeIDs'][_0x2759bf])return this[_0x1dfdc7(0x44e)][_0x2759bf];for(let _0x367e15=0x1;_0x367e15<0x64;_0x367e15++){if(!$dataSystem[_0x1dfdc7(0xbca)][_0x367e15])continue;let _0x199e4c=$dataSystem[_0x1dfdc7(0xbca)][_0x367e15][_0x1dfdc7(0x512)]()[_0x1dfdc7(0x976)]();_0x199e4c=_0x199e4c[_0x1dfdc7(0xa4a)](/\x1I\[(\d+)\]/gi,''),_0x199e4c=_0x199e4c['replace'](/\\I\[(\d+)\]/gi,''),this[_0x1dfdc7(0x44e)][_0x199e4c]=_0x367e15;}return this['_stypeIDs'][_0x2759bf]||0x0;},DataManager[_0x553167(0x474)]=function(_0xbbb06f){const _0x2ce2f=_0x553167;_0xbbb06f=_0xbbb06f[_0x2ce2f(0x512)]()[_0x2ce2f(0x976)](),this[_0x2ce2f(0x521)]=this['_skillIDs']||{};if(this['_skillIDs'][_0xbbb06f])return this[_0x2ce2f(0x521)][_0xbbb06f];for(const _0x3525ef of $dataSkills){if(!_0x3525ef)continue;this[_0x2ce2f(0x521)][_0x3525ef[_0x2ce2f(0xc04)][_0x2ce2f(0x512)]()[_0x2ce2f(0x976)]()]=_0x3525ef['id'];}return this[_0x2ce2f(0x521)][_0xbbb06f]||0x0;},DataManager[_0x553167(0x3ee)]=function(_0x2769f1){const _0x2d0deb=_0x553167;_0x2769f1=_0x2769f1[_0x2d0deb(0x512)]()[_0x2d0deb(0x976)](),this[_0x2d0deb(0x699)]=this[_0x2d0deb(0x699)]||{};if(this[_0x2d0deb(0x699)][_0x2769f1])return this[_0x2d0deb(0x699)][_0x2769f1];for(const _0x3a57c9 of $dataEnemies){if(!_0x3a57c9)continue;this[_0x2d0deb(0x699)][_0x3a57c9[_0x2d0deb(0xc04)][_0x2d0deb(0x512)]()[_0x2d0deb(0x976)]()]=_0x3a57c9['id'];}return this[_0x2d0deb(0x699)][_0x2769f1]||0x0;},DataManager['getWtypeIdWithName']=function(_0x190ea5){const _0xc226=_0x553167;_0x190ea5=_0x190ea5[_0xc226(0x512)]()['trim'](),this['_wtypeIDs']=this[_0xc226(0x51f)]||{};if(this[_0xc226(0x51f)][_0x190ea5])return this[_0xc226(0x51f)][_0x190ea5];for(let _0x56b318=0x1;_0x56b318<0x64;_0x56b318++){if(!$dataSystem[_0xc226(0x209)][_0x56b318])continue;let _0x1cfeff=$dataSystem['weaponTypes'][_0x56b318][_0xc226(0x512)]()[_0xc226(0x976)]();_0x1cfeff=_0x1cfeff[_0xc226(0xa4a)](/\x1I\[(\d+)\]/gi,''),_0x1cfeff=_0x1cfeff[_0xc226(0xa4a)](/\\I\[(\d+)\]/gi,''),this[_0xc226(0x51f)][_0x1cfeff]=_0x56b318;}return this[_0xc226(0x51f)]['BARE\x20HANDS']=0x0,this[_0xc226(0x51f)][_0x190ea5]||0x0;},DataManager[_0x553167(0x4e4)]=function(_0x3419ea){const _0x38f47f=_0x553167,_0x482492=_0x38f47f(0x236);let _0x5d211f=_0x3419ea[_0x38f47f(0xbde)],_0x5d4fdf=_0x3419ea[_0x38f47f(0xc04)];const _0x3d72ea=_0x3419ea[_0x38f47f(0x645)];return _0x3d72ea['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x5d211f=Number(RegExp['$1'])),_0x3d72ea['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x5d4fdf=String(RegExp['$1'])),_0x482492[_0x38f47f(0x47d)](_0x5d211f,_0x5d4fdf);},DataManager[_0x553167(0x565)]=function(_0x32a07d){const _0x56bfad=_0x553167;return _0x32a07d[_0x56bfad(0x645)][_0x56bfad(0x750)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x32a07d[_0x56bfad(0xc04)];},DataManager[_0x553167(0xae4)]=function(_0x585da0){const _0x660337=_0x553167;return _0x585da0[_0x660337(0x645)][_0x660337(0x750)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x585da0[_0x660337(0xbde)];},DataManager['swapEnemyIDs']=function(_0x214b14){const _0x211e6f=_0x553167,_0x57c194=$dataEnemies[_0x214b14];if(_0x57c194){if(_0x57c194[_0x211e6f(0x645)][_0x211e6f(0x750)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1ef672=String(RegExp['$1'])[_0x211e6f(0x23f)](/[\r\n]+/)['remove'](''),_0x2314ca=this[_0x211e6f(0xaaf)](_0x1ef672);_0x214b14=this['getEnemyIdWithName'](_0x2314ca)||_0x214b14,_0x214b14=DataManager[_0x211e6f(0xabd)](_0x214b14);}}return _0x214b14;},DataManager[_0x553167(0xaaf)]=function(_0x2822dd){const _0x5a2385=_0x553167;let _0x47620a=0x0;const _0x3aa088={};for(const _0x302963 of _0x2822dd){if(_0x302963['match'](/(.*):[ ](\d+)/i)){const _0x352b76=String(RegExp['$1'])[_0x5a2385(0x976)](),_0x37e178=Number(RegExp['$2']);_0x3aa088[_0x352b76]=_0x37e178,_0x47620a+=_0x37e178;}else{if(_0x302963[_0x5a2385(0x750)](/(.*):[ ](\d+\.?\d+)/i)){const _0x30d538=String(RegExp['$1'])[_0x5a2385(0x976)](),_0x145d89=Number(RegExp['$2']);_0x3aa088[_0x30d538]=_0x145d89,_0x47620a+=_0x145d89;}else _0x302963!==''&&(_0x3aa088[_0x302963]=0x1,_0x47620a++);}}if(_0x47620a<=0x0)return'';let _0x59b760=Math[_0x5a2385(0x3e5)]()*_0x47620a;for(const _0x3a335e in _0x3aa088){_0x59b760-=_0x3aa088[_0x3a335e];if(_0x59b760<=0x0)return _0x3a335e;}return'';},DataManager[_0x553167(0xbfc)]=function(_0x1aa07f){const _0x281b22=_0x553167;if(!_0x1aa07f)return![];if(!VisuMZ[_0x281b22(0x841)][_0x281b22(0x309)][_0x281b22(0x740)][_0x281b22(0x8b3)])return![];if(_0x1aa07f[_0x281b22(0x645)][_0x281b22(0x750)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1aa07f[_0x281b22(0x645)][_0x281b22(0x750)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x504f24 of _0x1aa07f[_0x281b22(0x5ed)]){if(!_0x504f24)continue;if(_0x504f24[_0x281b22(0x148)]===Game_Action[_0x281b22(0x5a7)])return!![];}return![];},DataManager['createTroopNote']=function(_0x5826cf){const _0x30ae86=_0x553167,_0xdc6d9=$dataTroops[_0x5826cf];if(!_0xdc6d9)return'';let _0x1aac86='';_0x1aac86+=_0xdc6d9[_0x30ae86(0xc04)];for(const _0x12fc5b of _0xdc6d9[_0x30ae86(0x701)]){for(const _0x5a30f5 of _0x12fc5b['list']){[0x6c,0x198][_0x30ae86(0xb5d)](_0x5a30f5[_0x30ae86(0x148)])&&(_0x1aac86+='\x0a',_0x1aac86+=_0x5a30f5[_0x30ae86(0x2a1)][0x0]);}}return _0x1aac86;},ConfigManager[_0x553167(0x991)]=ConfigManager[_0x553167(0x991)]??![],ConfigManager[_0x553167(0x2b3)]=ConfigManager[_0x553167(0x2b3)]??![],ConfigManager[_0x553167(0x953)]=ConfigManager[_0x553167(0x953)]??!![],VisuMZ[_0x553167(0x841)]['ConfigManager_makeData']=ConfigManager[_0x553167(0x3d6)],ConfigManager['makeData']=function(){const _0x134696=_0x553167,_0xaff77f=VisuMZ[_0x134696(0x841)][_0x134696(0x11a)][_0x134696(0x7f7)](this);return _0xaff77f[_0x134696(0x991)]=this[_0x134696(0x991)],_0xaff77f[_0x134696(0x2b3)]=this['autoBattleUseSkills'],_0xaff77f[_0x134696(0x953)]=this[_0x134696(0x953)],_0xaff77f;},VisuMZ[_0x553167(0x841)][_0x553167(0xb48)]=ConfigManager[_0x553167(0x8c1)],ConfigManager[_0x553167(0x8c1)]=function(_0x5d6b39){const _0x8e5025=_0x553167;VisuMZ[_0x8e5025(0x841)][_0x8e5025(0xb48)][_0x8e5025(0x7f7)](this,_0x5d6b39),_0x8e5025(0x991)in _0x5d6b39?this[_0x8e5025(0x991)]=_0x5d6b39[_0x8e5025(0x991)]:this[_0x8e5025(0x991)]=![],'autoBattleUseSkills'in _0x5d6b39?this['autoBattleUseSkills']=_0x5d6b39[_0x8e5025(0x2b3)]:this[_0x8e5025(0x2b3)]=![],'visualHpGauge'in _0x5d6b39?this['visualHpGauge']=_0x5d6b39['visualHpGauge']:this[_0x8e5025(0x953)]=!![];},ImageManager[_0x553167(0x94c)]=ImageManager[_0x553167(0x94c)]||0x9,ImageManager['svActorVertCells']=ImageManager['svActorVertCells']||0x6,VisuMZ[_0x553167(0x841)][_0x553167(0x85a)]=BattleManager[_0x553167(0x303)],BattleManager[_0x553167(0x303)]=function(_0x19645f,_0x572f3d,_0x5cca46){const _0x1791ca=_0x553167;VisuMZ['BattleCore'][_0x1791ca(0x85a)][_0x1791ca(0x7f7)](this,_0x19645f,_0x572f3d,_0x5cca46),this[_0x1791ca(0x3e2)]={};},VisuMZ[_0x553167(0x841)]['BattleManager_initMembers']=BattleManager[_0x553167(0x23a)],BattleManager['initMembers']=function(){const _0xb6205a=_0x553167;VisuMZ[_0xb6205a(0x841)][_0xb6205a(0x692)][_0xb6205a(0x7f7)](this),this[_0xb6205a(0xbe4)]=[];},BattleManager[_0x553167(0x375)]=function(){const _0x2c22b9=_0x553167;if(!SceneManager[_0x2c22b9(0x2c2)]())return;const _0x4ed432=SceneManager[_0x2c22b9(0xa7f)][_0x2c22b9(0xa6f)];if(_0x4ed432)_0x4ed432[_0x2c22b9(0x195)]();},BattleManager['battleSys']=function(){const _0x5e67b7=_0x553167;if(BattleManager[_0x5e67b7(0x981)]())return _0x5e67b7(0x7c0);return'DTB';},BattleManager['isBattleSys']=function(_0x133fc3){const _0x500f7d=_0x553167;return _0x133fc3=_0x133fc3[_0x500f7d(0x512)]()[_0x500f7d(0x976)](),this[_0x500f7d(0x2da)]()===_0x133fc3;},BattleManager[_0x553167(0xadd)]=function(){const _0x206845=_0x553167;return this[_0x206845(0x6b6)]('DTB');},BattleManager[_0x553167(0x3b5)]=function(){const _0x29f34e=_0x553167;return this[_0x29f34e(0xadd)]();},BattleManager[_0x553167(0x7d9)]=function(){return!this['isTurnBased']();},BattleManager['isTeamBased']=function(){const _0x226b0d=_0x553167;return!this[_0x226b0d(0x3b5)]()&&!this['isTickBased']();},BattleManager[_0x553167(0x8dd)]=function(_0x14b339){const _0x270360=_0x553167;this[_0x270360(0x3e2)]=this[_0x270360(0x3e2)]||{};if(this[_0x270360(0x3e2)][_0x14b339]!==undefined)return this[_0x270360(0x3e2)][_0x14b339];this['_battlerKeyCache'][_0x14b339]=null;const _0x44df09=this[_0x270360(0x88d)](),_0x363654=_0x44df09['find'](_0x5dc0fd=>_0x5dc0fd[_0x270360(0x829)]()===_0x14b339);if(_0x363654)this['_battlerKeyCache'][_0x14b339]=_0x363654;return this[_0x270360(0x3e2)][_0x14b339];},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x829)]=function(){const _0x14958d=_0x553167;return _0x14958d(0x584)[_0x14958d(0x47d)](this['isActor']()?_0x14958d(0xaa9):'enemy',this['name']()+'-'+(this[_0x14958d(0x8fb)]()?this[_0x14958d(0x537)]():this[_0x14958d(0x8ab)]()));},Game_Action[_0x553167(0x22b)][_0x553167(0xa13)]=function(_0x180d25){const _0x455d28=_0x553167;if(this[_0x455d28(0x343)]!=='')return;typeof _0x180d25==='string'?this['_targetBattlerKey']=_0x180d25[_0x455d28(0xb3c)]()['trim']():this[_0x455d28(0x343)]=_0x180d25['battlerKey']();},Game_Action['prototype'][_0x553167(0x7e3)]=function(){const _0x2be3ab=_0x553167;return[this[_0x2be3ab(0x18c)]()];},Game_Action['prototype'][_0x553167(0x18c)]=function(){const _0x4a23fb=_0x553167,_0x3d131e=this['_targetBattlerKey']||'',_0xd8f8a6=BattleManager[_0x4a23fb(0x8dd)](_0x3d131e);if(!_0xd8f8a6)return this[_0x4a23fb(0x35b)]();if(!_0xd8f8a6['isAlive']())return this[_0x4a23fb(0x35b)]();return _0xd8f8a6;},Game_Action[_0x553167(0x22b)][_0x553167(0x35b)]=function(){const _0x3ea4c2=_0x553167,_0x55462e=this[_0x3ea4c2(0x343)];return _0x55462e[_0x3ea4c2(0x750)](/ACTOR/i)?this[_0x3ea4c2(0xa3e)]()[_0x3ea4c2(0x25f)]():this[_0x3ea4c2(0x8d1)]()['trueRandomTarget']();},BattleManager[_0x553167(0x279)]=function(){const _0x324f9c=_0x553167;return this[_0x324f9c(0x88d)]()[_0x324f9c(0x577)](_0x288e7d=>_0x288e7d[_0x324f9c(0xb1c)]());},BattleManager[_0x553167(0xab8)]=function(_0xdfb59e){const _0x1b502b=_0x553167;_0xdfb59e===_0x1b502b(0x4b3)&&(this['_endingBattle']=!![]),$gameParty[_0x1b502b(0xab8)](_0xdfb59e),$gameTroop[_0x1b502b(0xab8)](_0xdfb59e);},VisuMZ[_0x553167(0x841)][_0x553167(0x385)]=BattleManager[_0x553167(0x3f2)],BattleManager[_0x553167(0x3f2)]=function(){const _0x2e6c3c=_0x553167;this['_endBattle']=![],this['_autoBattle']=ConfigManager[_0x2e6c3c(0x991)],this[_0x2e6c3c(0x300)]=![],this['processBattleCoreJS'](_0x2e6c3c(0x6ee)),VisuMZ[_0x2e6c3c(0x841)][_0x2e6c3c(0x385)][_0x2e6c3c(0x7f7)](this),this[_0x2e6c3c(0xab8)](_0x2e6c3c(0x219));},BattleManager[_0x553167(0xa24)]=function(_0x5b220b){const _0x325210=_0x553167,_0x7c29d3=VisuMZ[_0x325210(0x841)][_0x325210(0x309)][_0x325210(0x5d5)];_0x5b220b!==_0x325210(0x449)&&_0x7c29d3[_0x325210(0x438)]&&VisuMZ['BattleCore'][_0x325210(0x400)](_0x7c29d3['BattleEndEvent'])&&$gameTemp[_0x325210(0xbef)](_0x7c29d3[_0x325210(0x438)]);const _0x5c868a=_0x325210(0x5b5)['format'](_0x5b220b);_0x7c29d3[_0x5c868a]&&VisuMZ[_0x325210(0x841)][_0x325210(0x400)](_0x7c29d3[_0x5c868a])&&$gameTemp['reserveCommonEvent'](_0x7c29d3[_0x5c868a]);},VisuMZ[_0x553167(0x841)]['BattleManager_abort']=BattleManager[_0x553167(0x273)],BattleManager[_0x553167(0x273)]=function(){const _0x73f670=_0x553167;VisuMZ[_0x73f670(0x841)][_0x73f670(0x1fa)][_0x73f670(0x7f7)](this),SceneManager[_0x73f670(0x2c2)]()&&BattleManager[_0x73f670(0x10b)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x46d)]=BattleManager[_0x553167(0xadf)],BattleManager['checkBattleEnd']=function(){const _0xa2c72=_0x553167;if(this['_phase']===_0xa2c72(0x8cb)){if($gameTemp[_0xa2c72(0xb0e)]())return![];}return VisuMZ[_0xa2c72(0x841)][_0xa2c72(0x46d)][_0xa2c72(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0xb08)]=BattleManager[_0x553167(0x5cc)],BattleManager[_0x553167(0x5cc)]=function(){const _0x2580b5=_0x553167;this[_0x2580b5(0x300)]=!![],this[_0x2580b5(0xab8)]('BattleVictoryJS'),VisuMZ[_0x2580b5(0x841)]['BattleManager_processVictory']['call'](this),this[_0x2580b5(0xa24)]('Victory');},VisuMZ['BattleCore']['BattleManager_processAbort']=BattleManager[_0x553167(0x39e)],BattleManager[_0x553167(0x39e)]=function(){const _0x49cb05=_0x553167;this['_endingBattle']=!![],VisuMZ[_0x49cb05(0x841)][_0x49cb05(0x28c)][_0x49cb05(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x51a)]=BattleManager[_0x553167(0x1c0)],BattleManager[_0x553167(0x1c0)]=function(){const _0x4114f3=_0x553167;this[_0x4114f3(0x300)]=!![],this[_0x4114f3(0xab8)]('BattleDefeatJS'),VisuMZ[_0x4114f3(0x841)][_0x4114f3(0x51a)][_0x4114f3(0x7f7)](this),this[_0x4114f3(0xa24)]('Defeat');},VisuMZ['BattleCore'][_0x553167(0x545)]=BattleManager[_0x553167(0xb5c)],BattleManager[_0x553167(0xb5c)]=function(_0x292741){const _0x48c5d4=_0x553167;this['_endBattle']=!![],this[_0x48c5d4(0x7c7)]=![],this[_0x48c5d4(0xab8)](_0x48c5d4(0xa22)),VisuMZ[_0x48c5d4(0x841)][_0x48c5d4(0x545)]['call'](this,_0x292741),this[_0x48c5d4(0xab8)](_0x48c5d4(0x330));},VisuMZ['BattleCore'][_0x553167(0xa4c)]=BattleManager['startTurn'],BattleManager[_0x553167(0x4d4)]=function(){const _0x3feba7=_0x553167;if(this[_0x3feba7(0x3b5)]())this[_0x3feba7(0xab8)](_0x3feba7(0xba8));VisuMZ[_0x3feba7(0x841)][_0x3feba7(0xa4c)][_0x3feba7(0x7f7)](this);if(this['isTurnBased']())this['processBattleCoreJS'](_0x3feba7(0x9f4));},BattleManager[_0x553167(0x757)]=function(){const _0x396346=_0x553167,_0x5e5850=this[_0x396346(0x1ef)],_0x174ef2=_0x5e5850['currentAction']();_0x174ef2?(_0x174ef2[_0x396346(0x217)](),_0x174ef2[_0x396346(0x1cb)]()?(this[_0x396346(0x1e6)](),_0x5e5850[_0x396346(0x6ac)]()):(_0x5e5850[_0x396346(0x6ac)](),this[_0x396346(0x1bf)]())):(this[_0x396346(0x1bf)](),this[_0x396346(0x1ef)]=null);},VisuMZ[_0x553167(0x841)][_0x553167(0x7c4)]=BattleManager[_0x553167(0x1e6)],BattleManager[_0x553167(0x1e6)]=function(){const _0x13a16b=_0x553167,_0x5cafde=this[_0x13a16b(0x1ef)][_0x13a16b(0xa59)](),_0x2a0fd1=this[_0x13a16b(0x1ef)];_0x5cafde&&_0x5cafde[_0x13a16b(0x133)]()===_0x2a0fd1&&_0x5cafde[_0x13a16b(0x985)](_0x13a16b(0x832)),VisuMZ[_0x13a16b(0x841)][_0x13a16b(0x7c4)]['call'](this),_0x5cafde&&_0x5cafde[_0x13a16b(0x133)]()===_0x2a0fd1&&_0x5cafde[_0x13a16b(0x985)](_0x13a16b(0x78b));},VisuMZ['BattleCore'][_0x553167(0x26d)]=BattleManager[_0x553167(0x1bf)],BattleManager[_0x553167(0x1bf)]=function(){const _0x57ba6f=_0x553167,_0x2306b9=this[_0x57ba6f(0x984)],_0x2a8ba6=this[_0x57ba6f(0x1ef)];_0x2306b9&&_0x2306b9!==this[_0x57ba6f(0x4a9)]&&_0x2306b9[_0x57ba6f(0x133)]()===_0x2a8ba6&&_0x2306b9[_0x57ba6f(0x985)](_0x57ba6f(0x495)),this[_0x57ba6f(0x1ef)]?VisuMZ[_0x57ba6f(0x841)][_0x57ba6f(0x26d)][_0x57ba6f(0x7f7)](this):this[_0x57ba6f(0x3a6)]=_0x57ba6f(0x8cb),_0x2306b9&&_0x2306b9!==this[_0x57ba6f(0x4a9)]&&_0x2306b9[_0x57ba6f(0x133)]()===_0x2a8ba6&&_0x2306b9[_0x57ba6f(0x985)](_0x57ba6f(0xb3d)),this['refreshBattlerMotions'](this['allBattleMembers']()),this['_lastAction']=this[_0x57ba6f(0x984)];},BattleManager[_0x553167(0x52d)]=function(_0x481773){const _0x5a0b33=_0x553167;for(const _0x496850 of _0x481773){if(!_0x496850)continue;if(!_0x496850[_0x5a0b33(0x8d6)]())continue;_0x496850[_0x5a0b33(0x8d6)]()[_0x5a0b33(0x1e7)]();}},BattleManager['updateAction']=function(){const _0x2f1152=_0x553167;!this[_0x2f1152(0x7d3)]['isBusy']()&&this[_0x2f1152(0x1bf)]();},Game_Battler[_0x553167(0x22b)][_0x553167(0x5d1)]=function(){const _0x49eca7=_0x553167;this[_0x49eca7(0x711)]();if(Imported[_0x49eca7(0x14e)]){const _0x58290c=VisuMZ['SkillsStatesCore'][_0x49eca7(0x309)]['States'];_0x58290c&&_0x58290c[_0x49eca7(0x723)]===![]&&this[_0x49eca7(0x96d)](0x1);}else this[_0x49eca7(0x96d)](0x1);this[_0x49eca7(0x155)]();},BattleManager[_0x553167(0x703)]=function(){const _0x3bcd88=_0x553167;this[_0x3bcd88(0x29f)]=VisuMZ['BattleCore'][_0x3bcd88(0x309)]['Mechanics'][_0x3bcd88(0x587)][_0x3bcd88(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x91f)]=BattleManager[_0x553167(0x8fc)],BattleManager[_0x553167(0x8fc)]=function(){const _0x47d0e6=_0x553167;this['processBattleCoreJS'](_0x47d0e6(0x8ae)),BattleManager[_0x47d0e6(0x306)][_0x47d0e6(0x6aa)](),VisuMZ[_0x47d0e6(0x841)][_0x47d0e6(0x91f)][_0x47d0e6(0x7f7)](this),this['processPostBattleCommonEvents'](_0x47d0e6(0x53b));},VisuMZ['BattleCore'][_0x553167(0x7cd)]=BattleManager[_0x553167(0x50d)],BattleManager[_0x553167(0x50d)]=function(){const _0x370a9c=_0x553167;this[_0x370a9c(0xab8)](_0x370a9c(0x34a));const _0x1f6ef5=this[_0x370a9c(0x29f)];VisuMZ[_0x370a9c(0x841)][_0x370a9c(0x7cd)][_0x370a9c(0x7f7)](this),this[_0x370a9c(0x29f)]=_0x1f6ef5+VisuMZ['BattleCore'][_0x370a9c(0x309)][_0x370a9c(0x5d5)]['CalcEscapeRaiseJS']['call'](this),this[_0x370a9c(0x178)]=![],this[_0x370a9c(0xa24)](_0x370a9c(0x449));},BattleManager[_0x553167(0x6cd)]=function(){const _0x3b55a2=_0x553167;let _0x1faa19=![];if(this[_0x3b55a2(0x2ef)]())for(const _0x14ce67 of $gameTroop[_0x3b55a2(0x5c7)]()){this[_0x3b55a2(0x7d3)][_0x3b55a2(0x9d2)](_0x3b55a2(0x278),TextManager[_0x3b55a2(0x987)]['format'](_0x14ce67)),this[_0x3b55a2(0x7d3)]['push'](_0x3b55a2(0xb72)),_0x1faa19=!![];}if(this['_preemptive'])this['_logWindow']['push']('addText',TextManager[_0x3b55a2(0xa0a)][_0x3b55a2(0x47d)]($gameParty[_0x3b55a2(0xc04)]())),this[_0x3b55a2(0x7d3)][_0x3b55a2(0x9d2)](_0x3b55a2(0xb72));else this['_surprise']&&(this[_0x3b55a2(0x7d3)]['push'](_0x3b55a2(0x278),TextManager['surprise'][_0x3b55a2(0x47d)]($gameParty[_0x3b55a2(0xc04)]())),this[_0x3b55a2(0x7d3)][_0x3b55a2(0x9d2)](_0x3b55a2(0xb72)));_0x1faa19&&(this['_logWindow'][_0x3b55a2(0x9d2)](_0x3b55a2(0xb72)),this['_logWindow'][_0x3b55a2(0x9d2)](_0x3b55a2(0xa25))),this[_0x3b55a2(0x981)]()&&this[_0x3b55a2(0x315)]()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager['isDisplayEmergedEnemies']=function(){const _0x40a021=_0x553167;if(BattleManager[_0x40a021(0x7c7)])return![];return VisuMZ[_0x40a021(0x841)]['Settings']['Enemy']['EmergeText'];},VisuMZ[_0x553167(0x841)][_0x553167(0x597)]=BattleManager['startInput'],BattleManager[_0x553167(0xb41)]=function(){const _0xa8583f=_0x553167;VisuMZ[_0xa8583f(0x841)][_0xa8583f(0x597)][_0xa8583f(0x7f7)](this),this[_0xa8583f(0xadd)]()&&this[_0xa8583f(0x315)]()&&!this[_0xa8583f(0x58b)]&&$gameParty[_0xa8583f(0x8e6)]()&&this[_0xa8583f(0xb80)]();},BattleManager[_0x553167(0x315)]=function(){const _0x3e58be=_0x553167;return VisuMZ[_0x3e58be(0x841)][_0x3e58be(0x309)][_0x3e58be(0xb2b)][_0x3e58be(0xc06)];},BattleManager[_0x553167(0x943)]=function(){const _0x2baa5c=_0x553167;this['isPartyTpbInputtable']()&&this[_0x2baa5c(0xb80)]();},VisuMZ['BattleCore'][_0x553167(0x10d)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x349)],Scene_Battle[_0x553167(0x22b)]['startActorCommandSelection']=function(){const _0x13a688=_0x553167;VisuMZ[_0x13a688(0x841)][_0x13a688(0x10d)][_0x13a688(0x7f7)](this),BattleManager[_0x13a688(0x981)]()&&BattleManager[_0x13a688(0x193)]&&(BattleManager['_tpbNeedsPartyCommand']=![],this[_0x13a688(0x339)]());},BattleManager[_0x553167(0x38a)]=function(_0x5b6823,_0x56ad19,_0x4b4b88){const _0x225369=_0x553167;if(!_0x4b4b88)return;if(!_0x5b6823)return;if(!_0x56ad19)return;const _0x1363c0=this['_action'];this[_0x225369(0x984)]=new Game_Action(_0x5b6823);if(DataManager[_0x225369(0x3f8)](_0x4b4b88))this['_action']['setItem'](_0x4b4b88['id']);if(DataManager[_0x225369(0x2bb)](_0x4b4b88))this['_action']['setSkill'](_0x4b4b88['id']);if(this['_action'][_0x225369(0x58c)]())BattleManager['invokeAction'](_0x5b6823,_0x56ad19);this['_action']=_0x1363c0;},BattleManager[_0x553167(0x5b3)]=function(_0x23f4b6,_0x61a9d7){const _0x33e6ba=_0x553167;this[_0x33e6ba(0x984)][_0x33e6ba(0xa0e)]=_0x61a9d7,this[_0x33e6ba(0x7d3)][_0x33e6ba(0x771)](_0x61a9d7),this[_0x33e6ba(0x7d3)]['displayReflectionPlayBack'](_0x23f4b6,this[_0x33e6ba(0x984)]),this[_0x33e6ba(0x984)]['apply'](_0x23f4b6),this[_0x33e6ba(0x7d3)][_0x33e6ba(0x4d2)](_0x23f4b6,_0x23f4b6);},VisuMZ[_0x553167(0x841)]['BattleManager_makeActionOrders']=BattleManager[_0x553167(0x415)],BattleManager['makeActionOrders']=function(){const _0x5797ff=_0x553167;VisuMZ[_0x5797ff(0x841)]['BattleManager_makeActionOrders']['call'](this),this[_0x5797ff(0x9ee)]=this[_0x5797ff(0x9ee)][_0x5797ff(0x577)](_0x3d82bb=>_0x3d82bb&&_0x3d82bb[_0x5797ff(0x254)]());},VisuMZ[_0x553167(0x841)][_0x553167(0xad4)]=BattleManager['updatePhase'],BattleManager[_0x553167(0xa5e)]=function(_0x5e8940){const _0x3e9759=_0x553167;if(this[_0x3e9759(0x3a6)]==='custom')this[_0x3e9759(0x16c)]();else this[_0x3e9759(0x3a6)]===_0x3e9759(0x362)?this['updateForceAction']():VisuMZ[_0x3e9759(0x841)][_0x3e9759(0xad4)][_0x3e9759(0x7f7)](this,_0x5e8940);},BattleManager[_0x553167(0x368)]=function(){const _0x36294f=_0x553167;this[_0x36294f(0x159)]=this[_0x36294f(0x9ca)][_0x36294f(0xa69)](0x0),this[_0x36294f(0x848)]=0x0,this[_0x36294f(0x8f3)]=this['_allTargets'][0x0]||null,this[_0x36294f(0x3a6)]=_0x36294f(0x21c);},BattleManager[_0x553167(0x16c)]=function(){const _0x26f2af=_0x553167;!this['updateEventMain']()&&!this[_0x26f2af(0x7d3)][_0x26f2af(0x8c4)]()&&(this[_0x26f2af(0x3a6)]=_0x26f2af(0x491));},BattleManager[_0x553167(0x362)]=function(_0x1b1e69){const _0x3a26b4=_0x553167;this[_0x3a26b4(0x9ee)][_0x3a26b4(0x4c0)](_0x1b1e69);if(_0x1b1e69===this[_0x3a26b4(0x1ef)])return;const _0x419aa8=JsonEx[_0x3a26b4(0x323)](_0x1b1e69['currentAction']());this[_0x3a26b4(0xbe4)][_0x3a26b4(0x9d2)]([_0x1b1e69,_0x419aa8]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x553167(0x7f9)]=function(){const _0x43587f=_0x553167;if(this[_0x43587f(0x981)]())this[_0x43587f(0x3a6)]='turn';else this[_0x43587f(0xbe4)]['length']>0x0?this[_0x43587f(0x3a6)]=_0x43587f(0x8cb):this[_0x43587f(0xb41)]();},BattleManager['getNextSubject']=function(){const _0xa32fcf=_0x553167,_0x51a158=this['_subject'];_0x51a158&&this[_0xa32fcf(0x981)]()&&_0x51a158[_0xa32fcf(0x611)](_0xa32fcf(0x445));for(;;){const _0x516a2d=this['getNextSubjectFromPool']();if(!_0x516a2d)return null;if(_0x516a2d['isBattleMember']()&&_0x516a2d[_0xa32fcf(0x788)]())return _0x516a2d;}},BattleManager[_0x553167(0x890)]=function(){const _0x5b5a52=_0x553167;if(this[_0x5b5a52(0xbe4)][_0x5b5a52(0x635)]>0x0){const _0x5952ae=this['_forcedBattlers'][_0x5b5a52(0x906)](),_0x1423b7=_0x5952ae[0x0];return _0x1423b7[_0x5b5a52(0x370)]=_0x1423b7['_actions']||[],_0x1423b7[_0x5b5a52(0x370)][0x0]=_0x5952ae[0x1],_0x1423b7;}else return this['_actionBattlers'][_0x5b5a52(0x906)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x742)]=Game_Battler['prototype']['forceAction'],Game_Battler[_0x553167(0x22b)][_0x553167(0x362)]=function(_0x1d1e73,_0x5ee1f6){const _0x455ec3=_0x553167;VisuMZ[_0x455ec3(0x841)][_0x455ec3(0x742)][_0x455ec3(0x7f7)](this,_0x1d1e73,_0x5ee1f6),this[_0x455ec3(0x370)][this[_0x455ec3(0x370)]['length']-0x1]['_forceAction']=!![];},Game_Interpreter[_0x553167(0x22b)][_0x553167(0x2e7)]=function(_0x5b238d){return this['iterateBattler'](_0x5b238d[0x0],_0x5b238d[0x1],_0x2b6968=>{const _0x344b7a=_0xabb9;!_0x2b6968[_0x344b7a(0x472)]()&&(_0x2b6968[_0x344b7a(0x362)](_0x5b238d[0x2],_0x5b238d[0x3]),BattleManager[_0x344b7a(0x362)](_0x2b6968));}),!![];},VisuMZ['BattleCore'][_0x553167(0x796)]=Game_Battler[_0x553167(0x22b)][_0x553167(0x4f1)],Game_Battler[_0x553167(0x22b)]['makeSpeed']=function(){const _0x151a53=_0x553167;VisuMZ[_0x151a53(0x841)][_0x151a53(0x796)][_0x151a53(0x7f7)](this),this['_actions'][_0x151a53(0x635)]<=0x0&&(this['_speed']=Number[_0x151a53(0x6b2)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x4416c0=_0x553167;if(VisuMZ[_0x4416c0(0x841)][_0x4416c0(0x309)][_0x4416c0(0x2e0)][_0x4416c0(0x71d)]??!![])return![];return SceneManager[_0x4416c0(0x2c2)]()&&this[_0x4416c0(0x300)];},VisuMZ[_0x553167(0x841)][_0x553167(0x60f)]=BattleManager[_0x553167(0xb80)],BattleManager['selectNextCommand']=function(){const _0x1246ea=_0x553167;this[_0x1246ea(0x981)]()?this[_0x1246ea(0x846)]():VisuMZ[_0x1246ea(0x841)]['BattleManager_selectNextCommand'][_0x1246ea(0x7f7)](this);},BattleManager[_0x553167(0x846)]=function(){const _0x28696c=_0x553167;if(this['_currentActor']){if(this['_currentActor'][_0x28696c(0xb80)]())return;this['finishActorInput'](),this[_0x28696c(0xae5)](),!this[_0x28696c(0x1ef)]&&!this[_0x28696c(0x7ec)]&&SceneManager[_0x28696c(0xa7f)][_0x28696c(0xb34)]();}else!this[_0x28696c(0x1ef)]&&this[_0x28696c(0x7bc)]();},BattleManager[_0x553167(0xae5)]=function(){const _0x513304=_0x553167;(!this[_0x513304(0x3ef)]()||this[_0x513304(0x477)]())&&(this['_tpbSceneChangeCacheActor']&&(!$gameParty['battleMembers']()[_0x513304(0xb5d)](this['_tpbSceneChangeCacheActor'])&&(this[_0x513304(0x4db)]=null)),!this[_0x513304(0x4db)]?(this[_0x513304(0x97a)](),this['_currentActor']=null,this[_0x513304(0x178)]=![]):this[_0x513304(0xb76)]());},BattleManager['revertTpbCachedActor']=function(){const _0xa63ca2=_0x553167;!$gameParty[_0xa63ca2(0x22d)]()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0xa63ca2(0x4db)]=null),this[_0xa63ca2(0x4db)]?(this[_0xa63ca2(0x7ec)]=this[_0xa63ca2(0x4db)],this['_currentActor'][_0xa63ca2(0x620)]=_0xa63ca2(0x1a3),this[_0xa63ca2(0x178)]=!![],this['_tpbSceneChangeCacheActor']=null):(this['cancelActorInput'](),this['_currentActor']=null,this['_inputting']=![]);},VisuMZ[_0x553167(0x841)]['BattleManager_isTpbMainPhase']=BattleManager[_0x553167(0x6da)],BattleManager[_0x553167(0x6da)]=function(){const _0x3c7e80=_0x553167;return this[_0x3c7e80(0x3a6)]===_0x3c7e80(0x21c)?this[_0x3c7e80(0x1fc)]():VisuMZ[_0x3c7e80(0x841)]['BattleManager_isTpbMainPhase'][_0x3c7e80(0x7f7)](this);},BattleManager['battleCoreTpbMainPhase']=function(){return this['isActiveTpb']();},VisuMZ[_0x553167(0x841)][_0x553167(0x5c9)]=BattleManager[_0x553167(0x97a)],BattleManager[_0x553167(0x97a)]=function(){const _0x3fcbe3=_0x553167;this[_0x3fcbe3(0x981)]()&&this[_0x3fcbe3(0x3a6)]===_0x3fcbe3(0x277)&&(this[_0x3fcbe3(0x7ec)]=null),VisuMZ[_0x3fcbe3(0x841)]['BattleManager_cancelActorInput'][_0x3fcbe3(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0xbe9)]=BattleManager['inputtingAction'],BattleManager[_0x553167(0x815)]=function(){const _0x5d6cee=_0x553167,_0x18a3ad=this[_0x5d6cee(0x7ec)];if(_0x18a3ad&&!_0x18a3ad[_0x5d6cee(0x815)]()){const _0x59325f=_0x18a3ad[_0x5d6cee(0x26b)];_0x18a3ad[_0x5d6cee(0x370)][_0x59325f]=new Game_Action(_0x18a3ad);}return VisuMZ[_0x5d6cee(0x841)]['BattleManager_inputtingAction'][_0x5d6cee(0x7f7)](this);},VisuMZ[_0x553167(0x841)]['BattleManager_checkSubstitute']=BattleManager[_0x553167(0x525)],BattleManager[_0x553167(0x525)]=function(_0x30b893){const _0x46cfc9=_0x553167;if(this[_0x46cfc9(0x984)][_0x46cfc9(0x39f)]())return![];return VisuMZ[_0x46cfc9(0x841)][_0x46cfc9(0x5f8)][_0x46cfc9(0x7f7)](this,_0x30b893);},SceneManager['isSceneBattle']=function(){const _0x5f1e3d=_0x553167;return this['_scene']&&this[_0x5f1e3d(0xa7f)]['constructor']===Scene_Battle;},SceneManager[_0x553167(0x3fd)]=function(){const _0x26b465=_0x553167;return Spriteset_Battle[_0x26b465(0x22b)][_0x26b465(0x497)]();},SceneManager[_0x553167(0x783)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x2489f2=_0x553167;if(SceneManager[_0x2489f2(0xbdb)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x308c56){const _0x1f98b2=_0x553167;if(!SceneManager['isSceneBattle']())return!![];const _0xea7035=[_0x1f98b2(0x35d),_0x1f98b2(0x7c8),'Scene_QuickLoad'];return _0xea7035[_0x1f98b2(0xb5d)](_0x308c56[_0x1f98b2(0xc04)]);},VisuMZ[_0x553167(0x841)][_0x553167(0x85c)]=SceneManager[_0x553167(0x9d2)],SceneManager['push']=function(_0x24fcf9){const _0x28b437=_0x553167;if(!SceneManager[_0x28b437(0x741)](_0x24fcf9))return this['displayBattleCoreTransitionErrorMsg'](_0x24fcf9);VisuMZ[_0x28b437(0x841)][_0x28b437(0x85c)]['call'](this,_0x24fcf9);},SceneManager[_0x553167(0x3dc)]=function(_0xbe09c4){const _0xc66d5b=_0x553167;if(!$gameTemp[_0xc66d5b(0xa2e)]())return;if(this[_0xc66d5b(0x705)])return;this[_0xc66d5b(0x705)]=!![];let _0x15528a='';_0x15528a+=_0xc66d5b(0x838),_0x15528a+='\x20to\x20%1\x20midbattle.'[_0xc66d5b(0x47d)](_0xbe09c4[_0xc66d5b(0xc04)]),alert(_0x15528a);},VisuMZ[_0x553167(0x841)]['Game_Temp_initialize']=Game_Temp[_0x553167(0x22b)]['initialize'],Game_Temp[_0x553167(0x22b)][_0x553167(0x7a1)]=function(){const _0x47a250=_0x553167;VisuMZ[_0x47a250(0x841)][_0x47a250(0x44a)][_0x47a250(0x7f7)](this),this[_0x47a250(0x235)]=[];},VisuMZ[_0x553167(0x841)][_0x553167(0x9d3)]=Game_Temp[_0x553167(0x22b)][_0x553167(0x59c)],Game_Temp[_0x553167(0x22b)]['requestAnimation']=function(_0x57d164,_0x474fa8,_0x37dd2d){const _0x3f8719=_0x553167;_0x57d164=_0x57d164['filter']((_0xf994cb,_0x2de0df,_0x1b2f91)=>_0x1b2f91[_0x3f8719(0x163)](_0xf994cb)===_0x2de0df);SceneManager[_0x3f8719(0x2c2)]()&&SceneManager[_0x3f8719(0x3fd)]()&&(_0x37dd2d=!_0x37dd2d);VisuMZ[_0x3f8719(0x841)][_0x3f8719(0x9d3)][_0x3f8719(0x7f7)](this,_0x57d164,_0x474fa8,_0x37dd2d);SceneManager['isSceneBattle']()&&BattleManager['_spriteset'][_0x3f8719(0x17a)]();for(const _0x31dadb of _0x57d164){_0x31dadb&&_0x31dadb['isEnemy']&&_0x31dadb[_0x3f8719(0x602)]()&&_0x31dadb[_0x3f8719(0xac6)]();}},Game_Temp[_0x553167(0x22b)]['setLastPluginCommandInterpreter']=function(_0x4f2ba4){const _0x4d847a=_0x553167;this[_0x4d847a(0x680)]=_0x4f2ba4;},Game_Temp[_0x553167(0x22b)][_0x553167(0x646)]=function(){const _0xbdd765=_0x553167;return this[_0xbdd765(0x680)];},Game_Temp['prototype'][_0x553167(0x380)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x553167(0x22b)]['applyForcedGameTroopSettingsBattleCore']=function(_0x1a637c){const _0x183df9=_0x553167;$gameMap&&$dataMap&&$dataMap[_0x183df9(0x645)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x183df9(0x645)]);const _0x4c9997=$dataTroops[_0x1a637c];if(_0x4c9997){let _0x4b2432=DataManager[_0x183df9(0x365)](_0x4c9997['id']);this[_0x183df9(0x25e)](_0x4b2432);}},Game_Temp[_0x553167(0x22b)][_0x553167(0x25e)]=function(_0x30294a){const _0x16fd36=_0x553167;if(!_0x30294a)return;if(_0x30294a[_0x16fd36(0x750)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x31f33d=String(RegExp['$1']);if(_0x31f33d[_0x16fd36(0x750)](/DEFAULT/i))this[_0x16fd36(0x539)]=_0x16fd36(0x734);else{if(_0x31f33d[_0x16fd36(0x750)](/LIST/i))this[_0x16fd36(0x539)]=_0x16fd36(0x5d3);else{if(_0x31f33d[_0x16fd36(0x750)](/XP/i))this[_0x16fd36(0x539)]='xp';else{if(_0x31f33d['match'](/PORTRAIT/i))this['_forcedBattleLayout']=_0x16fd36(0x7cf);else{if(_0x31f33d[_0x16fd36(0x750)](/BORDER/i))this[_0x16fd36(0x539)]='border';else{if(_0x31f33d[_0x16fd36(0x750)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?this[_0x16fd36(0x539)]=_0x16fd36(0x8b1):this['_forcedBattleLayout']=_0x16fd36(0x734);else _0x31f33d[_0x16fd36(0x750)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x16fd36(0x130)]?this[_0x16fd36(0x539)]=_0x16fd36(0x517):this[_0x16fd36(0x539)]=_0x16fd36(0x734));}}}}}}},VisuMZ[_0x553167(0x841)]['Game_Temp_requestBalloon']=Game_Temp['prototype'][_0x553167(0x435)],Game_Temp[_0x553167(0x22b)][_0x553167(0x435)]=function(_0x20a7c9,_0x559bd2){const _0x4c9895=_0x553167;SceneManager['isSceneBattle']()?this[_0x4c9895(0xad3)](_0x20a7c9,_0x559bd2):VisuMZ['BattleCore'][_0x4c9895(0x8b2)][_0x4c9895(0x7f7)](this,_0x20a7c9,_0x559bd2);},Game_Temp['prototype']['requestBattleBalloon']=function(_0xb0fd,_0x2ed2e8){const _0x16d7fb=_0x553167,_0x325e5f={'target':_0xb0fd,'balloonId':_0x2ed2e8};this['_battleBalloonQueue']=this[_0x16d7fb(0x235)]||[],this['_battleBalloonQueue'][_0x16d7fb(0x9d2)](_0x325e5f);},Game_Temp[_0x553167(0x22b)][_0x553167(0x995)]=function(){const _0x3f0c9f=_0x553167;return this[_0x3f0c9f(0x235)]=this[_0x3f0c9f(0x235)]||[],this['_battleBalloonQueue']['shift']();},Game_Temp[_0x553167(0x22b)]['clearBattleBalloons']=function(){const _0xe30db1=_0x553167;this[_0xe30db1(0x235)]=[];},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x2c4)]=function(){const _0x39ed79=_0x553167;this['_battleBalloonSprites']===undefined&&(this[_0x39ed79(0x4c2)]=[]);for(const _0x186c3e of this['_battleBalloonSprites']){!_0x186c3e[_0x39ed79(0x10a)]()&&this['removeBattleBalloon'](_0x186c3e);}this['processBattleBalloonRequests']();},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x274)]=function(){for(;;){const _0x335b13=$gameTemp['retrieveBattleBalloon']();if(_0x335b13)this['createBattleBalloon'](_0x335b13);else break;}},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x5bc)]=function(_0x45b7c8){const _0x3b704e=_0x553167,_0x52ad4f=this[_0x3b704e(0x97d)](_0x45b7c8[_0x3b704e(0x7dd)]);if(_0x52ad4f){let _0x130bbf=null;Imported[_0x3b704e(0x40c)]&&Array[_0x3b704e(0x9fc)](_0x45b7c8[_0x3b704e(0xb92)])?_0x130bbf=new Sprite_IconBalloon():_0x130bbf=new Sprite_Balloon(),_0x130bbf[_0x3b704e(0xb50)]=_0x45b7c8['target'],_0x130bbf[_0x3b704e(0x8f3)]=_0x52ad4f,_0x130bbf[_0x3b704e(0x8f3)]['_character']=_0x52ad4f,_0x130bbf[_0x3b704e(0x303)](_0x52ad4f,_0x45b7c8['balloonId']),BattleManager[_0x3b704e(0x10c)](_0x130bbf),this[_0x3b704e(0x4c2)][_0x3b704e(0x9d2)](_0x130bbf);}},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x9cb)]=function(_0x12ee20){const _0x479bd2=_0x553167;this[_0x479bd2(0x4c2)][_0x479bd2(0x4c0)](_0x12ee20),BattleManager[_0x479bd2(0x8c7)](_0x12ee20),_0x12ee20['destroy']();},Sprite_Battler[_0x553167(0x22b)]['setBalloonPose']=function(_0x18949d,_0x43c9bf){},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x7bf)]=function(){return![];},Spriteset_Battle[_0x553167(0x22b)]['isAnyBattleBalloonPlaying']=function(){const _0x51e37b=_0x553167;return this['_battleBalloonSprites']=this[_0x51e37b(0x4c2)]||[],this[_0x51e37b(0x4c2)]['length']>0x0;},VisuMZ[_0x553167(0x841)][_0x553167(0x17f)]=Game_System['prototype'][_0x553167(0x7a1)],Game_System[_0x553167(0x22b)][_0x553167(0x7a1)]=function(){const _0x271117=_0x553167;VisuMZ[_0x271117(0x841)]['Game_System_initialize'][_0x271117(0x7f7)](this),this[_0x271117(0x8e8)]();},Game_System[_0x553167(0x22b)][_0x553167(0x8e8)]=function(){const _0x553309=_0x553167;this[_0x553309(0xa70)]=this['_defeatedEnemies']||[];},Game_System['prototype']['getDefeatedEnemies']=function(){const _0xbe9759=_0x553167;if(this[_0xbe9759(0xa70)]===undefined)this[_0xbe9759(0x8e8)]();return this['_defeatedEnemies'];},Game_System[_0x553167(0x22b)][_0x553167(0x3a1)]=function(_0x40f729){const _0x486129=_0x553167;if(this[_0x486129(0xa70)]===undefined)this[_0x486129(0x8e8)]();if(!_0x40f729)return;if(this[_0x486129(0xa70)]['includes'](_0x40f729))return;this['_defeatedEnemies'][_0x486129(0x9d2)](_0x40f729),this['_defeatedEnemies'][_0x486129(0x797)]((_0x55592c,_0x49bc0b)=>_0x55592c-_0x49bc0b);},VisuMZ[_0x553167(0x841)][_0x553167(0x877)]=Game_BattlerBase[_0x553167(0x22b)]['addNewState'],Game_BattlerBase[_0x553167(0x22b)]['addNewState']=function(_0x1197e5){const _0x5947a5=_0x553167,_0x4218d2=this[_0x5947a5(0x788)](),_0x4daa10=this[_0x5947a5(0x668)]();VisuMZ[_0x5947a5(0x841)][_0x5947a5(0x877)][_0x5947a5(0x7f7)](this,_0x1197e5),this['isEnemy']()&&_0x4218d2&&this[_0x5947a5(0x82f)]()&&(this[_0x5947a5(0xb4a)]=!this[_0x5947a5(0x50c)](),$gameSystem[_0x5947a5(0x3a1)](this[_0x5947a5(0x7b6)]())),SceneManager[_0x5947a5(0x2c2)]()&&_0x4daa10!==this[_0x5947a5(0x668)]()&&(this[_0x5947a5(0x8d6)]()&&this[_0x5947a5(0x8d6)]()['refreshMotion']());},Game_Enemy[_0x553167(0x22b)][_0x553167(0x50c)]=function(){const _0x12cac4=_0x553167;return $gameSystem['getDefeatedEnemies']()[_0x12cac4(0xb5d)](this[_0x12cac4(0x968)]);},VisuMZ[_0x553167(0x841)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x4a8)],Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x4a8)]=function(_0x2d8269){const _0x2c3b13=_0x553167;VisuMZ['BattleCore'][_0x2c3b13(0x17b)][_0x2c3b13(0x7f7)](this,_0x2d8269),this[_0x2c3b13(0x602)]()&&_0x2d8269===this['deathStateId']()&&this['isAlive']()&&(this['_visualHpGauge_JustDied']=![]),!this[_0x2c3b13(0xa8d)]&&!this[_0x2c3b13(0xb26)]&&SceneManager[_0x2c3b13(0x2c2)]()&&this[_0x2c3b13(0x55c)]();},VisuMZ[_0x553167(0x841)]['Game_Action_clear']=Game_Action['prototype'][_0x553167(0xa25)],Game_Action['prototype'][_0x553167(0xa25)]=function(){const _0x5ea4a1=_0x553167;VisuMZ[_0x5ea4a1(0x841)][_0x5ea4a1(0x2b9)][_0x5ea4a1(0x7f7)](this),this[_0x5ea4a1(0x74a)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x5ea4a1(0x660)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x5ea4a1(0x5b9)]=_0x5ea4a1(0x734),this[_0x5ea4a1(0x6e8)]();},Game_Action[_0x553167(0x22b)][_0x553167(0x6e8)]=function(){const _0x1703f3=_0x553167;this[_0x1703f3(0x343)]='';},VisuMZ['BattleCore']['Game_Action_setSubject']=Game_Action[_0x553167(0x22b)][_0x553167(0x2f6)],Game_Action[_0x553167(0x22b)][_0x553167(0x2f6)]=function(_0x4125fa){const _0x31d8d1=_0x553167;VisuMZ[_0x31d8d1(0x841)][_0x31d8d1(0xa54)][_0x31d8d1(0x7f7)](this,_0x4125fa),this[_0x31d8d1(0x6e8)]();},VisuMZ['BattleCore']['Game_Action_setSkill']=Game_Action[_0x553167(0x22b)]['setSkill'],Game_Action[_0x553167(0x22b)]['setSkill']=function(_0x276475){const _0x124a1d=_0x553167;VisuMZ['BattleCore'][_0x124a1d(0x48c)][_0x124a1d(0x7f7)](this,_0x276475),this[_0x124a1d(0x6e8)]();},VisuMZ['BattleCore']['Game_Action_setItem']=Game_Action[_0x553167(0x22b)][_0x553167(0xbaa)],Game_Action[_0x553167(0x22b)][_0x553167(0xbaa)]=function(_0x3eff03){const _0x5b097f=_0x553167;VisuMZ[_0x5b097f(0x841)][_0x5b097f(0x99e)]['call'](this,_0x3eff03),this['clearTargetBattlerKey']();},Game_Action[_0x553167(0x22b)]['makeDamageValue']=function(_0x77664f,_0x45ff08){const _0x30209a=_0x553167;return VisuMZ[_0x30209a(0x841)]['Settings'][_0x30209a(0x2e0)][_0x30209a(0x86e)]['call'](this,_0x77664f,_0x45ff08);},Game_Action[_0x553167(0x22b)][_0x553167(0x7b0)]=function(_0x2540d6,_0x5bac9e){const _0x1db50c=_0x553167;return VisuMZ[_0x1db50c(0x841)][_0x1db50c(0x309)]['Damage'][_0x1db50c(0x7cb)][_0x1db50c(0x7f7)](this,_0x2540d6,_0x5bac9e);},Game_Action[_0x553167(0x22b)]['applyGuard']=function(_0x3a66b6,_0x256dbd){const _0x5af921=_0x553167;return VisuMZ['BattleCore'][_0x5af921(0x309)]['Damage']['GuardFormulaJS'][_0x5af921(0x7f7)](this,_0x3a66b6,_0x256dbd);},VisuMZ[_0x553167(0x841)][_0x553167(0x700)]=Game_Action[_0x553167(0x22b)][_0x553167(0x2ee)],Game_Action[_0x553167(0x22b)][_0x553167(0x2ee)]=function(_0xb75173){const _0x1298e8=_0x553167,_0x58e7d7=this[_0x1298e8(0x58c)]()['note'];if(_0x58e7d7[_0x1298e8(0x750)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x58e7d7[_0x1298e8(0x750)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4178ad=VisuMZ['BattleCore'][_0x1298e8(0x700)]['call'](this,_0xb75173);return _0x4178ad=this[_0x1298e8(0x660)][_0x1298e8(0x6bc)]*_0x4178ad+this[_0x1298e8(0x660)][_0x1298e8(0x702)],$gameParty[_0x1298e8(0x5e2)]()&&(_0x4178ad=this[_0x1298e8(0x222)](_0x4178ad,_0xb75173)),_0x4178ad;}}},VisuMZ[_0x553167(0x841)]['Game_Action_updateLastTarget']=Game_Action['prototype'][_0x553167(0xa58)],Game_Action['prototype'][_0x553167(0xa58)]=function(_0x47cd63){const _0x41e910=_0x553167;this[_0x41e910(0x568)]=!![],VisuMZ['BattleCore'][_0x41e910(0x83a)][_0x41e910(0x7f7)](this,_0x47cd63),this[_0x41e910(0x568)]=undefined;},Game_Action[_0x553167(0x22b)][_0x553167(0x2d6)]=function(_0x18c000){const _0x2ffb2d=_0x553167;window[_0x2ffb2d(0x491)]=this,window['a']=this[_0x2ffb2d(0x133)](),window['b']=_0x18c000,window[_0x2ffb2d(0x758)]=this[_0x2ffb2d(0x133)](),window[_0x2ffb2d(0x7dd)]=_0x18c000,window[_0x2ffb2d(0x582)]=this['item'](),window[_0x2ffb2d(0x8b0)]=this[_0x2ffb2d(0x58c)](),window[_0x2ffb2d(0x58c)]=this['item']();},Game_Action['prototype'][_0x553167(0x845)]=function(_0x138104){const _0x3a713a=_0x553167;window['action']=undefined,window['a']=undefined,window['b']=undefined,window[_0x3a713a(0x758)]=undefined,window[_0x3a713a(0x7dd)]=undefined,window[_0x3a713a(0x582)]=undefined,window['skill']=undefined,window[_0x3a713a(0x58c)]=undefined;},Game_Action[_0x553167(0x22b)][_0x553167(0x222)]=function(_0x202074,_0x2c8b28){const _0x3cf314=_0x553167;if(this[_0x3cf314(0x568)])return _0x202074;this[_0x3cf314(0x2d6)](_0x2c8b28);if(this[_0x3cf314(0x58c)]()){let _0x5d62e0=VisuMZ[_0x3cf314(0x841)][_0x3cf314(0x8f7)](this[_0x3cf314(0x58c)](),'jsAccuracy');VisuMZ[_0x3cf314(0x841)]['JS'][_0x5d62e0]&&(_0x202074=VisuMZ[_0x3cf314(0x841)]['JS'][_0x5d62e0]['call'](this,this[_0x3cf314(0x133)](),_0x2c8b28,this[_0x3cf314(0x58c)](),_0x202074));}for(const _0x3d168b of this[_0x3cf314(0x133)]()[_0x3cf314(0x446)]()){if(!_0x3d168b)continue;key=VisuMZ[_0x3cf314(0x841)][_0x3cf314(0x8f7)](_0x3d168b,_0x3cf314(0x47f)),VisuMZ['BattleCore']['JS'][key]&&(_0x202074=VisuMZ[_0x3cf314(0x841)]['JS'][key][_0x3cf314(0x7f7)](this,this['subject'](),_0x2c8b28,this['item'](),_0x202074));}for(const _0x20d5c4 of _0x2c8b28[_0x3cf314(0x446)]()){if(!_0x20d5c4)continue;key=VisuMZ[_0x3cf314(0x841)][_0x3cf314(0x8f7)](_0x20d5c4,'jsAccuracyAsTarget'),VisuMZ[_0x3cf314(0x841)]['JS'][key]&&(_0x202074=VisuMZ[_0x3cf314(0x841)]['JS'][key]['call'](this,this[_0x3cf314(0x133)](),_0x2c8b28,this[_0x3cf314(0x58c)](),_0x202074));}return this['clearGlobalVariables'](_0x2c8b28),_0x202074;},Game_Action[_0x553167(0x22b)][_0x553167(0xbe3)]=function(_0x6fefd9){const _0xcc4820=_0x553167;if(!this[_0xcc4820(0x58c)]()[_0xcc4820(0x2c7)][_0xcc4820(0x3b3)])return 0x0;let _0x30c579=VisuMZ[_0xcc4820(0x841)][_0xcc4820(0x309)][_0xcc4820(0x2e0)][_0xcc4820(0x8d2)][_0xcc4820(0x7f7)](this,_0x6fefd9);return _0x30c579=this['_multipliers'][_0xcc4820(0x7e1)]*_0x30c579+this[_0xcc4820(0x660)][_0xcc4820(0x6c9)],$gameParty['inBattle']()&&(_0x30c579=this['applyBattleCoreCriticalHitRateJS'](_0x30c579,_0x6fefd9)),_0x30c579;},Game_Action['prototype'][_0x553167(0x75b)]=function(_0x524653,_0x3d193a){const _0x169adf=_0x553167;this['declareGlobalVariables'](_0x3d193a),window[_0x169adf(0x58a)]=_0x524653;{const _0x19cf79=this[_0x169adf(0x133)]()[_0x169adf(0x446)]();for(const _0x57c0dc of _0x19cf79){if(!_0x57c0dc)continue;if(_0x57c0dc['note']['match'](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x502b1d=String(RegExp['$1']);try{eval(_0x502b1d);}catch(_0x1012a8){if($gameTemp[_0x169adf(0xa2e)]())console[_0x169adf(0x56f)](_0x1012a8);}}}}{const _0x480fd3=_0x3d193a['traitObjects']();for(const _0x3c531a of _0x480fd3){if(!_0x3c531a)continue;if(_0x3c531a[_0x169adf(0x645)][_0x169adf(0x750)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x38d498=String(RegExp['$1']);try{eval(_0x38d498);}catch(_0x456e67){if($gameTemp['isPlaytest']())console[_0x169adf(0x56f)](_0x456e67);}}}}return _0x524653=window[_0x169adf(0x58a)],this['clearGlobalVariables'](_0x3d193a),_0x524653;},Game_Action[_0x553167(0x22b)][_0x553167(0x75b)]=function(_0x2534f8,_0x19aee2){const _0x16771a=_0x553167;this[_0x16771a(0x2d6)](_0x19aee2);for(const _0x110ca8 of this[_0x16771a(0x133)]()['traitObjects']()){if(!_0x110ca8)continue;key=VisuMZ[_0x16771a(0x841)]['createKeyJS'](_0x110ca8,_0x16771a(0x869)),VisuMZ['BattleCore']['JS'][key]&&(_0x2534f8=VisuMZ[_0x16771a(0x841)]['JS'][key][_0x16771a(0x7f7)](this,this['subject'](),_0x19aee2,this[_0x16771a(0x58c)](),_0x2534f8));}for(const _0x11a613 of _0x19aee2[_0x16771a(0x446)]()){if(!_0x11a613)continue;key=VisuMZ[_0x16771a(0x841)][_0x16771a(0x8f7)](_0x11a613,_0x16771a(0x62b)),VisuMZ['BattleCore']['JS'][key]&&(_0x2534f8=VisuMZ[_0x16771a(0x841)]['JS'][key]['call'](this,this[_0x16771a(0x133)](),_0x19aee2,this['item'](),_0x2534f8));}return this[_0x16771a(0x845)](_0x19aee2),_0x2534f8;},Game_Action[_0x553167(0x22b)]['applyCritical']=function(_0x5759bc){const _0x8ae373=_0x553167;return _0x5759bc=VisuMZ[_0x8ae373(0x841)][_0x8ae373(0x309)]['Damage'][_0x8ae373(0x639)][_0x8ae373(0x7f7)](this,_0x5759bc),_0x5759bc=this[_0x8ae373(0x660)]['criticalDmgRate']*_0x5759bc+this[_0x8ae373(0x660)][_0x8ae373(0x5ae)],_0x5759bc;},VisuMZ['BattleCore'][_0x553167(0x129)]=Game_Action[_0x553167(0x22b)][_0x553167(0x5c1)],Game_Action[_0x553167(0x22b)][_0x553167(0x5c1)]=function(_0x109fcc){const _0x26c1cc=_0x553167;if(this[_0x26c1cc(0x5b9)]!==_0x26c1cc(0x734))return this[_0x26c1cc(0x2b1)](_0x109fcc);else return DataManager[_0x26c1cc(0x7ca)](this[_0x26c1cc(0x58c)]())===_0x26c1cc(0x11f)?VisuMZ[_0x26c1cc(0x841)]['Game_Action_evalDamageFormula'][_0x26c1cc(0x7f7)](this,_0x109fcc):this[_0x26c1cc(0x772)](_0x109fcc);},Game_Action[_0x553167(0x22b)][_0x553167(0x74b)]=function(_0x36ce0f){const _0x53fb9a=_0x553167;this[_0x53fb9a(0x5b9)]=_0x36ce0f;},Game_Action[_0x553167(0x22b)][_0x553167(0x2b1)]=function(_0x581102){const _0x22dad3=_0x553167,_0x4a3a9c=this[_0x22dad3(0x58c)](),_0x49fe10=_0x4a3a9c['damage'][_0x22dad3(0xba9)];_0x4a3a9c[_0x22dad3(0x2c7)][_0x22dad3(0xba9)]=this[_0x22dad3(0x5b9)];let _0x151417=VisuMZ[_0x22dad3(0x841)]['Game_Action_evalDamageFormula'][_0x22dad3(0x7f7)](this,_0x581102);return _0x4a3a9c[_0x22dad3(0x2c7)][_0x22dad3(0xba9)]=_0x49fe10,_0x151417;},Game_Action[_0x553167(0x22b)]['damageStyle']=function(){const _0x5a6373=_0x553167;if(this[_0x5a6373(0x58c)]()['note'][_0x5a6373(0x750)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1437a9=String(RegExp['$1'])['toUpperCase']()[_0x5a6373(0x976)]();return _0x1437a9;}return'MANUAL';},Game_Action[_0x553167(0x22b)][_0x553167(0x772)]=function(_0x12f6f0){const _0x536df9=_0x553167,_0x8ebab1=DataManager[_0x536df9(0x7ca)](this[_0x536df9(0x58c)]()),_0x4ab8f3=VisuMZ['DamageStyles'][_0x8ebab1];try{return _0x4ab8f3[_0x536df9(0x12a)][_0x536df9(0x7f7)](this,_0x12f6f0);}catch(_0x45522c){if($gameTemp[_0x536df9(0xa2e)]())console[_0x536df9(0x56f)](_0x45522c);return VisuMZ['BattleCore'][_0x536df9(0x129)][_0x536df9(0x7f7)](this);}},Game_Action[_0x553167(0x22b)][_0x553167(0x35e)]=function(_0x2120fa,_0x54119c){const _0x35539f=_0x553167;if(this[_0x35539f(0xaa7)]())return _0x54119c;const _0x1a067c=this[_0x35539f(0x133)](),_0x44d948=_0x2120fa;let _0xdb1ef=[],_0x5b9ec1=[];_0xdb1ef[_0x35539f(0x9d2)](this[_0x35539f(0x74a)][_0x35539f(0x381)],this[_0x35539f(0x74a)][_0x35539f(0x9e6)]),_0x5b9ec1[_0x35539f(0x9d2)](this[_0x35539f(0x74a)][_0x35539f(0x892)],this[_0x35539f(0x74a)][_0x35539f(0x2c9)]);const _0xeeffef=this[_0x35539f(0xa5c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x18b59d=this[_0x35539f(0xa5c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x18fce3=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x590b9a=this[_0x35539f(0xa5c)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0xdb1ef=_0xdb1ef[_0x35539f(0xa3b)](_0x44d948['traitObjects']()[_0x35539f(0x5c6)](_0x620f46=>_0x620f46&&_0x620f46['note'][_0x35539f(0x750)](_0xeeffef)?Number(RegExp['$1']):0x0)),_0x5b9ec1=_0x5b9ec1['concat'](_0x44d948[_0x35539f(0x446)]()[_0x35539f(0x5c6)](_0x222491=>_0x222491&&_0x222491[_0x35539f(0x645)][_0x35539f(0x750)](_0x18b59d)?Number(RegExp['$1'])/0x64:0x0)),_0xdb1ef=_0xdb1ef['concat'](_0x1a067c['traitObjects']()['map'](_0x40115f=>_0x40115f&&_0x40115f[_0x35539f(0x645)][_0x35539f(0x750)](_0x18fce3)?Number(RegExp['$1']):0x0)),_0x5b9ec1=_0x5b9ec1['concat'](_0x1a067c['traitObjects']()[_0x35539f(0x5c6)](_0x2b33fa=>_0x2b33fa&&_0x2b33fa[_0x35539f(0x645)]['match'](_0x590b9a)?Number(RegExp['$1'])/0x64:0x0)),this['item']()[_0x35539f(0x645)][_0x35539f(0x750)](_0x18fce3)&&_0xdb1ef[_0x35539f(0x9d2)](Number(RegExp['$1'])),this[_0x35539f(0x58c)]()[_0x35539f(0x645)][_0x35539f(0x750)](_0x590b9a)&&_0x5b9ec1['push'](Number(RegExp['$1'])),_0x54119c=_0xdb1ef[_0x35539f(0x4da)]((_0x4dccf1,_0x5aab95)=>_0x4dccf1-_0x5aab95,_0x54119c),_0x54119c>0x0&&(_0x54119c=_0x5b9ec1['reduce']((_0x311391,_0x390a7a)=>_0x311391*(0x1-_0x390a7a),_0x54119c)),_0x54119c;},VisuMZ[_0x553167(0x841)]['Game_Action_executeDamage']=Game_Action[_0x553167(0x22b)]['executeDamage'],Game_Action[_0x553167(0x22b)][_0x553167(0x6be)]=function(_0x4e66c5,_0x21553a){const _0x1d4c57=_0x553167;_0x21553a=_0x21553a*this[_0x1d4c57(0x660)]['damageRate'],_0x21553a+=this[_0x1d4c57(0x660)][_0x1d4c57(0xa64)]*(_0x21553a>=0x0?0x1:-0x1),_0x21553a=this[_0x1d4c57(0xa52)]('PreDamage%1JS',_0x4e66c5,_0x21553a,![]),_0x21553a=this[_0x1d4c57(0x9fa)](_0x21553a),_0x21553a>0x0?_0x21553a=Math['ceil'](_0x21553a):_0x21553a=Math[_0x1d4c57(0x66d)](_0x21553a),this['_executedValue']=_0x21553a,this[_0x1d4c57(0xa23)]=this[_0x1d4c57(0xa23)]||0x0,this[_0x1d4c57(0xa23)]+=_0x21553a,VisuMZ[_0x1d4c57(0x841)]['Game_Action_executeDamage'][_0x1d4c57(0x7f7)](this,_0x4e66c5,_0x21553a),this['applyBattleCoreJS'](_0x1d4c57(0x9ea),_0x4e66c5,_0x21553a,!![]);},Game_Action[_0x553167(0x22b)][_0x553167(0x9fa)]=function(_0x216338){const _0x20c9a=_0x553167;if(this['isBypassDamageCap']())return _0x216338;return _0x216338=this['applySoftDamageCap'](_0x216338),_0x216338=this[_0x20c9a(0x6de)](_0x216338),_0x216338;},Game_Action['prototype'][_0x553167(0x46f)]=function(){const _0x4c96f3=_0x553167,_0xf7cec3=/<BYPASS DAMAGE CAP>/i;if(this[_0x4c96f3(0x58c)]()[_0x4c96f3(0x645)][_0x4c96f3(0x750)](_0xf7cec3))return!![];if(this[_0x4c96f3(0x133)]()[_0x4c96f3(0x446)]()[_0x4c96f3(0x67b)](_0x3933ce=>_0x3933ce&&_0x3933ce[_0x4c96f3(0x645)][_0x4c96f3(0x750)](_0xf7cec3)))return!![];return!VisuMZ[_0x4c96f3(0x841)]['Settings']['Damage'][_0x4c96f3(0x1b9)];},Game_Action[_0x553167(0x22b)]['applySoftDamageCap']=function(_0xda2126){const _0x148015=_0x553167;if(!VisuMZ[_0x148015(0x841)]['Settings'][_0x148015(0x2e0)][_0x148015(0x8d5)])return _0xda2126;const _0x5d2d41=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x148015(0x645)][_0x148015(0x750)](_0x5d2d41))return _0xda2126;if(this[_0x148015(0x133)]()['traitObjects']()[_0x148015(0x67b)](_0x17b29c=>_0x17b29c&&_0x17b29c[_0x148015(0x645)][_0x148015(0x750)](_0x5d2d41)))return _0xda2126;const _0x25a83f=_0xda2126<0x0?-0x1:0x1;_0xda2126=Math[_0x148015(0x1a5)](_0xda2126);let _0x252da0=this[_0x148015(0x133)]()[_0x148015(0x942)]();this[_0x148015(0x58c)]()[_0x148015(0x645)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x252da0+=Number(RegExp['$1'])/0x64);_0x252da0=_0x252da0[_0x148015(0xabe)](0.01,0x1);const _0x5a5b6e=this['getHardDamageCap'](),_0x39ebf6=_0x252da0*_0x5a5b6e;if(_0xda2126>_0x39ebf6&&_0x5a5b6e>_0x39ebf6){_0xda2126-=_0x39ebf6;const _0x2707a4=VisuMZ['BattleCore']['Settings'][_0x148015(0x2e0)][_0x148015(0x4b7)],_0x59aca4=Math['max'](0x1-_0xda2126/((_0x5a5b6e-_0x39ebf6)*_0x2707a4+_0xda2126),0.01);_0xda2126*=_0x59aca4,_0xda2126+=_0x39ebf6;}return _0xda2126*_0x25a83f;},Game_Action[_0x553167(0x22b)]['getHardDamageCap']=function(){const _0x4e1f1d=_0x553167;return this[_0x4e1f1d(0x58c)]()[_0x4e1f1d(0x645)][_0x4e1f1d(0x750)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x4e1f1d(0x133)]()[_0x4e1f1d(0x1e1)]();},Game_Action[_0x553167(0x22b)]['applyHardDamageCap']=function(_0x3fa2e5){const _0x13be32=_0x553167;let _0x19e551=this['getHardDamageCap']();return _0x3fa2e5[_0x13be32(0xabe)](-_0x19e551,_0x19e551);},Game_Action[_0x553167(0x22b)][_0x553167(0x9a8)]=function(){const _0x3b92ec=_0x553167;if(!this[_0x3b92ec(0x58c)]())return![];if(!$gameParty['inBattle']())return![];return(this[_0x3b92ec(0x58c)]()[_0x3b92ec(0x645)]||'')[_0x3b92ec(0x750)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x553167(0x22b)]['disperseDamage']=function(_0x167580){const _0x227dca=_0x553167;if(this[_0x227dca(0x9a8)]()){let _0x1235dd=BattleManager['_targets'];_0x167580/=_0x1235dd[_0x227dca(0x635)],this[_0x227dca(0x98d)]()&&(_0x167580*=this['subject']()[_0x227dca(0x4be)]()+0x1),_0x167580=_0x167580>0x0?Math[_0x227dca(0xbe1)](_0x167580):Math[_0x227dca(0x66d)](_0x167580);}return _0x167580;},VisuMZ['BattleCore'][_0x553167(0x67c)]=Game_Action[_0x553167(0x22b)][_0x553167(0x4a2)],Game_Action[_0x553167(0x22b)][_0x553167(0x4a2)]=function(_0x20d23b,_0x9d843f){const _0x555e1c=_0x553167;let _0x2f5fbe=VisuMZ['BattleCore'][_0x555e1c(0x67c)]['call'](this,_0x20d23b,_0x9d843f);return this['disperseDamage'](_0x2f5fbe);},Game_Action[_0x553167(0x22b)][_0x553167(0x490)]=function(_0x3465a9,_0x827d4d){const _0xaa90da=_0x553167;let _0x2998fd=(_0x3465a9['mhp']*_0x827d4d[_0xaa90da(0x809)]+_0x827d4d['value2'])*_0x3465a9[_0xaa90da(0x3c2)];_0x2998fd=this[_0xaa90da(0xb70)](_0x2998fd),this[_0xaa90da(0x3f8)]()&&(_0x2998fd*=this[_0xaa90da(0x133)]()['pha']),_0x2998fd=Math[_0xaa90da(0x66d)](_0x2998fd),_0x2998fd!==0x0&&(_0x3465a9[_0xaa90da(0x725)](_0x2998fd),this['makeSuccess'](_0x3465a9));},Game_Action[_0x553167(0x22b)]['itemEffectRecoverMp']=function(_0x3edf1e,_0x91a7e){const _0x1cf261=_0x553167;let _0x5586eb=(_0x3edf1e[_0x1cf261(0xb1a)]*_0x91a7e[_0x1cf261(0x809)]+_0x91a7e[_0x1cf261(0x860)])*_0x3edf1e[_0x1cf261(0x3c2)];_0x5586eb=this['disperseDamage'](_0x5586eb),this[_0x1cf261(0x3f8)]()&&(_0x5586eb*=this[_0x1cf261(0x133)]()[_0x1cf261(0x925)]),_0x5586eb=Math[_0x1cf261(0x66d)](_0x5586eb),_0x5586eb!==0x0&&(_0x3edf1e[_0x1cf261(0x3e4)](_0x5586eb),this[_0x1cf261(0xac7)](_0x3edf1e));},Game_Action[_0x553167(0x22b)]['itemEffectGainTp']=function(_0x4a4b97,_0x12eabb){const _0x42576b=_0x553167;let _0x422cd9=Math[_0x42576b(0x66d)](_0x12eabb[_0x42576b(0x809)]);_0x422cd9=this[_0x42576b(0xb70)](_0x422cd9),_0x422cd9!==0x0&&(_0x4a4b97[_0x42576b(0x828)](_0x422cd9),this['makeSuccess'](_0x4a4b97));},VisuMZ[_0x553167(0x841)]['Game_Action_apply']=Game_Action[_0x553167(0x22b)][_0x553167(0x980)],Game_Action['prototype'][_0x553167(0x980)]=function(_0x524547){const _0x2d51d8=_0x553167;if(_0x524547&&_0x524547[_0x2d51d8(0x602)]())_0x524547['resetNameTempVisibility']();this[_0x2d51d8(0xa52)](_0x2d51d8(0xb32),_0x524547,0x0,!![]),VisuMZ[_0x2d51d8(0x841)][_0x2d51d8(0x733)][_0x2d51d8(0x7f7)](this,_0x524547),this[_0x2d51d8(0xa52)]('PostApply%1JS',_0x524547,this[_0x2d51d8(0x868)]||0x0,!![]),this[_0x2d51d8(0x882)](_0x524547);},Game_Action[_0x553167(0x22b)]['applyBattleCoreJS']=function(_0x298388,_0x7363ad,_0x4c5fcc,_0x141ebf){const _0x3a3b6f=_0x553167;if(this[_0x3a3b6f(0xb26)]||this[_0x3a3b6f(0xa8d)])return;_0x4c5fcc=_0x4c5fcc||0x0;const _0x1879bf=_0x4c5fcc,_0x443119=VisuMZ[_0x3a3b6f(0x841)][_0x3a3b6f(0x309)]['Mechanics'],_0x4c8422=_0x298388[_0x3a3b6f(0x47d)]('');if(_0x443119[_0x4c8422]){_0x4c5fcc=_0x443119[_0x4c8422][_0x3a3b6f(0x7f7)](this,_0x4c5fcc,_0x7363ad);if(_0x141ebf)_0x4c5fcc=_0x1879bf;}let _0x35e2e1=VisuMZ['BattleCore']['createKeyJS'](this['item'](),_0x298388[_0x3a3b6f(0x47d)](''));if(VisuMZ[_0x3a3b6f(0x841)]['JS'][_0x35e2e1]){_0x4c5fcc=VisuMZ['BattleCore']['JS'][_0x35e2e1][_0x3a3b6f(0x7f7)](this,this[_0x3a3b6f(0x133)](),_0x7363ad,this['item'](),_0x4c5fcc);if(_0x141ebf)_0x4c5fcc=_0x1879bf;}for(const _0x3f323b of this[_0x3a3b6f(0x133)]()[_0x3a3b6f(0x446)]()){if(!_0x3f323b)continue;_0x35e2e1=VisuMZ[_0x3a3b6f(0x841)][_0x3a3b6f(0x8f7)](_0x3f323b,_0x298388[_0x3a3b6f(0x47d)](_0x3a3b6f(0x2ad)));if(VisuMZ[_0x3a3b6f(0x841)]['JS'][_0x35e2e1]){_0x4c5fcc=VisuMZ[_0x3a3b6f(0x841)]['JS'][_0x35e2e1][_0x3a3b6f(0x7f7)](this,this[_0x3a3b6f(0x133)](),_0x7363ad,_0x3f323b,_0x4c5fcc);if(_0x141ebf)_0x4c5fcc=_0x1879bf;}}for(const _0x2cab54 of _0x7363ad[_0x3a3b6f(0x446)]()){if(!_0x2cab54)continue;_0x35e2e1=VisuMZ[_0x3a3b6f(0x841)]['createKeyJS'](_0x2cab54,_0x298388[_0x3a3b6f(0x47d)](_0x3a3b6f(0x4ad)));if(VisuMZ[_0x3a3b6f(0x841)]['JS'][_0x35e2e1]){_0x4c5fcc=VisuMZ[_0x3a3b6f(0x841)]['JS'][_0x35e2e1][_0x3a3b6f(0x7f7)](this,this[_0x3a3b6f(0x133)](),_0x7363ad,_0x2cab54,_0x4c5fcc);if(_0x141ebf)_0x4c5fcc=_0x1879bf;}}return _0x4c5fcc;},Game_Action['prototype'][_0x553167(0x985)]=function(_0x58e9f6){const _0xa3c83b=_0x553167,_0x4b0cad=this[_0xa3c83b(0xa23)]||0x0,_0x30762f=VisuMZ[_0xa3c83b(0x841)][_0xa3c83b(0x309)]['Mechanics'],_0x4523e9=_0x58e9f6['format']('');_0x30762f[_0x4523e9]&&_0x30762f[_0x4523e9][_0xa3c83b(0x7f7)](this,_0x4b0cad);let _0x1a2698=VisuMZ['BattleCore']['createKeyJS'](this[_0xa3c83b(0x58c)](),_0x58e9f6);VisuMZ['BattleCore']['JS'][_0x1a2698]&&VisuMZ['BattleCore']['JS'][_0x1a2698][_0xa3c83b(0x7f7)](this,this['subject'](),this[_0xa3c83b(0x133)](),this['item'](),_0x4b0cad);for(const _0x391961 of this[_0xa3c83b(0x133)]()[_0xa3c83b(0x446)]()){if(!_0x391961)continue;_0x1a2698=VisuMZ['BattleCore'][_0xa3c83b(0x8f7)](_0x391961,_0x58e9f6),VisuMZ[_0xa3c83b(0x841)]['JS'][_0x1a2698]&&VisuMZ[_0xa3c83b(0x841)]['JS'][_0x1a2698][_0xa3c83b(0x7f7)](this,this[_0xa3c83b(0x133)](),this['subject'](),_0x391961,_0x4b0cad);}},Game_Action[_0x553167(0x22b)]['speed']=function(){const _0x1af34f=_0x553167;return VisuMZ[_0x1af34f(0x841)][_0x1af34f(0x309)][_0x1af34f(0x5d5)][_0x1af34f(0x18b)][_0x1af34f(0x7f7)](this);},Game_Action[_0x553167(0x22b)]['allowRandomSpeed']=function(){const _0x513ed4=_0x553167;return VisuMZ[_0x513ed4(0x841)][_0x513ed4(0x309)][_0x513ed4(0x5d5)]['AllowRandomSpeed'];},Game_Action[_0x553167(0x22b)][_0x553167(0x791)]=function(){const _0x31e45e=_0x553167;if(this[_0x31e45e(0x343)]===_0x31e45e(0x32d))return![];if(this['_targetBattlerKey']===_0x31e45e(0xb7e))return![];if(!this[_0x31e45e(0x58c)]())return![];return this[_0x31e45e(0x58c)]()[_0x31e45e(0x645)][_0x31e45e(0x750)](/<JS TARGETS>/i);},Game_Action[_0x553167(0x22b)]['isBattleCoreTargetScope']=function(){const _0x4e0193=_0x553167;if(this[_0x4e0193(0x343)]===_0x4e0193(0x32d))return![];if(this['_targetBattlerKey']===_0x4e0193(0xb7e))return![];if(!this[_0x4e0193(0x76c)]&&this['subject']()[_0x4e0193(0x805)]())return![];if(this[_0x4e0193(0x791)]())return!![];if(!this[_0x4e0193(0x58c)]())return![];return typeof this[_0x4e0193(0x58c)]()[_0x4e0193(0x5ea)]==='string';},VisuMZ[_0x553167(0x841)]['Game_Action_isForOpponent']=Game_Action[_0x553167(0x22b)][_0x553167(0x745)],Game_Action['prototype']['isForOpponent']=function(){const _0x27293d=_0x553167;if(this[_0x27293d(0x343)]===_0x27293d(0x32d))return![];if(this[_0x27293d(0x343)]==='all\x20enemies')return!![];return this[_0x27293d(0xb2f)]()&&!this[_0x27293d(0x791)]()?this['isForOpponentBattleCore']():VisuMZ[_0x27293d(0x841)][_0x27293d(0x3b2)][_0x27293d(0x7f7)](this);},Game_Action[_0x553167(0x22b)][_0x553167(0x288)]=function(){const _0x3ccbbe=_0x553167,_0x438e0e=String(this[_0x3ccbbe(0x58c)]()[_0x3ccbbe(0x5ea)]);if(_0x438e0e[_0x3ccbbe(0x750)](/ANY/i))return!![];return _0x438e0e[_0x3ccbbe(0x750)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x553167(0x841)]['Game_Action_isForFriend']=Game_Action[_0x553167(0x22b)]['isForFriend'],Game_Action[_0x553167(0x22b)][_0x553167(0x39f)]=function(){const _0x543aaf=_0x553167;if(this['_targetBattlerKey']==='all\x20actors')return!![];if(this[_0x543aaf(0x343)]===_0x543aaf(0xb7e))return![];return this[_0x543aaf(0xb2f)]()&&!this['isCustomBattleScope']()?this[_0x543aaf(0x27f)]():VisuMZ['BattleCore'][_0x543aaf(0x990)][_0x543aaf(0x7f7)](this);},Game_Action[_0x553167(0x22b)][_0x553167(0x27f)]=function(){const _0x2596e5=_0x553167,_0xbdbb7d=String(this[_0x2596e5(0x58c)]()[_0x2596e5(0x5ea)]);return _0xbdbb7d['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x553167(0x5e9)]=function(){const _0x4f6053=_0x553167;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){const _0x24d1eb=String(this[_0x4f6053(0x58c)]()[_0x4f6053(0x5ea)]);return _0x24d1eb['match'](/(?:ENEMY|FOE)/i)&&_0x24d1eb[_0x4f6053(0x750)](/OR/i)&&_0x24d1eb[_0x4f6053(0x750)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x553167(0x22b)]['isForAnyoneFocusFriends']=function(){const _0x1c039f=_0x553167;if(this['isForAnyone']()){const _0x48992b=String(this[_0x1c039f(0x58c)]()['scope']);if(_0x48992b['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x553167(0x22b)][_0x553167(0x345)]=function(){const _0xce915b=_0x553167;if(this['isForAnyone']()){const _0x559dfc=String(this['item']()['scope']);if(_0x559dfc[_0xce915b(0x750)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x553167(0x841)][_0x553167(0x591)]=Game_Action[_0x553167(0x22b)][_0x553167(0x3bc)],Game_Action[_0x553167(0x22b)]['isForAliveFriend']=function(){const _0x46472d=_0x553167;if(this[_0x46472d(0x343)]==='all\x20actors')return!![];return this[_0x46472d(0xb2f)]()&&!this[_0x46472d(0x791)]()?this[_0x46472d(0x94f)]():VisuMZ[_0x46472d(0x841)][_0x46472d(0x591)][_0x46472d(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x47e)]=Game_Action[_0x553167(0x22b)][_0x553167(0x137)],Game_Action[_0x553167(0x22b)]['isForDeadFriend']=function(){const _0x23287e=_0x553167;if(this[_0x23287e(0x343)]===_0x23287e(0x32d))return VisuMZ[_0x23287e(0x841)]['Game_Action_isForDeadFriend']['call'](this);return VisuMZ['BattleCore']['Game_Action_isForDeadFriend']['call'](this);},Game_Action[_0x553167(0x22b)]['isForAliveFriendBattleCore']=function(){const _0x3fde1d=_0x553167;if(this[_0x3fde1d(0x5e9)]())return!![];return![];},Game_Action[_0x553167(0x22b)][_0x553167(0x557)]=function(){const _0x1ac310=_0x553167;return this[_0x1ac310(0x58c)]()&&this[_0x1ac310(0x58c)]()[_0x1ac310(0x645)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x553167(0x841)][_0x553167(0x880)]=Game_Action[_0x553167(0x22b)]['isForOne'],Game_Action[_0x553167(0x22b)]['isForOne']=function(){const _0x572cc9=_0x553167;if(this[_0x572cc9(0x343)]===_0x572cc9(0x32d))return![];if(this[_0x572cc9(0x343)]===_0x572cc9(0xb7e))return![];return this['isBattleCoreTargetScope']()&&!this[_0x572cc9(0x791)]()?this[_0x572cc9(0xbe0)]():VisuMZ['BattleCore'][_0x572cc9(0x880)][_0x572cc9(0x7f7)](this);},Game_Action[_0x553167(0x22b)][_0x553167(0xbe0)]=function(){const _0x4d4413=_0x553167;if(this[_0x4d4413(0x5e9)]())return!![];return![];},VisuMZ[_0x553167(0x841)][_0x553167(0x881)]=Game_Action[_0x553167(0x22b)][_0x553167(0xbc9)],Game_Action['prototype'][_0x553167(0xbc9)]=function(){const _0x5e733a=_0x553167;if(this[_0x5e733a(0x343)]===_0x5e733a(0x32d))return![];if(this[_0x5e733a(0x343)]===_0x5e733a(0xb7e))return![];return this['isBattleCoreTargetScope']()&&!this[_0x5e733a(0x791)]()?this[_0x5e733a(0xfc)]():VisuMZ['BattleCore']['Game_Action_isForRandom'][_0x5e733a(0x7f7)](this);},Game_Action[_0x553167(0x22b)]['isForRandomBattleCore']=function(){const _0x262859=_0x553167,_0x5dda11=String(this[_0x262859(0x58c)]()[_0x262859(0x5ea)]);return _0x5dda11[_0x262859(0x750)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x553167(0x841)][_0x553167(0x812)]=Game_Action[_0x553167(0x22b)]['isForAll'],Game_Action[_0x553167(0x22b)][_0x553167(0xae1)]=function(){const _0x41b81e=_0x553167;if(this[_0x41b81e(0x343)]==='all\x20actors')return!![];if(this[_0x41b81e(0x343)]==='all\x20enemies')return!![];return VisuMZ[_0x41b81e(0x841)][_0x41b81e(0x812)][_0x41b81e(0x7f7)](this);},Game_Action[_0x553167(0x22b)][_0x553167(0x997)]=function(){const _0x4acd24=_0x553167;if(!this['item']())return![];if(this[_0x4acd24(0x137)]())return![];return(this['item']()[_0x4acd24(0x645)]||'')[_0x4acd24(0x750)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x553167(0x202)]=Game_Action[_0x553167(0x22b)][_0x553167(0x92f)],Game_Action['prototype'][_0x553167(0x92f)]=function(_0x4c0400){const _0x36001a=_0x553167;if(this['isForNotUser']()&&_0x4c0400===this[_0x36001a(0x133)]())return![];return VisuMZ['BattleCore'][_0x36001a(0x202)][_0x36001a(0x7f7)](this,_0x4c0400);},VisuMZ[_0x553167(0x841)][_0x553167(0x3ed)]=Game_Action[_0x553167(0x22b)][_0x553167(0x2be)],Game_Action[_0x553167(0x22b)][_0x553167(0x2be)]=function(){const _0x514802=_0x553167,_0x20e4fe=VisuMZ[_0x514802(0x841)][_0x514802(0x3ed)][_0x514802(0x7f7)](this);if(this['isForNotUser']())_0x20e4fe[_0x514802(0x4c0)](this[_0x514802(0x133)]());return _0x20e4fe;},VisuMZ[_0x553167(0x841)][_0x553167(0x48a)]=Game_Action['prototype'][_0x553167(0x424)],Game_Action[_0x553167(0x22b)]['needsSelection']=function(){const _0x44ca3b=_0x553167;return this[_0x44ca3b(0xb2f)]()&&!this[_0x44ca3b(0x791)]()?this[_0x44ca3b(0x476)]():VisuMZ[_0x44ca3b(0x841)][_0x44ca3b(0x48a)][_0x44ca3b(0x7f7)](this);},Game_Action[_0x553167(0x22b)][_0x553167(0x476)]=function(){const _0x2e7db2=_0x553167,_0x4b2c7b=String(this[_0x2e7db2(0x58c)]()[_0x2e7db2(0x5ea)]);if(_0x4b2c7b['match'](/RANDOM/i))return![];if(_0x4b2c7b[_0x2e7db2(0x750)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x4b2c7b[_0x2e7db2(0x750)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x4b2c7b['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x4b2c7b[_0x2e7db2(0x750)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x2e7db2(0x841)][_0x2e7db2(0x48a)]['call'](this);},VisuMZ[_0x553167(0x841)][_0x553167(0xa38)]=Game_Action[_0x553167(0x22b)][_0x553167(0x918)],Game_Action[_0x553167(0x22b)]['makeTargets']=function(){const _0x3bee2f=_0x553167;let _0x2d3a7c=[];return this[_0x3bee2f(0xb2f)]()?this[_0x3bee2f(0x791)]()?_0x2d3a7c=this['makeTargetsBattleCoreJS']():_0x2d3a7c=this[_0x3bee2f(0x1da)]():_0x2d3a7c=VisuMZ[_0x3bee2f(0x841)]['Game_Action_makeTargets'][_0x3bee2f(0x7f7)](this),_0x2d3a7c=this[_0x3bee2f(0xaa8)](_0x2d3a7c),_0x2d3a7c;},Game_Action[_0x553167(0x22b)][_0x553167(0x811)]=function(){const _0x124f29=_0x553167;return this['subject']()[_0x124f29(0x8fb)]()&&!this[_0x124f29(0x133)]()['isAutoBattle']();},Game_Action[_0x553167(0x22b)][_0x553167(0x2d3)]=function(){const _0x5d9d6c=_0x553167,_0x5d0207=VisuMZ['BattleCore'][_0x5d9d6c(0x8f7)](this[_0x5d9d6c(0x58c)](),_0x5d9d6c(0xaf7));if(VisuMZ[_0x5d9d6c(0x841)]['JS'][_0x5d0207]){targets=VisuMZ[_0x5d9d6c(0x841)][_0x5d9d6c(0xa38)][_0x5d9d6c(0x7f7)](this);const _0x3cbbba=VisuMZ[_0x5d9d6c(0x841)][_0x5d9d6c(0x8f7)](this[_0x5d9d6c(0x58c)](),_0x5d9d6c(0xaf7));return targets=VisuMZ['BattleCore']['JS'][_0x3cbbba][_0x5d9d6c(0x7f7)](this,this[_0x5d9d6c(0x133)](),targets),this[_0x5d9d6c(0x675)](targets);}return this['makeTargetsBattleCore']();},Game_Action[_0x553167(0x22b)]['makeTargetsBattleCore']=function(){const _0x2f0968=_0x553167;let _0x5399a0=[];const _0x4f38d5=String(this[_0x2f0968(0x58c)]()[_0x2f0968(0x5ea)]);if(this[_0x2f0968(0x345)]())return this[_0x2f0968(0x811)]()?(_0x5399a0=this[_0x2f0968(0x7e3)](),this[_0x2f0968(0x675)](_0x5399a0)):(this['_targetIndex']=-0x1,_0x5399a0[_0x2f0968(0x9d2)](...this[_0x2f0968(0x575)]()),this['repeatTargets'](_0x5399a0));if(this[_0x2f0968(0x3db)]()){if(this['isSubjectValidForAnyoneSelect']())return _0x5399a0=this[_0x2f0968(0x7e3)](),this['repeatTargets'](_0x5399a0);else{if(Imported[_0x2f0968(0x54c)]){if(VisuMZ[_0x2f0968(0x4e7)][_0x2f0968(0x932)]<1.19){let _0x1474c5='';_0x1474c5+=_0x2f0968(0x986),_0x1474c5+=_0x2f0968(0x7fa),_0x1474c5+=_0x2f0968(0x96f),alert(_0x1474c5),SceneManager[_0x2f0968(0x19c)]();}}return this[_0x2f0968(0x848)]=-0x1,_0x5399a0[_0x2f0968(0x9d2)](...this['targetsForFriends']()),this[_0x2f0968(0x675)](_0x5399a0);}}if(_0x4f38d5[_0x2f0968(0x750)](/(\d+) RANDOM ANY/i)){let _0x24a903=Number(RegExp['$1']);while(_0x24a903--){const _0x36ab9e=Math['randomInt'](0x2)===0x0?this[_0x2f0968(0x8d1)]():this[_0x2f0968(0xa3e)]();_0x5399a0[_0x2f0968(0x9d2)](_0x36ab9e[_0x2f0968(0x25f)]());}return this[_0x2f0968(0x675)](_0x5399a0);}if(_0x4f38d5[_0x2f0968(0x750)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x324a04=Number(RegExp['$1']);while(_0x324a04--){_0x5399a0[_0x2f0968(0x9d2)](this[_0x2f0968(0x8d1)]()[_0x2f0968(0x25f)]());}return this[_0x2f0968(0x675)](_0x5399a0);}if(_0x4f38d5[_0x2f0968(0x750)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x36e3e5=Number(RegExp['$1']);while(_0x36e3e5--){_0x5399a0[_0x2f0968(0x9d2)](this[_0x2f0968(0xa3e)]()[_0x2f0968(0x25f)]());}return this[_0x2f0968(0x675)](_0x5399a0);}if(_0x4f38d5[_0x2f0968(0x750)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5399a0[_0x2f0968(0x9d2)](...this[_0x2f0968(0xa3e)]()[_0x2f0968(0x58e)]()[_0x2f0968(0x577)](_0x13a228=>_0x13a228!==this['subject']())),this[_0x2f0968(0x675)](_0x5399a0);return VisuMZ[_0x2f0968(0x841)][_0x2f0968(0xa38)]['call'](this);},Game_Action[_0x553167(0x22b)][_0x553167(0xb27)]=function(_0x2d1e7d){const _0x5ab3d2=_0x553167,_0x5a0c8e=[];for(let _0x1eb666=0x0;_0x1eb666<this[_0x5ab3d2(0xaf9)]();_0x1eb666++){_0x5a0c8e[_0x5ab3d2(0x9d2)](_0x2d1e7d[_0x5ab3d2(0x25f)]());}return _0x5a0c8e;},Game_Action['prototype'][_0x553167(0xaa8)]=function(_0x1052cf){const _0x3a454d=_0x553167;if(!this['item']())return _0x1052cf;const _0x27f7f0=this['item']()['note'];if(this[_0x3a454d(0x557)]()){this[_0x3a454d(0xae1)]()&&_0x1052cf[_0x3a454d(0x4c0)](this[_0x3a454d(0x133)]());if(_0x1052cf[_0x3a454d(0xb5d)](this[_0x3a454d(0x133)]())){const _0x3c9bdd=this['friendsUnit']()[_0x3a454d(0x58e)]()[_0x3a454d(0x4c0)](this[_0x3a454d(0x133)]());if(_0x3c9bdd[_0x3a454d(0x635)]>0x0){_0x3c9bdd['sort']((_0x1c36ca,_0x262012)=>_0x1c36ca['hpRate']()-_0x262012[_0x3a454d(0xa16)]());while(_0x1052cf[_0x3a454d(0xb5d)](this[_0x3a454d(0x133)]())){const _0x56cc09=_0x1052cf[_0x3a454d(0x163)](this['subject']());_0x1052cf[_0x56cc09]=_0x3c9bdd[Math[_0x3a454d(0x852)](_0x3c9bdd[_0x3a454d(0x635)])];}}else _0x1052cf['remove'](this[_0x3a454d(0x133)]());}}return _0x1052cf;},VisuMZ[_0x553167(0x841)][_0x553167(0x250)]=Game_Action[_0x553167(0x22b)][_0x553167(0x3df)],Game_Action[_0x553167(0x22b)][_0x553167(0x3df)]=function(_0x357ad2,_0x19c19c){const _0x32c6eb=_0x553167;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState'][_0x32c6eb(0x7f7)](this,_0x357ad2,_0x19c19c);if(!_0x357ad2[_0x32c6eb(0x56a)]())return;for(const _0x1278ce of this['subject']()['attackStates']()){if(_0x1278ce===_0x357ad2[_0x32c6eb(0x154)]()){let _0x4bc404=_0x19c19c[_0x32c6eb(0x809)];_0x4bc404*=_0x357ad2[_0x32c6eb(0x78a)](_0x1278ce),_0x4bc404*=this[_0x32c6eb(0x133)]()[_0x32c6eb(0x59e)](_0x1278ce),_0x4bc404*=this[_0x32c6eb(0x7ac)](_0x357ad2),Math[_0x32c6eb(0x3e5)]()<_0x4bc404&&(_0x357ad2[_0x32c6eb(0x7a7)]=!![],this[_0x32c6eb(0xac7)](_0x357ad2));}}},VisuMZ[_0x553167(0x841)][_0x553167(0x81c)]=Game_Action['prototype'][_0x553167(0x43e)],Game_Action[_0x553167(0x22b)][_0x553167(0x43e)]=function(_0x88e9d2,_0x2ab51d){const _0x1b8e5f=_0x553167;VisuMZ[_0x1b8e5f(0x841)][_0x1b8e5f(0x81c)][_0x1b8e5f(0x7f7)](this,_0x88e9d2,_0x2ab51d);if(!_0x88e9d2[_0x1b8e5f(0x56a)]())return;if(_0x2ab51d['dataId']!==_0x88e9d2[_0x1b8e5f(0x154)]())return;let _0x5491d0=_0x2ab51d[_0x1b8e5f(0x809)];!this[_0x1b8e5f(0xaa7)]()&&(_0x5491d0*=_0x88e9d2[_0x1b8e5f(0x78a)](_0x2ab51d[_0x1b8e5f(0xaa4)]),_0x5491d0*=this['lukEffectRate'](_0x88e9d2)),Math[_0x1b8e5f(0x3e5)]()<_0x5491d0&&(_0x88e9d2[_0x1b8e5f(0x7a7)]=!![],this['makeSuccess'](_0x88e9d2));},VisuMZ[_0x553167(0x841)][_0x553167(0xa26)]=Game_Action[_0x553167(0x22b)][_0x553167(0x4af)],Game_Action[_0x553167(0x22b)][_0x553167(0x4af)]=function(){const _0x5cc126=_0x553167;VisuMZ[_0x5cc126(0x841)][_0x5cc126(0xa26)][_0x5cc126(0x7f7)](this),this[_0x5cc126(0xb1d)](),this[_0x5cc126(0x2ca)]();},Game_Action[_0x553167(0x22b)][_0x553167(0xb1d)]=function(){const _0x528193=_0x553167;if(!SceneManager[_0x528193(0x2c2)]())return;const _0x577493=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x52921b=this['item']()[_0x528193(0x645)][_0x528193(0x750)](_0x577493);if(_0x52921b)for(const _0x3a7b1d of _0x52921b){if(!_0x3a7b1d)continue;_0x3a7b1d[_0x528193(0x750)](_0x577493);const _0x1716af=String(RegExp['$1'])[_0x528193(0x23f)](',')[_0x528193(0x5c6)](_0x4cf53b=>String(_0x4cf53b)['trim']()),_0x335f3b=_0x1716af['map'](_0x359532=>DataManager[_0x528193(0xa47)](_0x359532));for(const _0x57d03a of _0x335f3b){const _0x516a52=$dataCommonEvents[_0x57d03a];_0x516a52&&$gameTemp[_0x528193(0xbef)](_0x57d03a);}}},DataManager[_0x553167(0xa47)]=function(_0x25860a){const _0x4fe67d=_0x553167;_0x25860a=_0x25860a['toUpperCase']()[_0x4fe67d(0x976)](),this[_0x4fe67d(0x7d1)]=this['_commonEventIDs']||{};if(this[_0x4fe67d(0x7d1)][_0x25860a])return this[_0x4fe67d(0x7d1)][_0x25860a];for(const _0x35a5c0 of $dataCommonEvents){if(!_0x35a5c0)continue;let _0x46a9f4=_0x35a5c0[_0x4fe67d(0xc04)];_0x46a9f4=_0x46a9f4[_0x4fe67d(0xa4a)](/\x1I\[(\d+)\]/gi,''),_0x46a9f4=_0x46a9f4[_0x4fe67d(0xa4a)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x46a9f4[_0x4fe67d(0x512)]()[_0x4fe67d(0x976)]()]=_0x35a5c0['id'];}return this['_commonEventIDs'][_0x25860a]||0x0;},Game_Action['prototype'][_0x553167(0x2ca)]=function(){const _0x162790=_0x553167;if(!SceneManager[_0x162790(0x2c2)]())return;const _0x33b16b=VisuMZ[_0x162790(0x841)][_0x162790(0x309)][_0x162790(0x5d5)];_0x33b16b['SwitchCritical']&&$gameSwitches[_0x162790(0x915)](_0x33b16b[_0x162790(0x5aa)],![]),_0x33b16b[_0x162790(0xbfd)]&&$gameSwitches['setValue'](_0x33b16b['SwitchMissEvade'],![]),_0x33b16b[_0x162790(0x5d8)]&&$gameVariables[_0x162790(0x915)](_0x33b16b[_0x162790(0x5d8)],0x0),_0x33b16b[_0x162790(0x90a)]&&$gameVariables[_0x162790(0x915)](_0x33b16b[_0x162790(0x90a)],0x0);},Game_Action['prototype'][_0x553167(0x882)]=function(_0x26b1f1){const _0xf5e85e=_0x553167;if(!SceneManager[_0xf5e85e(0x2c2)]())return;if(!_0x26b1f1)return;const _0x40aa27=_0x26b1f1[_0xf5e85e(0x961)](),_0x74319f=VisuMZ[_0xf5e85e(0x841)][_0xf5e85e(0x309)][_0xf5e85e(0x5d5)];_0x74319f['SwitchCritical']&&_0x40aa27[_0xf5e85e(0x3b3)]&&$gameSwitches[_0xf5e85e(0x915)](_0x74319f[_0xf5e85e(0x5aa)],!![]);_0x74319f[_0xf5e85e(0xbfd)]&&(_0x40aa27[_0xf5e85e(0x715)]||_0x40aa27[_0xf5e85e(0x57e)])&&$gameSwitches[_0xf5e85e(0x915)](_0x74319f[_0xf5e85e(0xbfd)],!![]);if(_0x74319f[_0xf5e85e(0x5d8)]){let _0x4cab9c=$gameVariables[_0xf5e85e(0x1d4)](_0x74319f['VariableDmg']);_0x40aa27['hpDamage']>0x0&&(_0x4cab9c+=Math[_0xf5e85e(0x1a5)](_0x40aa27[_0xf5e85e(0x523)])),$gameVariables[_0xf5e85e(0x915)](_0x74319f[_0xf5e85e(0x5d8)],_0x4cab9c);}if(_0x74319f[_0xf5e85e(0x90a)]){let _0x568cb9=$gameVariables[_0xf5e85e(0x1d4)](_0x74319f[_0xf5e85e(0x90a)]);_0x40aa27[_0xf5e85e(0x523)]<0x0&&(_0x568cb9+=Math['abs'](_0x40aa27[_0xf5e85e(0x523)])),$gameVariables[_0xf5e85e(0x915)](_0x74319f[_0xf5e85e(0x90a)],_0x568cb9);}},VisuMZ[_0x553167(0x841)][_0x553167(0xa91)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x553167(0x841)][_0x553167(0x66a)]=Game_Action[_0x553167(0x22b)]['executeHpDamage'],Game_Action[_0x553167(0x22b)][_0x553167(0x603)]=function(_0x3857b5,_0x1ced1f){const _0x5b4f3d=_0x553167;VisuMZ[_0x5b4f3d(0x841)][_0x5b4f3d(0x66a)][_0x5b4f3d(0x7f7)](this,_0x3857b5,_0x1ced1f);!this[_0x5b4f3d(0x3eb)]()&&_0x3857b5&&_0x3857b5[_0x5b4f3d(0x961)]()[_0x5b4f3d(0x523)]>0x0&&this[_0x5b4f3d(0x4ba)]('HP',_0x3857b5,_0x3857b5[_0x5b4f3d(0x961)]()[_0x5b4f3d(0x523)]);if(_0x3857b5){this['_executeHpDamage']=this['_executeHpDamage']||{};const _0x34bd31=_0x3857b5[_0x5b4f3d(0x829)]();this[_0x5b4f3d(0x6c2)][_0x34bd31]=_0x1ced1f;}},Game_Action['prototype'][_0x553167(0x284)]=function(_0x3c9e8e){const _0x5d1016=_0x553167;this['_executeHpDamage']=this[_0x5d1016(0x6c2)]||{};const _0x78034a=_0x3c9e8e['battlerKey']();return this[_0x5d1016(0x6c2)][_0x78034a]||0x0;},VisuMZ[_0x553167(0x841)]['Game_Action_executeMpDamage']=Game_Action[_0x553167(0x22b)][_0x553167(0x473)],Game_Action[_0x553167(0x22b)][_0x553167(0x473)]=function(_0x47c803,_0x6c648b){const _0x1b7150=_0x553167;VisuMZ[_0x1b7150(0x841)][_0x1b7150(0x392)][_0x1b7150(0x7f7)](this,_0x47c803,_0x6c648b),!this[_0x1b7150(0x3eb)]()&&_0x47c803&&_0x47c803[_0x1b7150(0x961)]()[_0x1b7150(0x3ae)]>0x0&&this[_0x1b7150(0x4ba)]('MP',_0x47c803,_0x47c803[_0x1b7150(0x961)]()[_0x1b7150(0x3ae)]);},Game_Action[_0x553167(0x22b)]['performLifeSteal']=function(_0x5e123e,_0xccf7cc,_0x136547){const _0xba67d2=_0x553167;_0x5e123e=_0x5e123e[_0xba67d2(0x512)]()['trim']();const _0x2ae4c7=this[_0xba67d2(0x5ac)](_0x5e123e,_0xccf7cc);if(_0x2ae4c7<=0x0)return;const _0x3a494c=Math[_0xba67d2(0x462)](_0x136547*_0x2ae4c7);if(_0x3a494c<=0x0)return;let _0x1cb979=this[_0xba67d2(0x133)]();if(this[_0xba67d2(0xa0e)])_0x1cb979=this[_0xba67d2(0xa0e)];const _0x94fab5=_0xccf7cc['isNegativeLifeSteal'](_0x5e123e)?-0x1:0x1;if(_0x5e123e==='HP')_0x1cb979[_0xba67d2(0x725)](_0x94fab5*_0x3a494c);if(_0x5e123e==='MP')_0x1cb979[_0xba67d2(0x3e4)](_0x94fab5*_0x3a494c);},Game_Action[_0x553167(0x22b)][_0x553167(0x5ac)]=function(_0x58da2e,_0x18b3a9){const _0x5a7daa=_0x553167;if(this[_0x5a7daa(0x4b0)](_0x58da2e))return 0x0;if(this['subject']()['isDisarmLifeSteal'](_0x58da2e))return 0x0;if(_0x18b3a9[_0x5a7daa(0x2d1)](_0x58da2e))return 0x0;let _0x1e5716=0x0;return _0x1e5716+=this[_0x5a7daa(0x821)](_0x58da2e),_0x1e5716+=this[_0x5a7daa(0x133)]()[_0x5a7daa(0x5ac)](_0x58da2e,this[_0x5a7daa(0x58c)]()['hitType']),_0x1e5716['clamp'](0x0,0x1);},Game_Action[_0x553167(0x22b)]['isCancelLifeSteal']=function(_0xc30e16){const _0x431fe6=_0x553167;_0xc30e16=_0xc30e16['toUpperCase']()[_0x431fe6(0x976)]();const _0x4fd380=VisuMZ[_0x431fe6(0x841)][_0x431fe6(0xa91)],_0x5a2fad=this[_0x431fe6(0x58c)]()[_0x431fe6(0x645)]||'';if(_0x5a2fad[_0x431fe6(0x750)](_0x4fd380['cancelLifeSteal']))return!![];if(_0xc30e16==='HP'&&_0x5a2fad[_0x431fe6(0x750)](_0x4fd380[_0x431fe6(0xf7)]))return!![];if(_0xc30e16==='MP'&&_0x5a2fad['match'](_0x4fd380[_0x431fe6(0x2b2)]))return!![];return![];},Game_Action[_0x553167(0x22b)][_0x553167(0x821)]=function(_0x154932){const _0x2b269e=_0x553167,_0x1d0bd4=VisuMZ[_0x2b269e(0x841)][_0x2b269e(0xa91)],_0x5ae788=this[_0x2b269e(0x58c)]()[_0x2b269e(0x645)]||'';_0x154932=_0x154932['toUpperCase']()[_0x2b269e(0x976)]();const _0x2ee100=_0x5ae788[_0x2b269e(0x750)](_0x1d0bd4[_0x2b269e(0x471)]);if(_0x2ee100)for(const _0x27c6ba of _0x2ee100){_0x27c6ba[_0x2b269e(0x750)](_0x1d0bd4[_0x2b269e(0x471)]);const _0x577070=String(RegExp['$1'])[_0x2b269e(0x512)]()[_0x2b269e(0x976)](),_0xec6c1c=Number(RegExp['$2'])*0.01;if(_0x577070!==_0x154932)continue;return _0xec6c1c;}return 0x0;},Game_BattlerBase['prototype'][_0x553167(0x5ac)]=function(_0x137c39,_0x1a22bd){const _0x49686f=_0x553167,_0x6ae062=VisuMZ['BattleCore'][_0x49686f(0xa91)];let _0x546bb7=0x0;_0x137c39=_0x137c39[_0x49686f(0x512)]()['trim']();for(const _0x596348 of this[_0x49686f(0x446)]()){if(!_0x596348)continue;const _0x2085bf=_0x596348[_0x49686f(0x645)]||'',_0x42bffb=_0x2085bf[_0x49686f(0x750)](_0x6ae062[_0x49686f(0xbd1)]);if(_0x42bffb)for(const _0x5ad72b of _0x42bffb){_0x5ad72b[_0x49686f(0x750)](_0x6ae062[_0x49686f(0xbd1)]);const _0x12904b=String(RegExp['$1'])[_0x49686f(0x512)]()['trim'](),_0x2d52f5=String(RegExp['$2']),_0xc1e4ae=Number(RegExp['$3'])*0.01;if(_0x12904b!==_0x137c39)continue;if(_0x1a22bd===Game_Action[_0x49686f(0x731)]&&_0x2d52f5['match'](/CERTAIN/i))_0x546bb7+=_0xc1e4ae;else{if(_0x1a22bd===Game_Action[_0x49686f(0xa49)]&&_0x2d52f5[_0x49686f(0x750)](/PHYS/i))_0x546bb7+=_0xc1e4ae;else _0x1a22bd===Game_Action[_0x49686f(0x7a3)]&&_0x2d52f5[_0x49686f(0x750)](/MAGIC/i)&&(_0x546bb7+=_0xc1e4ae);}}}return _0x546bb7;},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x2fc)]=function(_0x4a1f4d){const _0x188971=_0x553167;_0x4a1f4d=_0x4a1f4d[_0x188971(0x512)]()[_0x188971(0x976)]();const _0x4845dc=VisuMZ[_0x188971(0x841)][_0x188971(0xa91)];for(const _0x5e8f68 of this[_0x188971(0x446)]()){if(!_0x5e8f68)continue;const _0x31276e=_0x5e8f68[_0x188971(0x645)]||'';if(_0x31276e[_0x188971(0x750)](_0x4845dc[_0x188971(0x4ec)]))return!![];if(_0x4a1f4d==='HP'&&_0x31276e[_0x188971(0x750)](_0x4845dc['disarmHpLifeSteal']))return!![];if(_0x4a1f4d==='MP'&&_0x31276e[_0x188971(0x750)](_0x4845dc[_0x188971(0x47b)]))return!![];}return![];},Game_BattlerBase[_0x553167(0x22b)]['isNegativeLifeSteal']=function(_0x27e4cf){const _0x2ecc30=_0x553167;_0x27e4cf=_0x27e4cf[_0x2ecc30(0x512)]()[_0x2ecc30(0x976)]();const _0x14bdc5=VisuMZ[_0x2ecc30(0x841)][_0x2ecc30(0xa91)];for(const _0x3f5dfb of this[_0x2ecc30(0x446)]()){if(!_0x3f5dfb)continue;const _0x23cd80=_0x3f5dfb[_0x2ecc30(0x645)]||'';if(_0x23cd80[_0x2ecc30(0x750)](_0x14bdc5[_0x2ecc30(0x240)]))return!![];if(_0x27e4cf==='HP'&&_0x23cd80['match'](_0x14bdc5[_0x2ecc30(0x593)]))return!![];if(_0x27e4cf==='MP'&&_0x23cd80[_0x2ecc30(0x750)](_0x14bdc5[_0x2ecc30(0x68f)]))return!![];}return![];},Game_BattlerBase[_0x553167(0x22b)]['isGuardLifeSteal']=function(_0x4f87fb){const _0x191326=_0x553167;_0x4f87fb=_0x4f87fb[_0x191326(0x512)]()['trim']();const _0x94653b=VisuMZ['BattleCore'][_0x191326(0xa91)];for(const _0xda154d of this[_0x191326(0x446)]()){if(!_0xda154d)continue;const _0x3501a8=_0xda154d['note']||'';if(_0x3501a8[_0x191326(0x750)](_0x94653b[_0x191326(0x1f7)]))return!![];if(_0x4f87fb==='HP'&&_0x3501a8[_0x191326(0x750)](_0x94653b[_0x191326(0x576)]))return!![];if(_0x4f87fb==='MP'&&_0x3501a8[_0x191326(0x750)](_0x94653b[_0x191326(0x35f)]))return!![];}return![];},VisuMZ[_0x553167(0x841)]['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x553167(0x22b)]['initMembers'],Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x23a)]=function(){const _0x6c5788=_0x553167;VisuMZ['BattleCore'][_0x6c5788(0xbe2)][_0x6c5788(0x7f7)](this),this[_0x6c5788(0x54e)]();},Game_BattlerBase[_0x553167(0x22b)]['initMembersBattleCore']=function(){const _0x531a8b=_0x553167;this[_0x531a8b(0x60e)]=![];},VisuMZ[_0x553167(0x841)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x215)],Game_BattlerBase['prototype']['refresh']=function(){const _0x224cc3=_0x553167;this[_0x224cc3(0x6c1)]={},VisuMZ[_0x224cc3(0x841)][_0x224cc3(0x3c3)][_0x224cc3(0x7f7)](this);},Game_BattlerBase[_0x553167(0x22b)]['checkCacheKey']=function(_0x2fef28){const _0x40924b=_0x553167;return this['_cache']=this[_0x40924b(0x6c1)]||{},this['_cache'][_0x2fef28]!==undefined;},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x1e1)]=function(){const _0x3f2b42=_0x553167;if(this[_0x3f2b42(0x6c1)][_0x3f2b42(0x1e1)]!==undefined)return this[_0x3f2b42(0x6c1)]['hardDamageCap'];const _0x2d4d35=/<DAMAGE CAP:[ ](\d+)>/i,_0x33424d=this[_0x3f2b42(0x446)]()[_0x3f2b42(0x5c6)](_0x2a8eb1=>_0x2a8eb1&&_0x2a8eb1[_0x3f2b42(0x645)][_0x3f2b42(0x750)](_0x2d4d35)?Number(RegExp['$1']):0x0);let _0x75d74b=_0x33424d[_0x3f2b42(0x635)]>0x0?Math[_0x3f2b42(0x4c1)](..._0x33424d):0x0;if(_0x75d74b<=0x0)_0x75d74b=VisuMZ['BattleCore'][_0x3f2b42(0x309)][_0x3f2b42(0x2e0)][_0x3f2b42(0x355)];return this[_0x3f2b42(0x6c1)][_0x3f2b42(0x1e1)]=_0x75d74b,this['_cache'][_0x3f2b42(0x1e1)];},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x942)]=function(){const _0x159b56=_0x553167;if(this[_0x159b56(0x6c1)][_0x159b56(0x13c)]!==undefined)return this[_0x159b56(0x6c1)]['softDamageCap'];let _0x3f84be=VisuMZ[_0x159b56(0x841)][_0x159b56(0x309)][_0x159b56(0x2e0)]['DefaultSoftCap'];const _0x45aaa2=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x5d1c0a=this[_0x159b56(0x446)]()['map'](_0x31297b=>_0x31297b&&_0x31297b[_0x159b56(0x645)]['match'](_0x45aaa2)?Number(RegExp['$1'])/0x64:0x0);return _0x3f84be=_0x5d1c0a[_0x159b56(0x4da)]((_0x54e204,_0x25702f)=>_0x54e204+_0x25702f,_0x3f84be),this['_cache'][_0x159b56(0x13c)]=_0x3f84be,this[_0x159b56(0x6c1)][_0x159b56(0x13c)][_0x159b56(0xabe)](0.01,0x1);},VisuMZ[_0x553167(0x841)][_0x553167(0x290)]=Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x3a4)],Game_BattlerBase[_0x553167(0x22b)]['die']=function(){const _0x21c3a4=_0x553167;VisuMZ[_0x21c3a4(0x841)][_0x21c3a4(0x290)][_0x21c3a4(0x7f7)](this),SceneManager[_0x21c3a4(0x2c2)]()&&(this[_0x21c3a4(0x188)]('dead'),this[_0x21c3a4(0x393)]=undefined);},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x8d6)]=function(){const _0x53fd34=_0x553167;if(!SceneManager[_0x53fd34(0x2c2)]())return null;if(!SceneManager['_scene'][_0x53fd34(0x306)])return null;return SceneManager['_scene']['_spriteset'][_0x53fd34(0x97d)](this);},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0xb3b)]=function(){const _0x4b69ee=_0x553167;return VisuMZ['BattleCore'][_0x4b69ee(0x309)][_0x4b69ee(0x5d0)][_0x4b69ee(0xa80)];},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x264)]=function(){const _0x16d28b=_0x553167;return VisuMZ['BattleCore'][_0x16d28b(0x309)]['Actor'][_0x16d28b(0x6d3)];},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x110)]=function(){const _0x11f8c0=_0x553167;return this[_0x11f8c0(0x8fb)]&&this[_0x11f8c0(0x8fb)]()?VisuMZ[_0x11f8c0(0x841)][_0x11f8c0(0x309)][_0x11f8c0(0x5d0)]['Shadow']:VisuMZ['BattleCore'][_0x11f8c0(0x309)]['Enemy'][_0x11f8c0(0x48b)];},Game_BattlerBase['prototype'][_0x553167(0x9b8)]=function(){return!![];},Game_BattlerBase['prototype']['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0xab6)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x553167(0x6d9)]=function(_0x281638){const _0x361052=_0x553167;if(!_0x281638)return 0x0;let _0x435a72=0x0;const _0x5545a9=_0x281638[_0x361052(0x645)];return _0x5545a9[_0x361052(0x750)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x435a72+=Number(RegExp['$1'])),_0x5545a9['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x435a72+=Number(RegExp['$1'])),_0x435a72;},Game_BattlerBase[_0x553167(0x22b)]['createBattleUIOffsetY']=function(_0x50b8aa){const _0x8baa31=_0x553167;if(!_0x50b8aa)return 0x0;let _0x514c7e=0x0;const _0x546a1e=_0x50b8aa[_0x8baa31(0x645)];return _0x546a1e['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x514c7e+=Number(RegExp['$1'])),_0x546a1e[_0x8baa31(0x750)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x514c7e+=Number(RegExp['$2'])),_0x514c7e;},VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']=Game_BattlerBase['prototype'][_0x553167(0x4bc)],Game_BattlerBase['prototype'][_0x553167(0x4bc)]=function(_0x332eb7){const _0x3d4297=_0x553167;if(_0x332eb7===this[_0x3d4297(0x154)]()&&this['isImmortal']())return!![];return VisuMZ['BattleCore'][_0x3d4297(0x95c)][_0x3d4297(0x7f7)](this,_0x332eb7);},Game_BattlerBase[_0x553167(0x22b)]['isImmortal']=function(){const _0x456796=_0x553167;return this[_0x456796(0x60e)];},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x9f1)]=function(_0x52f595){const _0x534c38=_0x553167;_0x52f595?this[_0x534c38(0x271)]():this[_0x534c38(0x4d8)]();},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x271)]=function(){const _0x48906a=_0x553167;if(this[_0x48906a(0x82f)]())return;this[_0x48906a(0x60e)]=!![],this[_0x48906a(0x7a7)]=![];},Game_BattlerBase['prototype'][_0x553167(0x4d8)]=function(){const _0x497246=_0x553167,_0x17b7b1=this[_0x497246(0x788)]();this[_0x497246(0x60e)]=![],_0x17b7b1&&this[_0x497246(0x7a7)]&&this['die'](),this['_deathStateApplied']=![],this[_0x497246(0x215)](),this[_0x497246(0x82f)]()&&_0x17b7b1&&(this['performCollapse'](),this[_0x497246(0x55c)]());},VisuMZ[_0x553167(0x841)][_0x553167(0xb0a)]=Game_Action[_0x553167(0x22b)]['numRepeats'],Game_Action['prototype'][_0x553167(0xbc1)]=function(){const _0x55742f=_0x553167;return this[_0x55742f(0x58c)]()?VisuMZ[_0x55742f(0x841)][_0x55742f(0xb0a)][_0x55742f(0x7f7)](this):0x0;},VisuMZ['BattleCore'][_0x553167(0x153)]=Game_Action[_0x553167(0x22b)][_0x553167(0x614)],Game_Action['prototype'][_0x553167(0x614)]=function(){const _0x32f5e4=_0x553167;this['subject']()&&this['subject']()['canAttack']()?VisuMZ['BattleCore'][_0x32f5e4(0x153)][_0x32f5e4(0x7f7)](this):this[_0x32f5e4(0xa25)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x3c5)]=Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x4bb)],Game_BattlerBase[_0x553167(0x22b)]['canAttack']=function(){const _0x4508b6=_0x553167;if(!this[_0x4508b6(0xa42)]())return![];return VisuMZ[_0x4508b6(0x841)][_0x4508b6(0x3c5)][_0x4508b6(0x7f7)](this);},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0xa42)]=function(){const _0x788d02=_0x553167;for(const _0x19d0b7 of this[_0x788d02(0x446)]()){if(!_0x19d0b7)continue;if(_0x19d0b7[_0x788d02(0x645)][_0x788d02(0x750)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x553167(0x917)]=Game_Action[_0x553167(0x22b)][_0x553167(0x388)],Game_Action[_0x553167(0x22b)]['setGuard']=function(){this['subject']()['canGuard']()&&VisuMZ['BattleCore']['Game_Action_setGuard']['call'](this);},VisuMZ[_0x553167(0x841)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x553167(0x22b)]['canGuard'],Game_BattlerBase['prototype'][_0x553167(0x3ff)]=function(){const _0xc247d7=_0x553167;if(!this[_0xc247d7(0x732)]())return![];return VisuMZ['BattleCore'][_0xc247d7(0x53e)]['call'](this);},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x732)]=function(){const _0x38a8f4=_0x553167;for(const _0x8d786c of this[_0x38a8f4(0x446)]()){if(!_0x8d786c)continue;if(_0x8d786c[_0x38a8f4(0x645)][_0x38a8f4(0x750)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0xbe6)]=function(){const _0x31d57a=_0x553167;for(const _0x4146df of this[_0x31d57a(0x446)]()){if(!_0x4146df)continue;if(_0x4146df['note'][_0x31d57a(0x750)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x553167(0x841)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x553167(0x22b)]['meetsUsableItemConditions'],Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x5a6)]=function(_0x35d3eb){const _0x1c0931=_0x553167;if(_0x35d3eb&&_0x35d3eb['note'][_0x1c0931(0x750)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x96d8f6=this[_0x1c0931(0xa3e)]()[_0x1c0931(0x58e)]();if(_0x96d8f6[_0x1c0931(0x635)]===0x1&&_0x96d8f6[0x0]===this)return![];}return VisuMZ[_0x1c0931(0x841)][_0x1c0931(0xbc4)][_0x1c0931(0x7f7)](this,_0x35d3eb);},Game_Battler[_0x553167(0x22b)][_0x553167(0x91c)]=function(){const _0x56667b=_0x553167;return VisuMZ['BattleCore'][_0x56667b(0x309)][_0x56667b(0x5d5)][_0x56667b(0x351)];},VisuMZ[_0x553167(0x841)]['Game_Battler_regenerateAll']=Game_Battler[_0x553167(0x22b)]['regenerateAll'],Game_Battler[_0x553167(0x22b)]['regenerateAll']=function(){const _0x865d3e=_0x553167;if(SceneManager[_0x865d3e(0x2c2)]()){if(BattleManager[_0x865d3e(0x981)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop[_0x865d3e(0x6d4)]()<=0x0)return;}}if(SceneManager[_0x865d3e(0x2c2)]()&&BattleManager[_0x865d3e(0x981)]()&&this[_0x865d3e(0xb73)]===Graphics[_0x865d3e(0xa32)])return;this[_0x865d3e(0xb73)]=Graphics[_0x865d3e(0xa32)],SceneManager['isSceneBattle']()&&this[_0x865d3e(0xab8)]('PreRegenerateJS'),VisuMZ['BattleCore'][_0x865d3e(0x451)][_0x865d3e(0x7f7)](this),SceneManager['isSceneBattle']()&&(this['regenerateAllBattleCore'](),this[_0x865d3e(0xab8)](_0x865d3e(0xa84)));},Game_Battler[_0x553167(0x22b)][_0x553167(0x117)]=function(){const _0x3833cc=_0x553167;if(SceneManager[_0x3833cc(0x2c2)]())for(const _0x3ad0e8 of this[_0x3833cc(0x446)]()){if(!_0x3ad0e8)continue;this['onRegeneratePlayStateAnimation'](_0x3ad0e8);}},Game_Battler['prototype'][_0x553167(0x3e9)]=function(_0x449437){const _0xbf76c8=_0x553167;if(!Imported[_0xbf76c8(0x28b)])return;if(!SceneManager[_0xbf76c8(0x2c2)]())return;if(this['isDead']())return;if(this[_0xbf76c8(0x4f4)]())return;if(_0x449437[_0xbf76c8(0x645)][_0xbf76c8(0x750)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x3b82ce=Number(RegExp['$1']);$gameTemp[_0xbf76c8(0x17d)]([this],_0x3b82ce,![],![]);}},VisuMZ[_0x553167(0x841)][_0x553167(0xbf9)]=Game_Battler[_0x553167(0x22b)][_0x553167(0x9c2)],Game_Battler[_0x553167(0x22b)]['startTpbTurn']=function(){const _0xbe257e=_0x553167;this['processBattleCoreJS'](_0xbe257e(0xba8)),VisuMZ[_0xbe257e(0x841)][_0xbe257e(0xbf9)][_0xbe257e(0x7f7)](this),this[_0xbe257e(0xab8)](_0xbe257e(0x9f4));},VisuMZ[_0x553167(0x841)]['Game_Battler_onTurnEnd']=Game_Battler['prototype']['onTurnEnd'],Game_Battler[_0x553167(0x22b)][_0x553167(0x820)]=function(){const _0x52481f=_0x553167;this[_0x52481f(0xab8)](_0x52481f(0x571)),VisuMZ[_0x52481f(0x841)][_0x52481f(0x2ba)][_0x52481f(0x7f7)](this),VisuMZ[_0x52481f(0x841)]['Settings'][_0x52481f(0x5d5)]['SyncBuffExpire']&&this['removeBuffsAuto'](),this['processBattleCoreJS'](_0x52481f(0x8af));},Game_Battler[_0x553167(0x22b)][_0x553167(0xab8)]=function(_0x1a06fc){const _0x36f61b=_0x553167;if(this['_tempBattler']||this[_0x36f61b(0xa8d)])return;const _0xa57a41=VisuMZ[_0x36f61b(0x841)][_0x36f61b(0x309)][_0x36f61b(0x5d5)];if(_0xa57a41[_0x1a06fc])_0xa57a41[_0x1a06fc][_0x36f61b(0x7f7)](this);for(const _0x2952e9 of this['traitObjects']()){if(!_0x2952e9)continue;key=VisuMZ['BattleCore'][_0x36f61b(0x8f7)](_0x2952e9,_0x1a06fc),VisuMZ[_0x36f61b(0x841)]['JS'][key]&&VisuMZ[_0x36f61b(0x841)]['JS'][key]['call'](this,this,this,_0x2952e9,0x0);}},Game_Battler[_0x553167(0x22b)]['chantStyle']=function(){const _0x171ab9=_0x553167;return VisuMZ[_0x171ab9(0x841)][_0x171ab9(0x309)][_0x171ab9(0x5d0)]['ChantStyle']||![];},Game_Battler['prototype'][_0x553167(0x6ec)]=function(){const _0x56797f=_0x553167;if(this[_0x56797f(0x40d)]()){if(this['chantStyle']()){if(this[_0x56797f(0x370)][_0x56797f(0x67b)](_0x187771=>_0x187771[_0x56797f(0x58c)]()&&_0x187771[_0x56797f(0x7be)]()))return!![];}else{if(this[_0x56797f(0x370)][_0x56797f(0x67b)](_0xf62d00=>_0xf62d00[_0x56797f(0x58c)]()&&_0xf62d00[_0x56797f(0x864)]()))return!![];}}if(BattleManager[_0x56797f(0x981)]()&&this[_0x56797f(0x620)]===_0x56797f(0xafb))return this[_0x56797f(0x9de)]()?this['currentAction']()&&this[_0x56797f(0xa59)]()['item']()&&this[_0x56797f(0xa59)]()[_0x56797f(0x7be)]():this[_0x56797f(0xa59)]()&&this[_0x56797f(0xa59)]()[_0x56797f(0x58c)]()&&this[_0x56797f(0xa59)]()['isMagicSkill']();return![];},Game_Battler[_0x553167(0x22b)][_0x553167(0x654)]=function(){const _0x515036=_0x553167;if(BattleManager[_0x515036(0x981)]()&&this['_tpbState']==='casting')return this[_0x515036(0x9de)]()?this[_0x515036(0xa59)]()&&this[_0x515036(0xa59)]()[_0x515036(0x58c)]()&&!this[_0x515036(0xa59)]()['isMagical']():this[_0x515036(0xa59)]()&&this['currentAction']()[_0x515036(0x58c)]()&&!this[_0x515036(0xa59)]()[_0x515036(0x864)]();return![];},VisuMZ['BattleCore'][_0x553167(0xb23)]=Game_Battler['prototype'][_0x553167(0x92d)],Game_Battler[_0x553167(0x22b)]['clearDamagePopup']=function(){const _0x267f39=_0x553167;VisuMZ[_0x267f39(0x841)]['Game_Battler_clearDamagePopup'][_0x267f39(0x7f7)](this),this[_0x267f39(0xaf8)]=[];},Game_Battler['prototype'][_0x553167(0xaea)]=function(){const _0x48d30b=_0x553167;if(!this[_0x48d30b(0xaf8)])this[_0x48d30b(0x92d)]();return this['_damagePopupArray'][_0x48d30b(0x635)]>0x0;},Game_Battler[_0x553167(0x22b)][_0x553167(0x951)]=function(){const _0x368195=_0x553167;if(!SceneManager[_0x368195(0x2c2)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x368195(0xaf8)])this[_0x368195(0x92d)]();this[_0x368195(0x1fe)]();const _0x2b8e24=this[_0x368195(0x8d6)]();if(_0x2b8e24)_0x2b8e24['setupDamagePopup']();},Game_Battler['prototype'][_0x553167(0x1fe)]=function(){const _0x3bb23f=_0x553167,_0x1c98c5=this[_0x3bb23f(0x961)]();if(_0x1c98c5[_0x3bb23f(0x715)]||_0x1c98c5['evaded']){const _0x2d8db5=JsonEx[_0x3bb23f(0x323)](_0x1c98c5);_0x2d8db5[_0x3bb23f(0xff)]=![],_0x2d8db5['mpDamage']=0x0,this[_0x3bb23f(0xaf8)][_0x3bb23f(0x9d2)](_0x2d8db5);if(!_0x1c98c5[_0x3bb23f(0x523)]&&!_0x1c98c5[_0x3bb23f(0x3ae)])return;}if(_0x1c98c5['hpAffected']){const _0x3b5b16=JsonEx[_0x3bb23f(0x323)](_0x1c98c5);_0x3b5b16[_0x3bb23f(0x715)]=![],_0x3b5b16['evaded']=![],_0x3b5b16[_0x3bb23f(0x3ae)]=0x0,this[_0x3bb23f(0xaf8)][_0x3bb23f(0x9d2)](_0x3b5b16);}if(_0x1c98c5[_0x3bb23f(0x3ae)]!==0x0){const _0x5ed801=JsonEx[_0x3bb23f(0x323)](_0x1c98c5);_0x5ed801[_0x3bb23f(0x715)]=![],_0x5ed801[_0x3bb23f(0x57e)]=![],_0x5ed801[_0x3bb23f(0xff)]=![],this['_damagePopupArray'][_0x3bb23f(0x9d2)](_0x5ed801);}},Game_Battler['prototype'][_0x553167(0x5f0)]=function(){const _0x1eb9e5=_0x553167;if(!this['_damagePopupArray'])this[_0x1eb9e5(0x92d)]();return VisuMZ[_0x1eb9e5(0x841)][_0x1eb9e5(0x309)][_0x1eb9e5(0x2e0)][_0x1eb9e5(0x4ff)]?this[_0x1eb9e5(0xaf8)][_0x1eb9e5(0x906)]():this['_damagePopupArray'][_0x1eb9e5(0xa87)]();},Game_Battler[_0x553167(0x22b)][_0x553167(0xa00)]=function(_0x26d274,_0x28150c){const _0x2fd4a8=_0x553167;if(!SceneManager[_0x2fd4a8(0x2c2)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x2fd4a8(0x8d6)]())return;if(_0x26d274[_0x2fd4a8(0x635)]<=0x0)return;_0x28150c=_0x28150c||{},_0x28150c[_0x2fd4a8(0x3be)]=_0x28150c[_0x2fd4a8(0x3be)]||_0x2fd4a8(0x508),_0x28150c[_0x2fd4a8(0x4e1)]=_0x28150c[_0x2fd4a8(0x4e1)]||[0x0,0x0,0x0,0x0],_0x28150c[_0x2fd4a8(0xb15)]=_0x28150c[_0x2fd4a8(0xb15)]||0x0,this[_0x2fd4a8(0x8d6)]()[_0x2fd4a8(0xa00)](_0x26d274,_0x28150c);},Game_Battler['prototype'][_0x553167(0x5bb)]=function(_0x2a9500,_0x38d4ba,_0x208309){const _0x35d738=_0x553167;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x35d738(0x8d6)]())return;if(_0x38d4ba['length']<=0x0)return;_0x208309=_0x208309||{},_0x208309[_0x35d738(0x3be)]=_0x208309[_0x35d738(0x3be)]||'#ffffff',_0x208309[_0x35d738(0x4e1)]=_0x208309[_0x35d738(0x4e1)]||[0x0,0x0,0x0,0x0],_0x208309[_0x35d738(0xb15)]=_0x208309[_0x35d738(0xb15)]||0x0,this[_0x35d738(0x8d6)]()[_0x35d738(0x5bb)](_0x2a9500,_0x38d4ba,_0x208309);},Game_Battler['prototype']['notFocusValid']=function(){const _0x106c4f=_0x553167;if(this['isHidden']())return![];if(this['isAlive']()&&this[_0x106c4f(0x254)]())return!![];if(this['isEnemy']()&&this[_0x106c4f(0x661)]()){if(this['isDead']()&&this['allowCollapse']())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x553167(0x841)][_0x553167(0xae9)]=Game_Battler['prototype'][_0x553167(0x7c1)],Game_Battler[_0x553167(0x22b)][_0x553167(0x7c1)]=function(){const _0x52175d=_0x553167;VisuMZ['BattleCore'][_0x52175d(0xae9)]['call'](this),this['clearFreezeMotion']();},Game_Battler['prototype'][_0x553167(0xbd4)]=function(){return!![];},Game_Battler[_0x553167(0x22b)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x553167(0x841)][_0x553167(0x5e4)]=Game_Battler['prototype'][_0x553167(0x855)],Game_Battler[_0x553167(0x22b)]['onBattleStart']=function(_0x30ea27){const _0x4d0932=_0x553167;VisuMZ[_0x4d0932(0x841)][_0x4d0932(0x5e4)][_0x4d0932(0x7f7)](this,_0x30ea27),this[_0x4d0932(0x7d4)](_0x30ea27),this['clearDamagePopup']();},Game_Battler[_0x553167(0x22b)][_0x553167(0x7d4)]=function(_0x3e0e25){const _0x371943=_0x553167;this[_0x371943(0x7d7)](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x553167(0x841)][_0x553167(0x920)]=Game_Battler[_0x553167(0x22b)][_0x553167(0x960)],Game_Battler[_0x553167(0x22b)]['onBattleEnd']=function(){const _0x2f9843=_0x553167;VisuMZ[_0x2f9843(0x841)][_0x2f9843(0x920)][_0x2f9843(0x7f7)](this),this[_0x2f9843(0x1d2)]();},Game_Battler[_0x553167(0x22b)][_0x553167(0x1d2)]=function(){const _0x153eb4=_0x553167;this[_0x153eb4(0x453)]=undefined,this[_0x153eb4(0xa6c)]=undefined;},VisuMZ[_0x553167(0x841)][_0x553167(0x1d6)]=Game_Battler[_0x553167(0x22b)][_0x553167(0x977)],Game_Battler[_0x553167(0x22b)]['performActionStart']=function(_0x2763f4){const _0x478971=_0x553167;VisuMZ['BattleCore'][_0x478971(0x1d6)][_0x478971(0x7f7)](this,_0x2763f4);if(!_0x2763f4[_0x478971(0x452)]()){const _0x1f4df1=this[_0x478971(0x8d6)]();_0x1f4df1&&_0x1f4df1[_0x478971(0xbb4)]();}this[_0x478971(0x7d7)](![]);},Game_Battler[_0x553167(0x22b)][_0x553167(0xbbd)]=function(){const _0x4ba15f=_0x553167;this['_performDamageMotion']=undefined;const _0x2d8cfc=this[_0x4ba15f(0x865)];this[_0x4ba15f(0x865)]=![];if(BattleManager['isActiveTpb']()&&this['isInputting']()){const _0x394936=this['battler']();if(_0x394936&&_0x2d8cfc)_0x394936['stepForward']();return;}const _0x1ddad1=this['battler']();if(_0x1ddad1)_0x1ddad1[_0x4ba15f(0x861)]();this[_0x4ba15f(0x7d7)](![]),this[_0x4ba15f(0x55c)]();},Game_Battler[_0x553167(0x22b)][_0x553167(0x7fb)]=function(_0x5287ef){const _0x1b22f8=_0x553167;if(_0x5287ef[_0x1b22f8(0x98d)]())this['performAttack']();else{if(_0x5287ef[_0x1b22f8(0x452)]())this[_0x1b22f8(0x188)]('guard');else{if(_0x5287ef['isMagical']())this['requestMotion'](_0x1b22f8(0x9f9));else{if(_0x5287ef[_0x1b22f8(0x2bb)]())[0x1,0x2,0x5,0x6][_0x1b22f8(0xb5d)](_0x5287ef[_0x1b22f8(0x58c)]()[_0x1b22f8(0x2c7)][_0x1b22f8(0x484)])?this['performAttack']():this['requestMotion'](_0x1b22f8(0x8b0));else _0x5287ef[_0x1b22f8(0x3f8)]()&&this[_0x1b22f8(0x188)](_0x1b22f8(0x58c));}}}},Game_Battler[_0x553167(0x22b)][_0x553167(0x23d)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x553167(0x22b)]['getAttackWeaponAnimationId']=function(){const _0x4e1ac1=_0x553167,_0x3de91a=this[_0x4e1ac1(0x23d)]();return _0x3de91a?_0x3de91a['weaponImageId']:0x0;},Game_Battler['prototype'][_0x553167(0x22e)]=function(_0x5da425){const _0x17d996=_0x553167;if(!$gameSystem[_0x17d996(0x196)]())return;const _0x465fc7=this['battler'](),_0x4ccad9=_0x5da425[_0x17d996(0x8d6)]();if(!_0x465fc7||!_0x4ccad9)return;const _0x5a8382=_0x4ccad9[_0x17d996(0x649)],_0x2f68ae=_0x4ccad9['_baseY'];this[_0x17d996(0x7a8)](_0x5a8382,_0x2f68ae,0x0,![],'Linear',-0x1),_0x465fc7['updatePosition']();const _0x74940c=VisuMZ['BattleCore'][_0x17d996(0x309)][_0x17d996(0x740)];let _0x4bc89b=(_0x4ccad9[_0x17d996(0x9ce)]+_0x465fc7['width'])/0x2;_0x4bc89b*=this['isActor']()?0x1:-0x1;let _0x27d3fe=_0x74940c['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x5da425[_0x17d996(0x514)](_0x4bc89b,_0x27d3fe,0x0,![],'Linear'),_0x4ccad9[_0x17d996(0x1c8)]();},Game_Battler['prototype'][_0x553167(0x188)]=function(_0x1cba91){const _0x19c1c1=_0x553167;if(SceneManager['isSceneBattle']()){const _0x34f815=this['battler']();_0x34f815&&(_0x34f815[_0x19c1c1(0xb75)](_0x1cba91),[_0x19c1c1(0x531),'thrust',_0x19c1c1(0x450)][_0x19c1c1(0xb5d)](_0x1cba91)&&this[_0x19c1c1(0xa82)]());}this[_0x19c1c1(0x695)]();},Game_Battler[_0x553167(0x22b)][_0x553167(0xa82)]=function(){},Game_Battler[_0x553167(0x22b)][_0x553167(0x574)]=function(_0xd72b52){const _0x11028d=_0x553167;if(SceneManager[_0x11028d(0x2c2)]()){const _0x3fbed9=this[_0x11028d(0x8d6)]();if(_0x3fbed9)_0x3fbed9[_0x11028d(0x9e8)](_0xd72b52);}},Game_Battler[_0x553167(0x22b)]['startAttackWeaponAnimation']=function(){const _0x26d198=_0x553167;if(SceneManager[_0x26d198(0x2c2)]()){const _0x42f0cd=this['getAttackWeaponAnimationId']();this[_0x26d198(0x574)](_0x42f0cd);}},Game_Battler['prototype']['performCastAnimation']=function(_0x301088,_0x28dc50){const _0x307f68=_0x553167;if(!_0x301088)return;if(!_0x301088['item']())return;if(_0x301088[_0x307f68(0x98d)]())return;if(_0x301088[_0x307f68(0x452)]())return;if(_0x301088[_0x307f68(0x3f8)]())return;if($gameTemp[_0x307f68(0x493)])return;let _0x372c4f=0x0;const _0x2e7162=VisuMZ[_0x307f68(0x841)]['Settings']['ActionSequence'],_0x508bb5=_0x301088['item']()[_0x307f68(0x645)];if(_0x508bb5[_0x307f68(0x750)](/<CAST ANIMATION: (\d+)>/i))_0x372c4f=Number(RegExp['$1']);else{if(_0x508bb5[_0x307f68(0x750)](/<NO CAST ANIMATION>/i))return;else{if(_0x301088[_0x307f68(0xaa7)]())_0x372c4f=_0x2e7162['CastCertain'];else{if(_0x301088['isPhysical']())_0x372c4f=_0x2e7162[_0x307f68(0x792)];else _0x301088[_0x307f68(0x7be)]()&&(_0x372c4f=_0x2e7162[_0x307f68(0x45e)]);}}}_0x372c4f>0x0&&$gameTemp[_0x307f68(0x59c)]([this],_0x372c4f,!!_0x28dc50);},Game_Battler[_0x553167(0x22b)]['performReflection']=function(){const _0x37394a=_0x553167;SoundManager[_0x37394a(0x79e)]();let _0x464aa2=VisuMZ[_0x37394a(0x841)][_0x37394a(0x309)][_0x37394a(0x740)][_0x37394a(0x378)];_0x464aa2>0x0&&(Imported[_0x37394a(0x28b)]?$gameTemp['requestFauxAnimation']([this],_0x464aa2):$gameTemp[_0x37394a(0x59c)]([this],_0x464aa2));},Game_Battler[_0x553167(0x22b)]['isActiveTpbReady']=function(){const _0x4a7bf0=_0x553167;if(!$gameSystem[_0x4a7bf0(0x196)]())return![];if(!BattleManager[_0x4a7bf0(0x619)]())return![];if(!this[_0x4a7bf0(0x788)]())return![];if(this[_0x4a7bf0(0x70d)]())return!![];if(this[_0x4a7bf0(0x19e)]())return!![];if(this[_0x4a7bf0(0x842)]>=0x1)return!![];return![];},VisuMZ[_0x553167(0x841)][_0x553167(0x955)]=Game_Battler['prototype']['performDamage'],Game_Battler[_0x553167(0x22b)][_0x553167(0x9c8)]=function(){const _0x245ef2=_0x553167;this['isActiveTpbReady']()&&(this[_0x245ef2(0x393)]=!![]),VisuMZ['BattleCore'][_0x245ef2(0x955)][_0x245ef2(0x7f7)](this),this[_0x245ef2(0xa50)](),this['performShakeFlinch']();},VisuMZ[_0x553167(0x841)][_0x553167(0x835)]=Game_Battler['prototype'][_0x553167(0x470)],Game_Battler[_0x553167(0x22b)][_0x553167(0x470)]=function(){const _0x268aa2=_0x553167;this[_0x268aa2(0x578)]()&&(this[_0x268aa2(0x393)]=!![]),VisuMZ[_0x268aa2(0x841)][_0x268aa2(0x835)]['call'](this),this[_0x268aa2(0xa50)]();},VisuMZ['BattleCore'][_0x553167(0x540)]=Game_Battler[_0x553167(0x22b)][_0x553167(0xac2)],Game_Battler[_0x553167(0x22b)][_0x553167(0xac2)]=function(){const _0x3942c0=_0x553167;this[_0x3942c0(0x578)]()&&(this[_0x3942c0(0x393)]=!![]),VisuMZ[_0x3942c0(0x841)][_0x3942c0(0x540)][_0x3942c0(0x7f7)](this),this['performFlinch']();},Game_Battler[_0x553167(0x22b)][_0x553167(0xa50)]=function(){const _0x4fbceb=_0x553167;if(!$gameSystem[_0x4fbceb(0x196)]())return;if(this['_flinched'])return;this[_0x4fbceb(0x865)]=!![];const _0x362cd7=this[_0x4fbceb(0x8d6)]();if(_0x362cd7)_0x362cd7[_0x4fbceb(0x39a)]();},Game_Battler[_0x553167(0x22b)]['performShakeFlinch']=function(){const _0x198fa8=_0x553167;if(!this[_0x198fa8(0xbd4)]())return;const _0x4957d7=VisuMZ[_0x198fa8(0x841)][_0x198fa8(0x309)][_0x198fa8(0x5d0)];if(!(_0x4957d7[_0x198fa8(0x1f9)]??![]))return;if(this[_0x198fa8(0x6ad)]<=0x0)return;const _0xb9a402=this[_0x198fa8(0x8d6)]();if(_0xb9a402){const _0xfd173f=this['_lastHpDamage'],_0x275b6c=(_0xfd173f/this[_0x198fa8(0x652)])[_0x198fa8(0xabe)](0.8,0x1),_0xf5484d=_0x4957d7[_0x198fa8(0x3d2)]??0x30,_0xf746f2=_0x275b6c*_0xf5484d;_0xb9a402['startShakeFlinch'](_0xf746f2,_0x275b6c);}},Game_Battler[_0x553167(0x22b)][_0x553167(0x55c)]=function(){const _0x39fdfc=_0x553167;if(this['isDead']()&&this[_0x39fdfc(0x728)]!==_0x39fdfc(0x3ea)){this[_0x39fdfc(0x188)](_0x39fdfc(0x3ea));return;}if(this[_0x39fdfc(0x82f)]()&&this[_0x39fdfc(0x728)]==='dead')return;if(!!this[_0x39fdfc(0x4b2)])return;if(this[_0x39fdfc(0x602)]()){if(!this[_0x39fdfc(0x187)]()&&this!==BattleManager[_0x39fdfc(0x1ef)]){if(this[_0x39fdfc(0x8d6)]())this[_0x39fdfc(0x8d6)]()[_0x39fdfc(0x1e7)]();}this[_0x39fdfc(0x695)]();return;}if(this[_0x39fdfc(0x728)]===_0x39fdfc(0x89f))return;if(this['_motionType']==='escape'&&!BattleManager['isInputting']())return;if(this[_0x39fdfc(0x728)]===_0x39fdfc(0x6fd)&&!BattleManager[_0x39fdfc(0x70d)]())return;this[_0x39fdfc(0x7c1)]();if(BattleManager[_0x39fdfc(0x619)]()&&this===BattleManager[_0x39fdfc(0x1ef)])return;if(this[_0x39fdfc(0x8d6)]()&&BattleManager[_0x39fdfc(0x70d)]()){this[_0x39fdfc(0x8d6)]()[_0x39fdfc(0x1e7)](),this[_0x39fdfc(0x695)]();return;}this[_0x39fdfc(0x8d6)]()&&BattleManager['isActiveTpb']()&&this!==BattleManager[_0x39fdfc(0x1ef)]&&this[_0x39fdfc(0x8d6)]()[_0x39fdfc(0x1e7)]();},Game_Enemy['prototype']['isDuringNonLoopingMotion']=function(){const _0x57e2cb=_0x553167;if(!this[_0x57e2cb(0x661)]())return![];const _0x509f09=this[_0x57e2cb(0x8d6)]();if(!_0x509f09)return![];const _0x33c64a=_0x509f09[_0x57e2cb(0x3f4)];if(!_0x33c64a)return![];const _0x321b13=_0x33c64a[_0x57e2cb(0x131)];return _0x321b13&&!_0x321b13[_0x57e2cb(0x679)];},Game_Battler[_0x553167(0x22b)][_0x553167(0xae2)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x553167(0x22b)][_0x553167(0x7d7)]=function(_0x1b19dc){const _0x403631=_0x553167;if(!$gameSystem[_0x403631(0x196)]())return;this[_0x403631(0x90f)]=_0x1b19dc;const _0x4c3214=this[_0x403631(0x8d6)]();if(_0x4c3214)_0x4c3214['updateFlip']();},Game_Battler[_0x553167(0x22b)][_0x553167(0x9d7)]=function(_0x2e307d,_0x1dd27a,_0x1ae496){const _0xfc1554=_0x553167;if(!$gameSystem[_0xfc1554(0x196)]())return;const _0x32b25b=this['battler']();if(!_0x32b25b)return;if(_0x2e307d===_0x32b25b[_0xfc1554(0x649)])return;let _0x258f0a=![];if(this['isActor']()){if(_0x2e307d>_0x32b25b['_baseX'])_0x258f0a=!![];if(_0x2e307d<_0x32b25b[_0xfc1554(0x649)])_0x258f0a=![];}else{if(this['isEnemy']()){if(_0x2e307d>_0x32b25b[_0xfc1554(0x649)])_0x258f0a=![];if(_0x2e307d<_0x32b25b[_0xfc1554(0x649)])_0x258f0a=!![];}};this[_0xfc1554(0x7d7)](_0x1ae496?!_0x258f0a:_0x258f0a),_0x32b25b[_0xfc1554(0x2c8)]();},Game_Battler[_0x553167(0x22b)][_0x553167(0x514)]=function(_0x38bb04,_0x47ca92,_0x32082e,_0x206723,_0x32cb03){const _0x289e58=_0x553167;if(!$gameSystem[_0x289e58(0x196)]())return;const _0x529e3a=this[_0x289e58(0x8d6)]();if(!_0x529e3a)return;if(_0x206723)this[_0x289e58(0x9d7)](_0x38bb04+_0x529e3a[_0x289e58(0x649)],_0x47ca92+_0x529e3a[_0x289e58(0x756)],![]);_0x38bb04+=_0x529e3a['_baseX']-_0x529e3a[_0x289e58(0x173)],_0x47ca92+=_0x529e3a[_0x289e58(0x756)]-_0x529e3a[_0x289e58(0x6ea)],_0x529e3a[_0x289e58(0xbe5)](_0x38bb04,_0x47ca92,_0x32082e);if(Imported[_0x289e58(0x28b)])_0x529e3a[_0x289e58(0x229)](_0x32cb03||'Linear');},Game_Battler[_0x553167(0x22b)][_0x553167(0x7a8)]=function(_0x5e61d9,_0x514d9f,_0x4bb995,_0x31859e,_0x5bdaee,_0x2c995c){const _0xa421ee=_0x553167;if(!$gameSystem[_0xa421ee(0x196)]())return;const _0x1d12de=this['battler']();if(!_0x1d12de)return;if(_0x5e61d9===Infinity||_0x514d9f===Infinity)return;if(isNaN(_0x5e61d9)||isNaN(_0x514d9f))return;_0x2c995c=_0x2c995c||0x0;if(_0x2c995c>0x0){if(_0x1d12de['_baseX']>_0x5e61d9)_0x5e61d9+=_0x1d12de['width']/0x2+_0x2c995c;if(_0x1d12de[_0xa421ee(0x649)]<_0x5e61d9)_0x5e61d9-=_0x1d12de[_0xa421ee(0x9ce)]/0x2+_0x2c995c;}if(_0x31859e)this[_0xa421ee(0x9d7)](_0x5e61d9,_0x514d9f,![]);_0x5e61d9-=_0x1d12de[_0xa421ee(0x173)],_0x514d9f-=_0x1d12de[_0xa421ee(0x6ea)],_0x1d12de[_0xa421ee(0xbe5)](_0x5e61d9,_0x514d9f,_0x4bb995);if(Imported[_0xa421ee(0x28b)])_0x1d12de[_0xa421ee(0x229)](_0x5bdaee||_0xa421ee(0x9fe));},Game_Battler[_0x553167(0x22b)][_0x553167(0x631)]=function(_0xbd070,_0x21e4f2,_0x12866d,_0x4f33be,_0x528bf0){const _0xd06ec9=_0x553167;if(!$gameSystem[_0xd06ec9(0x196)]())return;const _0x2d17fa=this[_0xd06ec9(0x8d6)]();if(!_0x2d17fa)return;if(_0x4f33be)this[_0xd06ec9(0x9d7)](_0xbd070+_0x2d17fa[_0xd06ec9(0x649)],_0x21e4f2+_0x2d17fa[_0xd06ec9(0x756)],![]);_0xbd070+=_0x2d17fa[_0xd06ec9(0x173)],_0x21e4f2+=_0x2d17fa['_homeY'],_0x2d17fa[_0xd06ec9(0xa81)](_0xbd070,_0x21e4f2,_0x12866d,_0x528bf0),this[_0xd06ec9(0x453)]=_0xbd070,this[_0xd06ec9(0xa6c)]=_0x21e4f2;},Game_Battler['prototype'][_0x553167(0x3d5)]=function(_0xf28927,_0x36c0d9,_0x3345b2,_0xb6303a,_0x192d16,_0x4dc64f){const _0x15b007=_0x553167;if(!$gameSystem[_0x15b007(0x196)]())return;const _0x2894d1=this[_0x15b007(0x8d6)]();if(!_0x2894d1)return;_0x4dc64f=_0x4dc64f||0x0;if(_0x4dc64f>0x0){if(_0x2894d1['_baseX']>_0xf28927)_0xf28927+=_0x2894d1['width']/0x2+_0x4dc64f;if(_0x2894d1[_0x15b007(0x649)]<_0xf28927)_0xf28927-=_0x2894d1[_0x15b007(0x9ce)]/0x2+_0x4dc64f;}if(_0xb6303a)this[_0x15b007(0x9d7)](_0xf28927,_0x36c0d9,![]);_0x2894d1[_0x15b007(0xa81)](_0xf28927,_0x36c0d9,_0x3345b2,_0x192d16),this[_0x15b007(0x453)]=_0xf28927,this['_forcedHomeY']=_0x36c0d9;},Game_Battler['prototype'][_0x553167(0x4a4)]=function(_0x38a4a3,_0x101356,_0x1b4de2){const _0xc8da72=_0x553167;if(!$gameSystem[_0xc8da72(0x196)]())return;const _0x2a5897=this['battler']();if(!_0x2a5897)return;_0x2a5897[_0xc8da72(0x84f)](_0x38a4a3,_0x101356,_0x1b4de2);},Game_Battler[_0x553167(0x22b)]['jumpBattler']=function(_0x1b1419,_0x55a365){const _0x3088c9=_0x553167;if(!$gameSystem[_0x3088c9(0x196)]())return;const _0x41436f=this[_0x3088c9(0x8d6)]();if(!_0x41436f)return;_0x41436f[_0x3088c9(0x674)](_0x1b1419,_0x55a365);},Game_Battler[_0x553167(0x22b)][_0x553167(0x87e)]=function(_0x3c2168,_0x3f5590,_0x47a68f,_0x703e47){const _0x3a60f4=_0x553167;if(!$gameSystem[_0x3a60f4(0x196)]())return;const _0x409aab=this[_0x3a60f4(0x8d6)]();if(!_0x409aab)return;_0x409aab['startSpin'](_0x3c2168,_0x3f5590,_0x47a68f,_0x703e47);},Game_Battler[_0x553167(0x22b)][_0x553167(0x50b)]=function(_0x2b58e8,_0x3ab921,_0x8ba6df,_0x2ca9fd){const _0x338bb7=_0x553167;if(!$gameSystem['isSideView']())return;const _0x404810=this[_0x338bb7(0x8d6)]();if(!_0x404810)return;this[_0x338bb7(0x8fb)]()&&(_0x2b58e8*=-0x1,_0x3ab921*=-0x1),_0x404810[_0x338bb7(0x38b)](_0x2b58e8,_0x3ab921,_0x8ba6df,_0x2ca9fd);},Game_Battler[_0x553167(0x22b)][_0x553167(0x4bf)]=function(_0x68af52,_0x302c96,_0x3bafe1,_0x4e0275){const _0x508b78=_0x553167;if(!$gameSystem[_0x508b78(0x196)]())return;const _0x2cf33b=this[_0x508b78(0x8d6)]();if(!_0x2cf33b)return;_0x2cf33b[_0x508b78(0x2ac)](_0x68af52,_0x302c96,_0x3bafe1,_0x4e0275);},Game_Battler[_0x553167(0x22b)][_0x553167(0x120)]=function(_0x14b3df,_0x47f279,_0x3753c6){const _0x7dd3c4=_0x553167;if(!$gameSystem[_0x7dd3c4(0x196)]())return;const _0xaf8afd=this[_0x7dd3c4(0x8d6)]();if(!_0xaf8afd)return;_0xaf8afd[_0x7dd3c4(0x546)](_0x14b3df,_0x47f279,_0x3753c6);},Game_Battler[_0x553167(0x22b)][_0x553167(0x695)]=function(){const _0x577b6a=_0x553167,_0x4cb893=!!this['_freezeMotionData'];this['_freezeMotionData']=undefined,_0x4cb893&&(this['requestMotionRefresh'](),this[_0x577b6a(0x903)]());},Game_Battler[_0x553167(0x22b)]['clearFreezeMotionForWeapons']=function(){const _0x5bf4c2=_0x553167;if(!SceneManager[_0x5bf4c2(0x2c2)]())return;const _0x58c63b=this[_0x5bf4c2(0x8d6)]();if(!_0x58c63b)return;let _0x5cab1a=this[_0x5bf4c2(0x8fb)]()?_0x58c63b[_0x5bf4c2(0x751)]:_0x58c63b[_0x5bf4c2(0x3f4)][_0x5bf4c2(0x751)];_0x5cab1a&&_0x5cab1a['setup'](0x0);},Game_Battler[_0x553167(0x22b)][_0x553167(0x342)]=function(_0x1a6e25,_0x27cf05,_0xcede45){const _0x3d897f=_0x553167;if(this['isEnemy']()&&!this[_0x3d897f(0x661)]())return;let _0x1e2af6=0x0,_0xd028b8=0x0;_0x1a6e25['match'](/ATTACK[ ](\d+)/i)&&(_0xd028b8=Number(RegExp['$1']),_0xd028b8--);if(this['isActor']()){const _0x466d03=this[_0x3d897f(0x5d2)]();_0x1e2af6=_0x466d03[_0xd028b8]?_0x466d03[_0xd028b8][_0x3d897f(0x232)]:0x0;}else this[_0x3d897f(0x602)]()&&(_0x1e2af6=this[_0x3d897f(0x3a3)]()[_0x3d897f(0x232)]||0x0);const _0x27295a=$dataSystem[_0x3d897f(0x800)][_0x1e2af6];_0x1a6e25[_0x3d897f(0x750)](/attack/i)&&(_0x1a6e25=['thrust',_0x3d897f(0x531),'missile'][_0x27295a[_0x3d897f(0x484)]]||'swing'),this['_freezeMotionData']={'motionType':_0x1a6e25,'weaponImageId':_0x27cf05?_0x27295a[_0x3d897f(0x760)]:0x0,'pattern':_0xcede45};},Game_Battler[_0x553167(0x22b)][_0x553167(0xba1)]=function(_0x41b55a){const _0x5ad465=_0x553167;if(!_0x41b55a)return![];return _0x41b55a['friendsUnit']()===this[_0x5ad465(0xa3e)]();},Game_Battler[_0x553167(0x22b)][_0x553167(0x98e)]=function(_0xee5e47){const _0x42eec4=_0x553167;if(!_0xee5e47)return![];return _0xee5e47[_0x42eec4(0x8d1)]()===this[_0x42eec4(0xa3e)]();},Game_Battler['prototype']['hasStaticSvBattler']=function(){return![];},Game_Actor[_0x553167(0x22b)][_0x553167(0x329)]=function(){const _0x20aae4=_0x553167;return this[_0x20aae4(0xa09)]()['match'](/\$/i);},Game_Enemy[_0x553167(0x22b)][_0x553167(0x329)]=function(){const _0x52a5e5=_0x553167;return this[_0x52a5e5(0x661)]()&&this['svBattlerName']()['match'](/\$/i);},VisuMZ['BattleCore'][_0x553167(0x6a0)]=Game_Actor[_0x553167(0x22b)][_0x553167(0x303)],Game_Actor[_0x553167(0x22b)]['setup']=function(_0x50e276){const _0x11bbeb=_0x553167;VisuMZ['BattleCore'][_0x11bbeb(0x6a0)][_0x11bbeb(0x7f7)](this,_0x50e276),this[_0x11bbeb(0xb37)]();},Game_Actor[_0x553167(0x22b)][_0x553167(0xb37)]=function(){const _0x423a88=_0x553167;this[_0x423a88(0x6ce)]='',this[_0x423a88(0xaa9)]()&&this[_0x423a88(0xaa9)]()[_0x423a88(0x645)][_0x423a88(0x750)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x553167(0x22b)]['getBattlePortraitFilename']=function(){const _0x6f4663=_0x553167;if(this['getBattlePortrait']()!=='')return this['getBattlePortrait']();else{if(Imported[_0x6f4663(0x8cf)]&&this[_0x6f4663(0x1ce)]()!=='')return this[_0x6f4663(0x1ce)]();}return'';},Game_Actor[_0x553167(0x22b)][_0x553167(0x9d5)]=function(){const _0x36b1f5=_0x553167;if(this[_0x36b1f5(0x6ce)]===undefined)this[_0x36b1f5(0xb37)]();return this['_battlePortrait'];},Game_Actor[_0x553167(0x22b)][_0x553167(0x27b)]=function(_0x311ad1){const _0x22ae14=_0x553167;if(this['_battlePortrait']===undefined)this[_0x22ae14(0xb37)]();this[_0x22ae14(0x6ce)]=_0x311ad1;if(SceneManager['isSceneBattle']()&&$gameParty[_0x22ae14(0x22d)]()[_0x22ae14(0xb5d)](this)){const _0x1ced06=SceneManager['_scene'][_0x22ae14(0xa6f)];_0x1ced06&&_0x1ced06[_0x22ae14(0x4b9)](this);}},Game_Actor['prototype'][_0x553167(0x13d)]=function(){return!![];},Game_Actor[_0x553167(0x22b)][_0x553167(0x6e9)]=function(){const _0x29897c=_0x553167;if(!this[_0x29897c(0x805)]()&&BattleManager[_0x29897c(0x7c7)])return!![];return Game_Battler[_0x29897c(0x22b)][_0x29897c(0x6e9)][_0x29897c(0x7f7)](this);},VisuMZ['BattleCore'][_0x553167(0x429)]=Game_Actor[_0x553167(0x22b)][_0x553167(0x167)],Game_Actor['prototype'][_0x553167(0x167)]=function(){const _0x3a0194=_0x553167;if(BattleManager[_0x3a0194(0x7c7)]&&!ConfigManager[_0x3a0194(0x2b3)])return this['makeActionListAutoAttack']();else{return VisuMZ[_0x3a0194(0x841)][_0x3a0194(0x429)]['call'](this);;}},Game_Actor['prototype'][_0x553167(0x44f)]=function(){const _0x265e4f=_0x553167,_0x5f58ab=[],_0x198f46=new Game_Action(this);return _0x198f46[_0x265e4f(0x614)](),_0x5f58ab[_0x265e4f(0x9d2)](_0x198f46),_0x5f58ab;},Game_Actor[_0x553167(0x22b)][_0x553167(0x1de)]=function(){const _0x281a52=_0x553167;return this[_0x281a52(0x2d5)]()[_0x281a52(0x645)][_0x281a52(0x750)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x281a52(0x23f)](/[\r\n]+/):VisuMZ['BattleCore'][_0x281a52(0x309)][_0x281a52(0xae7)][_0x281a52(0xa01)];},Game_Actor[_0x553167(0x22b)][_0x553167(0xb3b)]=function(){const _0x478d21=_0x553167;if(this[_0x478d21(0x6c1)][_0x478d21(0x38e)]!==undefined)return this[_0x478d21(0x6c1)][_0x478d21(0x38e)];return this[_0x478d21(0xaa9)]()[_0x478d21(0x645)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x478d21(0x6c1)][_0x478d21(0x38e)]=eval(RegExp['$1']),this[_0x478d21(0x6c1)][_0x478d21(0x54a)]=eval(RegExp['$2'])):this[_0x478d21(0x6c1)]['svAnchorX']=Game_Battler[_0x478d21(0x22b)]['svBattlerAnchorX'][_0x478d21(0x7f7)](this),this[_0x478d21(0x6c1)][_0x478d21(0x38e)];},Game_Actor['prototype'][_0x553167(0x264)]=function(){const _0xfcc011=_0x553167;if(this[_0xfcc011(0x6c1)][_0xfcc011(0x54a)]!==undefined)return this[_0xfcc011(0x6c1)][_0xfcc011(0x54a)];return this['actor']()[_0xfcc011(0x645)][_0xfcc011(0x750)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0xfcc011(0x38e)]=eval(RegExp['$1']),this[_0xfcc011(0x6c1)][_0xfcc011(0x54a)]=eval(RegExp['$2'])):this[_0xfcc011(0x6c1)][_0xfcc011(0x54a)]=Game_Battler[_0xfcc011(0x22b)][_0xfcc011(0x264)][_0xfcc011(0x7f7)](this),this['_cache'][_0xfcc011(0x54a)];},Game_Actor['prototype'][_0x553167(0x110)]=function(){const _0x2bf6b1=_0x553167;if(this[_0x2bf6b1(0x6c1)][_0x2bf6b1(0xaab)]!==undefined)return this[_0x2bf6b1(0x6c1)]['svShadow'];if(this['actor']()[_0x2bf6b1(0x645)][_0x2bf6b1(0x750)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x2bf6b1(0x6c1)]['svShadow']=!![];else this['actor']()[_0x2bf6b1(0x645)][_0x2bf6b1(0x750)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x2bf6b1(0xaab)]=![]:this[_0x2bf6b1(0x6c1)][_0x2bf6b1(0xaab)]=Game_Battler[_0x2bf6b1(0x22b)]['svBattlerShadowVisible'][_0x2bf6b1(0x7f7)](this);return this[_0x2bf6b1(0x6c1)]['svShadow'];},Game_Actor['prototype'][_0x553167(0x9b8)]=function(){const _0x518016=_0x553167;return VisuMZ['BattleCore'][_0x518016(0x309)]['Actor'][_0x518016(0x29c)];},Game_Actor[_0x553167(0x22b)][_0x553167(0xa82)]=function(){const _0x1586d2=_0x553167,_0x2df1bb=this[_0x1586d2(0x5d2)](),_0x2270e6=_0x2df1bb[0x0]?_0x2df1bb[0x0][_0x1586d2(0x232)]:0x0,_0x3b2ebe=$dataSystem[_0x1586d2(0x800)][_0x2270e6];_0x3b2ebe&&this[_0x1586d2(0x574)](_0x3b2ebe[_0x1586d2(0x760)]);},Game_Actor[_0x553167(0x22b)][_0x553167(0x119)]=function(_0x4e4b6e){const _0x30734a=_0x553167;Game_Battler['prototype'][_0x30734a(0x119)][_0x30734a(0x7f7)](this,_0x4e4b6e),this[_0x30734a(0x7fb)](_0x4e4b6e);},Game_Actor[_0x553167(0x22b)][_0x553167(0x23d)]=function(){const _0x4a738f=_0x553167,_0x5e93e8=this[_0x4a738f(0x5d2)](),_0x552b07=_0x5e93e8[0x0]?_0x5e93e8[0x0][_0x4a738f(0x232)]:0x0;return $dataSystem[_0x4a738f(0x800)][_0x552b07];},Game_Actor['prototype'][_0x553167(0x5d9)]=function(_0x5096f4){const _0x48984d=_0x553167;_0x5096f4=_0x5096f4||0x1,_0x5096f4--;const _0x44e003=this[_0x48984d(0x5d2)]();return _0x44e003[_0x5096f4]?_0x44e003[_0x5096f4]['animationId']:0x0;},Game_Actor[_0x553167(0x22b)][_0x553167(0x7b9)]=function(_0x193e3a){const _0xb1424d=_0x553167;_0x193e3a=_0x193e3a||0x1,_0x193e3a--;const _0x62adf7=this[_0xb1424d(0x5d2)](),_0x209600=_0x62adf7[_0x193e3a]?_0x62adf7[_0x193e3a][_0xb1424d(0x232)]:0x0;return $dataSystem['attackMotions'][_0x209600];},Game_Actor[_0x553167(0x22b)][_0x553167(0xbac)]=function(_0x57426d){const _0x4600d4=_0x553167;_0x57426d=_0x57426d||0x1,_0x57426d--;const _0x27347a=this[_0x4600d4(0x5d2)](),_0x1da579=_0x27347a[_0x57426d]?_0x27347a[_0x57426d]['wtypeId']:0x0,_0x1508c3=$dataSystem[_0x4600d4(0x800)][_0x1da579];if(_0x1508c3){if(_0x1508c3[_0x4600d4(0x484)]===0x0)this[_0x4600d4(0x188)](_0x4600d4(0x558));else{if(_0x1508c3[_0x4600d4(0x484)]===0x1)this[_0x4600d4(0x188)](_0x4600d4(0x531));else _0x1508c3[_0x4600d4(0x484)]===0x2&&this[_0x4600d4(0x188)](_0x4600d4(0x450));}this[_0x4600d4(0x574)](_0x1508c3['weaponImageId']);}},Game_Battler[_0x553167(0x22b)]['setActiveWeaponSlot']=function(_0x4cc305){const _0x5b94bc=_0x553167;if(this[_0x5b94bc(0x8fb)]()){const _0x44fcf8=this[_0x5b94bc(0x5d2)]();if(_0x44fcf8['length']>0x0){const _0x56f4fe=_0x44fcf8[_0x4cc305];if(_0x56f4fe)_0x4cc305=this['equips']()[_0x5b94bc(0x163)](_0x56f4fe);}}this[_0x5b94bc(0xbec)]=_0x4cc305||0x0,this[_0x5b94bc(0x6c1)]={};},Game_Battler[_0x553167(0x22b)]['nextActiveWeaponSlot']=function(){const _0x125a0d=_0x553167;this['_activeWeaponSlot']=this['_activeWeaponSlot']||0x0,this[_0x125a0d(0xbec)]++,this[_0x125a0d(0x6c1)]={};},Game_Battler[_0x553167(0x22b)][_0x553167(0x887)]=function(){const _0x163906=_0x553167;this[_0x163906(0xbec)]=undefined,this['_cache']={};},VisuMZ[_0x553167(0x841)][_0x553167(0x75e)]=Game_Actor[_0x553167(0x22b)]['equips'],Game_Actor[_0x553167(0x22b)][_0x553167(0x27e)]=function(){const _0x47ac57=_0x553167;let _0x86f06a=VisuMZ[_0x47ac57(0x841)][_0x47ac57(0x75e)]['call'](this);if(this[_0x47ac57(0x25a)])return _0x86f06a;if(this['_activeWeaponSlot']!==undefined){this['_tempEquipCheck']=!![];const _0x4144c1=this[_0x47ac57(0x4ae)]();for(let _0x4b3569=0x0;_0x4b3569<_0x4144c1[_0x47ac57(0x635)];_0x4b3569++){_0x4144c1[_0x4b3569]===0x1&&this[_0x47ac57(0xbec)]!==_0x4b3569&&(_0x86f06a[_0x4b3569]=null);}this[_0x47ac57(0x25a)]=undefined;}return _0x86f06a;},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x93b)]=function(_0x410812){const _0x1f0364=_0x553167;return _0x410812[_0x1f0364(0x8fb)]()?_0x410812[_0x1f0364(0x5d2)]()[_0x1f0364(0x635)]||0x1:0x1;},Window_BattleLog[_0x553167(0x22b)][_0x553167(0xb4e)]=function(_0x4347e0,_0x429869){const _0x51b0e5=_0x553167;_0x4347e0&&_0x4347e0['isActor']()&&_0x4347e0[_0x51b0e5(0x409)](_0x429869),this[_0x51b0e5(0x103)]();},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x55f)]=function(_0x1ffbae){const _0x4187c3=_0x553167;_0x1ffbae&&_0x1ffbae['isActor']()&&_0x1ffbae['clearActiveWeaponSlot'](),this[_0x4187c3(0x103)]();},Game_Actor[_0x553167(0x22b)][_0x553167(0xbb8)]=function(){const _0x4be84c=_0x553167;let _0x3e41ee='battleUIOffsetX';if(this[_0x4be84c(0x138)](_0x3e41ee))return this['_cache'][_0x3e41ee];return this[_0x4be84c(0x6c1)][_0x3e41ee]=this['createBattleUIOffsetX'](this['actor']()),this['_cache'][_0x3e41ee];},Game_Actor[_0x553167(0x22b)]['battleUIOffsetY']=function(){const _0x3ab638=_0x553167;let _0x333dd0='battleUIOffsetY';if(this['checkCacheKey'](_0x333dd0))return this[_0x3ab638(0x6c1)][_0x333dd0];return this['_cache'][_0x333dd0]=this['createBattleUIOffsetY'](this['actor']()),this[_0x3ab638(0x6c1)][_0x333dd0];},VisuMZ[_0x553167(0x841)][_0x553167(0x973)]=Game_Enemy[_0x553167(0x22b)][_0x553167(0x303)],Game_Enemy['prototype'][_0x553167(0x303)]=function(_0x2341e9,_0x443df4,_0x5ee501){const _0x1b2b1e=_0x553167;_0x2341e9=DataManager[_0x1b2b1e(0xabd)](_0x2341e9),VisuMZ[_0x1b2b1e(0x841)][_0x1b2b1e(0x973)][_0x1b2b1e(0x7f7)](this,_0x2341e9,_0x443df4,_0x5ee501),Imported[_0x1b2b1e(0x902)]&&this[_0x1b2b1e(0x113)](),this['clearBattleCoreData'](),this[_0x1b2b1e(0x8a1)](),this[_0x1b2b1e(0xabb)](),Imported[_0x1b2b1e(0x902)]&&this['recoverAll']();},Game_Enemy[_0x553167(0x22b)][_0x553167(0xb54)]=function(){const _0x1a09e6=_0x553167,_0x45d7e1=VisuMZ[_0x1a09e6(0x841)][_0x1a09e6(0x309)][_0x1a09e6(0x194)];this[_0x1a09e6(0x622)]=_0x45d7e1[_0x1a09e6(0x139)],this['_svBattlerData']={},this[_0x1a09e6(0xac6)]();},Game_Enemy[_0x553167(0x22b)][_0x553167(0x8a1)]=function(){const _0x866a2e=_0x553167,_0x1de4c9=VisuMZ[_0x866a2e(0x841)][_0x866a2e(0x309)]['Enemy'],_0x51e3fc=this[_0x866a2e(0xb8f)]()[_0x866a2e(0x645)];this[_0x866a2e(0x206)]={'name':'','wtypeId':_0x1de4c9[_0x866a2e(0x6c4)],'collapse':_0x1de4c9[_0x866a2e(0x6e3)],'motionIdle':_0x1de4c9[_0x866a2e(0x51b)],'width':_0x1de4c9['Width']||0x40,'height':_0x1de4c9[_0x866a2e(0x316)]||0x40,'anchorX':_0x1de4c9['AnchorX']||0x0,'anchorY':_0x1de4c9['AnchorY']||0x0,'shadow':_0x1de4c9[_0x866a2e(0x48b)]};_0x51e3fc[_0x866a2e(0x750)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x866a2e(0x622)]=Number(RegExp['$1']));const _0x186c16=this[_0x866a2e(0x206)];if(_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW BATTLER: (.*)>/i))_0x186c16[_0x866a2e(0xc04)]=String(RegExp['$1']);else{if(_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x2d8c00=String(RegExp['$1'])[_0x866a2e(0x23f)](/[\r\n]+/)[_0x866a2e(0x4c0)]('');_0x186c16[_0x866a2e(0xc04)]=DataManager['processRandomizedData'](_0x2d8c00);}}_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x186c16[_0x866a2e(0x8e9)]=eval(RegExp['$1']),_0x186c16['anchorY']=eval(RegExp['$2']));if(_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW COLLAPSE>/i))_0x186c16[_0x866a2e(0xbb5)]=!![];else _0x51e3fc['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x186c16['collapse']=![]);if(_0x51e3fc['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x186c16[_0x866a2e(0x761)]=!![];else _0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x186c16[_0x866a2e(0x761)]=![]);if(_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x186c16[_0x866a2e(0x20f)]=String(RegExp['$1'])[_0x866a2e(0xb3c)]()[_0x866a2e(0x976)]();else{if(_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0xc4324e=String(RegExp['$1'])[_0x866a2e(0x23f)](/[\r\n]+/)[_0x866a2e(0x4c0)]('');_0x186c16[_0x866a2e(0x20f)]=DataManager[_0x866a2e(0xaaf)](_0xc4324e);}}_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x186c16[_0x866a2e(0x9ce)]=Number(RegExp['$1']),_0x186c16['height']=Number(RegExp['$2']));if(_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW WEAPON: (.*)>/i))_0x186c16[_0x866a2e(0x232)]=DataManager[_0x866a2e(0x8c6)](RegExp['$1']);else{if(_0x51e3fc[_0x866a2e(0x750)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0xbfa7b=String(RegExp['$1'])[_0x866a2e(0x23f)](/[\r\n]+/)[_0x866a2e(0x4c0)](''),_0x1e413c=DataManager['processRandomizedData'](_0xbfa7b);_0x186c16[_0x866a2e(0x232)]=DataManager[_0x866a2e(0x8c6)](_0x1e413c);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x1191fe=this[_0x866a2e(0x20c)]();for(const _0x1a0bdd of _0x1191fe){const _0x4c1a82=this['traitSet'](_0x1a0bdd)['Name'][_0x866a2e(0x512)]()[_0x866a2e(0x976)](),_0x382e2b=_0x1a0bdd[_0x866a2e(0x512)]()[_0x866a2e(0x976)]();if(_0x51e3fc[_0x866a2e(0x750)](VisuMZ[_0x866a2e(0x9c6)][_0x866a2e(0xace)]['SvBattlerSolo-%1-%2'[_0x866a2e(0x47d)](_0x382e2b,_0x4c1a82)]))_0x186c16[_0x866a2e(0xc04)]=String(RegExp['$1']);else{if(_0x51e3fc[_0x866a2e(0x750)](VisuMZ[_0x866a2e(0x9c6)][_0x866a2e(0xace)][_0x866a2e(0x140)[_0x866a2e(0x47d)](_0x382e2b,_0x4c1a82)])){const _0x2620df=String(RegExp['$1'])[_0x866a2e(0x23f)](/[\r\n]+/)['remove']('');_0x186c16[_0x866a2e(0xc04)]=DataManager[_0x866a2e(0xaaf)](_0x2620df);}}if(_0x51e3fc['match'](VisuMZ[_0x866a2e(0x9c6)][_0x866a2e(0xace)][_0x866a2e(0x376)['format'](_0x382e2b,_0x4c1a82)]))_0x186c16[_0x866a2e(0x232)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x51e3fc['match'](VisuMZ[_0x866a2e(0x9c6)][_0x866a2e(0xace)]['SvWeaponMass-%1-%2'[_0x866a2e(0x47d)](_0x382e2b,_0x4c1a82)])){const _0x473137=String(RegExp['$1'])[_0x866a2e(0x23f)](/[\r\n]+/)['remove'](''),_0xd0bb73=DataManager[_0x866a2e(0xaaf)](_0x473137);_0x186c16[_0x866a2e(0x232)]=DataManager['getWtypeIdWithName'](_0xd0bb73);}}if(_0x51e3fc[_0x866a2e(0x750)](VisuMZ[_0x866a2e(0x9c6)][_0x866a2e(0xace)][_0x866a2e(0xb38)[_0x866a2e(0x47d)](_0x382e2b,_0x4c1a82)]))_0x186c16[_0x866a2e(0x20f)]=String(RegExp['$1'])[_0x866a2e(0xb3c)]()['trim']();else{if(_0x51e3fc['match'](VisuMZ[_0x866a2e(0x9c6)][_0x866a2e(0xace)][_0x866a2e(0x252)[_0x866a2e(0x47d)](_0x382e2b,_0x4c1a82)])){const _0x5b60b6=String(RegExp['$1'])[_0x866a2e(0x23f)](/[\r\n]+/)[_0x866a2e(0x4c0)]('');_0x186c16[_0x866a2e(0x20f)]=DataManager['processRandomizedData'](_0x5b60b6);}}}}},Game_Enemy['prototype'][_0x553167(0xb7b)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x553167(0x22b)][_0x553167(0x62c)]=function(){const _0x3f3e4e=_0x553167;return this[_0x3f3e4e(0xb7b)]();},Game_Enemy['prototype'][_0x553167(0x5d9)]=function(_0x4d675f){const _0x5f4499=_0x553167;return this[_0x5f4499(0xb7b)]();},Game_Enemy['prototype'][_0x553167(0xbd4)]=function(){const _0x512d9f=_0x553167;if(this[_0x512d9f(0xb8f)]()['note'][_0x512d9f(0x750)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x512d9f(0xbd4)][_0x512d9f(0x7f7)](this);},Game_Enemy['prototype'][_0x553167(0x80f)]=function(){if(this['enemy']()['note']['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x553167(0x22b)][_0x553167(0x638)]=function(){const _0x2404c5=_0x553167,_0x3e44af=[];for(const _0xcbef5f of this[_0x2404c5(0xb8f)]()[_0x2404c5(0x1b8)]){const _0x3aa74c=$dataSkills[_0xcbef5f[_0x2404c5(0x61c)]];if(_0x3aa74c&&!_0x3e44af[_0x2404c5(0xb5d)](_0x3aa74c))_0x3e44af[_0x2404c5(0x9d2)](_0x3aa74c);}return _0x3e44af;},Game_Enemy['prototype'][_0x553167(0xbb8)]=function(){const _0x3aa689=_0x553167;let _0x86411a=_0x3aa689(0xbb8);if(this[_0x3aa689(0x138)](_0x86411a))return this['_cache'][_0x86411a];return this[_0x3aa689(0x6c1)][_0x86411a]=this[_0x3aa689(0x6d9)](this[_0x3aa689(0xb8f)]()),this[_0x3aa689(0x6c1)][_0x86411a];},Game_Enemy[_0x553167(0x22b)][_0x553167(0xab6)]=function(){const _0x3517a9=_0x553167;let _0x56c69d=_0x3517a9(0xab6);if(this[_0x3517a9(0x138)](_0x56c69d))return this[_0x3517a9(0x6c1)][_0x56c69d];return this[_0x3517a9(0x6c1)][_0x56c69d]=this[_0x3517a9(0x4d5)](this[_0x3517a9(0xb8f)]()),this[_0x3517a9(0x6c1)][_0x56c69d];},Game_Enemy['prototype'][_0x553167(0x3a3)]=function(){const _0x5a61cd=_0x553167;if(this[_0x5a61cd(0x206)]!==undefined)return this[_0x5a61cd(0x206)];return this['setupBattleCoreData'](),this[_0x5a61cd(0x206)];},Game_Enemy[_0x553167(0x22b)][_0x553167(0x661)]=function(){const _0x47e9b7=_0x553167;return this['svBattlerData']()[_0x47e9b7(0xc04)]!=='';},Game_Enemy[_0x553167(0x22b)][_0x553167(0x2b0)]=function(){const _0x693c9=_0x553167;return this[_0x693c9(0x3a3)]()['name'];},Game_Enemy[_0x553167(0x22b)]['battlerSmoothImage']=function(){const _0x417d7c=_0x553167;return this[_0x417d7c(0x661)]()?VisuMZ[_0x417d7c(0x841)][_0x417d7c(0x309)]['Actor'][_0x417d7c(0x29c)]:VisuMZ['BattleCore'][_0x417d7c(0x309)][_0x417d7c(0x194)]['SmoothImage'];},Game_Enemy[_0x553167(0x22b)][_0x553167(0x119)]=function(_0x554b8a){const _0x1c5b1a=_0x553167;Game_Battler['prototype']['performAction'][_0x1c5b1a(0x7f7)](this,_0x554b8a);if(this['hasSvBattler']())this[_0x1c5b1a(0x7fb)](_0x554b8a);},Game_Enemy[_0x553167(0x22b)][_0x553167(0xb65)]=function(){const _0x1b220f=_0x553167,_0x461ccd=this[_0x1b220f(0x3a3)]()[_0x1b220f(0x232)]||0x0,_0x513a56=$dataSystem[_0x1b220f(0x800)][_0x461ccd];if(_0x513a56){if(_0x513a56['type']===0x0)this[_0x1b220f(0x188)](_0x1b220f(0x558));else{if(_0x513a56[_0x1b220f(0x484)]===0x1)this[_0x1b220f(0x188)](_0x1b220f(0x531));else _0x513a56[_0x1b220f(0x484)]===0x2&&this[_0x1b220f(0x188)](_0x1b220f(0x450));}}},Game_Enemy['prototype']['performWeaponAnimation']=function(){const _0x37172b=_0x553167,_0x4bcb36=this[_0x37172b(0x3a3)]()[_0x37172b(0x232)]||0x0,_0x4e0e63=$dataSystem['attackMotions'][_0x4bcb36];_0x4e0e63&&this['startWeaponAnimation'](_0x4e0e63[_0x37172b(0x760)]);},Game_Enemy[_0x553167(0x22b)][_0x553167(0x23d)]=function(){const _0x3651a1=_0x553167,_0x3760b8=this[_0x3651a1(0x3a3)]()['wtypeId']||0x0;return $dataSystem[_0x3651a1(0x800)][_0x3760b8];},Game_Enemy['prototype']['getAttackMotionSlot']=function(_0xdac208){const _0x1aaec2=_0x553167;return this[_0x1aaec2(0x23d)]();},Game_Enemy[_0x553167(0x22b)]['performDamage']=function(){const _0x4f3d84=_0x553167;Game_Battler[_0x4f3d84(0x22b)][_0x4f3d84(0x9c8)][_0x4f3d84(0x7f7)](this),this['isSpriteVisible']()&&this['hasSvBattler']()&&this['requestMotion'](_0x4f3d84(0x2c7)),SoundManager[_0x4f3d84(0xb31)]();},Game_Enemy[_0x553167(0x22b)][_0x553167(0xac2)]=function(){const _0x4ada7d=_0x553167;Game_Battler[_0x4ada7d(0x22b)][_0x4ada7d(0xac2)][_0x4ada7d(0x7f7)](this),this[_0x4ada7d(0x188)](_0x4ada7d(0x69e));},Game_Enemy[_0x553167(0x22b)][_0x553167(0x929)]=function(){const _0x444726=_0x553167;Game_Battler[_0x444726(0x22b)][_0x444726(0x929)]['call'](this),this['requestMotion'](_0x444726(0x69e));},Game_Enemy['prototype'][_0x553167(0x2dd)]=function(){const _0x28da1e=_0x553167;Game_Battler[_0x28da1e(0x22b)][_0x28da1e(0x2dd)][_0x28da1e(0x7f7)](this),this[_0x28da1e(0xb65)]();},Game_Enemy[_0x553167(0x22b)][_0x553167(0x92c)]=function(){const _0x54a99a=_0x553167;if(this[_0x54a99a(0x661)]()){if(this[_0x54a99a(0xac3)]()>=0x1)return!![];return this['svBattlerData']()[_0x54a99a(0xbb5)];}else return!![];},Game_Enemy[_0x553167(0x22b)]['svBattlerAnchorX']=function(){const _0xb14043=_0x553167;return this[_0xb14043(0x3a3)]()[_0xb14043(0x8e9)];},Game_Enemy[_0x553167(0x22b)]['svBattlerAnchorY']=function(){const _0x164780=_0x553167;return this[_0x164780(0x3a3)]()[_0x164780(0x5b0)];},Game_Enemy[_0x553167(0x22b)][_0x553167(0x110)]=function(){const _0x3794f9=_0x553167;return this['svBattlerData']()[_0x3794f9(0x761)];},VisuMZ[_0x553167(0x841)][_0x553167(0x1ec)]=Game_Enemy['prototype']['transform'],Game_Enemy[_0x553167(0x22b)][_0x553167(0x79c)]=function(_0x4a92a2){const _0x2cd1c1=_0x553167;VisuMZ[_0x2cd1c1(0x841)][_0x2cd1c1(0x1ec)][_0x2cd1c1(0x7f7)](this,_0x4a92a2),this[_0x2cd1c1(0xb54)](),this['setupBattleCoreData']();const _0x28c38c=this['battler']();_0x28c38c&&(_0x28c38c[_0x2cd1c1(0x40f)]=undefined,_0x28c38c[_0x2cd1c1(0x4e5)](this));},Game_Enemy[_0x553167(0x22b)][_0x553167(0xac6)]=function(){const _0x43b8de=_0x553167,_0x481bb4=VisuMZ['BattleCore'][_0x43b8de(0x309)]['Enemy'];this[_0x43b8de(0x75a)]=_0x481bb4[_0x43b8de(0x8b5)]??0x0;},Game_Enemy[_0x553167(0x22b)][_0x553167(0x207)]=function(){const _0x3f7cff=_0x553167;return this[_0x3f7cff(0x75a)]&&this[_0x3f7cff(0x75a)]>0x0;},Game_Enemy[_0x553167(0x22b)]['updateNameTempVisibility']=function(){const _0x2a20e3=_0x553167;this['_nameTempVisibleDuration']&&this['_nameTempVisibleDuration']>0x0&&this[_0x2a20e3(0x75a)]--;},Game_Enemy['prototype'][_0x553167(0x547)]=function(){const _0x34b1b9=_0x553167;this[_0x34b1b9(0x75a)]=0x0;},Game_Enemy['prototype'][_0x553167(0xabb)]=function(){const _0x234d89=_0x553167;this[_0x234d89(0x134)]();const _0x5ad8b9=this[_0x234d89(0xb8f)]()['note']||'';if(_0x5ad8b9['match'](/<ASPECT NAME:[ ](.*)>/i)){const _0x9ad733=String(RegExp['$1']);this[_0x234d89(0x4ed)]()[_0x234d89(0xc04)]=_0x9ad733['format'](this[_0x234d89(0x270)]());}_0x5ad8b9[_0x234d89(0x750)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x234d89(0x4ed)]()[_0x234d89(0xbde)]=Number(RegExp['$1'])),_0x5ad8b9[_0x234d89(0x750)](/<ASPECT COLOR:[ ](.*)>/i)&&(this['getAspectData']()[_0x234d89(0x9e7)]=String(RegExp['$1'])),_0x5ad8b9[_0x234d89(0x750)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x234d89(0x4ed)]()['description']=String(RegExp['$1']));},Game_Enemy['prototype']['clearBattleCoreAspects']=function(){const _0x13064f=_0x553167,_0x4a8975=VisuMZ['BattleCore'][_0x13064f(0x309)][_0x13064f(0x194)][_0x13064f(0x8eb)]??_0x13064f(0xa1e);this[_0x13064f(0x1e0)]={'name':_0x4a8975[_0x13064f(0x47d)](this[_0x13064f(0x270)]()),'iconIndex':VisuMZ[_0x13064f(0x841)][_0x13064f(0x309)][_0x13064f(0x194)][_0x13064f(0xac1)]??0x1a,'nameColor':VisuMZ[_0x13064f(0x841)][_0x13064f(0x309)][_0x13064f(0x194)][_0x13064f(0x9ec)]??'2','description':''};},Game_Enemy[_0x553167(0x22b)][_0x553167(0x4ed)]=function(){const _0x58d589=_0x553167;if(this[_0x58d589(0x1e0)]===undefined)this[_0x58d589(0xabb)]();return this[_0x58d589(0x1e0)];},Game_Enemy[_0x553167(0x22b)][_0x553167(0x5c4)]=function(){const _0x284d57=_0x553167;return(this[_0x284d57(0x4ed)]()[_0x284d57(0x33b)]||'')[_0x284d57(0x635)]>0x0;},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x694)]=function(){const _0x54f5de=_0x553167;return VisuMZ[_0x54f5de(0x841)][_0x54f5de(0x309)][_0x54f5de(0x2e0)][_0x54f5de(0x80c)];},Game_Enemy[_0x553167(0x22b)][_0x553167(0x694)]=function(){const _0x334b46=_0x553167,_0x54eb50=this['enemy']()?this[_0x334b46(0xb8f)]()[_0x334b46(0x645)]||'':'';if(_0x54eb50[_0x334b46(0x750)](/<POPUP POSITION: HEAD>/i))return'head';else{if(_0x54eb50['match'](/<POPUP POSITION: CENTER>/i))return _0x334b46(0xa2f);else{if(_0x54eb50['match'](/<POPUP POSITION: BASE>/i))return _0x334b46(0x4c6);}}return Game_BattlerBase['prototype'][_0x334b46(0x694)]['call'](this);},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x260)]=function(){return 0x0;},Game_Enemy[_0x553167(0x22b)][_0x553167(0x260)]=function(){const _0x8374ec=_0x553167,_0xd8ec9b=this[_0x8374ec(0xb8f)]()?this[_0x8374ec(0xb8f)]()[_0x8374ec(0x645)]||'':'';if(_0xd8ec9b[_0x8374ec(0x750)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x8374ec(0x260)][_0x8374ec(0x7f7)](this);},Game_BattlerBase['prototype']['damagePopupOffsetY']=function(){return 0x0;},Game_Enemy[_0x553167(0x22b)]['damagePopupOffsetY']=function(){const _0x7753ad=_0x553167,_0x5f2451=this[_0x7753ad(0xb8f)]()?this['enemy']()['note']||'':'';if(_0x5f2451[_0x7753ad(0x750)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x7753ad(0x22b)][_0x7753ad(0x9fd)][_0x7753ad(0x7f7)](this);},Game_Unit[_0x553167(0x22b)][_0x553167(0xab8)]=function(_0x182f0d){const _0x5a434e=_0x553167;for(const _0x1ad554 of this[_0x5a434e(0xaca)]()){if(_0x1ad554)_0x1ad554[_0x5a434e(0xab8)](_0x182f0d);}},Game_Unit[_0x553167(0x22b)][_0x553167(0x25f)]=function(){const _0x542821=_0x553167,_0xa9f286=this[_0x542821(0x58e)]();return _0xa9f286[Math[_0x542821(0x852)](_0xa9f286[_0x542821(0x635)])];},VisuMZ[_0x553167(0x841)][_0x553167(0xf3)]=Game_Party['prototype'][_0x553167(0x2a7)],Game_Party[_0x553167(0x22b)][_0x553167(0x2a7)]=function(_0x19506e){const _0x321ae0=_0x553167;VisuMZ[_0x321ae0(0x841)][_0x321ae0(0xf3)][_0x321ae0(0x7f7)](this,_0x19506e),BattleManager[_0x321ae0(0x375)]();},VisuMZ['BattleCore']['Game_Party_removeActor']=Game_Party[_0x553167(0x22b)][_0x553167(0x6a8)],Game_Party['prototype'][_0x553167(0x6a8)]=function(_0x2000bc){const _0x59cdfe=_0x553167;VisuMZ[_0x59cdfe(0x841)][_0x59cdfe(0x256)][_0x59cdfe(0x7f7)](this,_0x2000bc),BattleManager[_0x59cdfe(0x375)]();},VisuMZ[_0x553167(0x841)][_0x553167(0xa04)]=Game_Troop[_0x553167(0x22b)][_0x553167(0x303)],Game_Troop[_0x553167(0x22b)][_0x553167(0x303)]=function(_0x39ceff){const _0x504a9d=_0x553167;$gameTemp[_0x504a9d(0x380)](),$gameTemp[_0x504a9d(0x994)](_0x39ceff),VisuMZ[_0x504a9d(0x841)]['Game_Troop_setup'][_0x504a9d(0x7f7)](this,_0x39ceff),this[_0x504a9d(0x503)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x73a)]=Game_Troop[_0x553167(0x22b)]['expTotal'],Game_Troop[_0x553167(0x22b)][_0x553167(0x9be)]=function(){const _0x2c717f=_0x553167;let _0x2c8a44=VisuMZ[_0x2c717f(0x841)][_0x2c717f(0x73a)][_0x2c717f(0x7f7)](this);return this[_0x2c717f(0xab2)]&&(_0x2c8a44*=this[_0x2c717f(0xab2)]()),Math[_0x2c717f(0xbe1)](_0x2c8a44);},Game_Troop[_0x553167(0x22b)][_0x553167(0xab2)]=function(){return 0x1;},Game_Troop[_0x553167(0x22b)]['extendTroopMembers']=function(){const _0x74818f=_0x553167,_0x834f90=DataManager[_0x74818f(0x365)](this[_0x74818f(0x807)]()['id']);if(_0x834f90[_0x74818f(0x750)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x226ca3=RegExp['$1'][_0x74818f(0x23f)](',')[_0x74818f(0x5c6)](_0x14246b=>Number(_0x14246b));this['checkExtendTroopCompatibility'](),this[_0x74818f(0x6d1)](_0x226ca3);}},Game_Troop['prototype'][_0x553167(0xbbc)]=function(){const _0x54a007=_0x553167;let _0x1b4d18=_0x54a007(0x693)+'\x0a';_0x1b4d18+=_0x54a007(0x5ca),Imported['VisuMZ_2_BattleSystemBTB']&&(VisuMZ[_0x54a007(0x442)][_0x54a007(0x932)]<1.11&&(alert(_0x1b4d18['format'](_0x54a007(0x218))),SceneManager[_0x54a007(0x19c)]())),Imported[_0x54a007(0x916)]&&(VisuMZ['BattleSystemCTB'][_0x54a007(0x932)]<1.19&&(alert(_0x1b4d18['format']('CTB')),SceneManager['exit']())),Imported[_0x54a007(0x51d)]&&(VisuMZ[_0x54a007(0x7f0)]['version']<1.15&&(alert(_0x1b4d18[_0x54a007(0x47d)](_0x54a007(0x39d))),SceneManager['exit']()));},Game_Troop[_0x553167(0x22b)][_0x553167(0x6d1)]=function(_0x215257){const _0x5914d2=_0x553167;this[_0x5914d2(0x5e0)]={};for(const _0x457b56 of this[_0x5914d2(0xaca)]()){if(!_0x457b56)continue;_0x457b56[_0x5914d2(0x931)]('');}for(const _0x38be3b of _0x215257){const _0x27722c=$dataTroops[_0x38be3b];if(_0x27722c)this[_0x5914d2(0x6d5)](_0x27722c);}this[_0x5914d2(0x982)]();},Game_Troop[_0x553167(0x22b)][_0x553167(0x6d5)]=function(_0x373cb6){const _0x3dffdc=_0x553167;for(const _0x365c44 of _0x373cb6[_0x3dffdc(0xaca)]){if($dataEnemies[_0x365c44['enemyId']]){const _0x3432fd=_0x365c44['enemyId'],_0x2c3b6c=_0x365c44['x'],_0x2ac68c=_0x365c44['y'],_0xeac029=new Game_Enemy(_0x3432fd,_0x2c3b6c,_0x2ac68c);_0x365c44[_0x3dffdc(0xb4c)]&&_0xeac029[_0x3dffdc(0x447)](),this[_0x3dffdc(0x18e)][_0x3dffdc(0x9d2)](_0xeac029);}}},VisuMZ['BattleCore'][_0x553167(0xa9b)]=Game_Map[_0x553167(0x22b)][_0x553167(0x227)],Game_Map[_0x553167(0x22b)][_0x553167(0x227)]=function(){const _0x26d74e=_0x553167;VisuMZ[_0x26d74e(0x841)][_0x26d74e(0xa9b)][_0x26d74e(0x7f7)](this),this[_0x26d74e(0x659)]();},Game_Map[_0x553167(0x22b)][_0x553167(0x659)]=function(){const _0x53f31e=_0x553167;this[_0x53f31e(0x8ca)]={},this[_0x53f31e(0x9ed)]={};if(!$dataMap)return;const _0x3abdab=$dataMap[_0x53f31e(0x645)];if(!_0x3abdab)return;const _0xb00665=_0x3abdab['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0xb00665)for(const _0x1d6cfd of _0xb00665){_0x1d6cfd[_0x53f31e(0x750)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x36b10c=Number(RegExp['$1']),_0x3dd485=Number(RegExp['$2']),_0x525b51=_0x3dd485===0x1?this[_0x53f31e(0x8ca)]:this[_0x53f31e(0x9ed)],_0x1487fb=String(RegExp['$3']);_0x525b51[_0x36b10c]=_0x1487fb;}},VisuMZ[_0x553167(0x841)]['Game_Map_battleback1Name']=Game_Map[_0x553167(0x22b)]['battleback1Name'],Game_Map[_0x553167(0x22b)]['battleback1Name']=function(){const _0x295fda=_0x553167;if(!BattleManager[_0x295fda(0xf0)]()){const _0x2cffff=$gamePlayer[_0x295fda(0x9ab)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x295fda(0x8ca)]&&this['_regionBattleback1'][_0x2cffff])return this[_0x295fda(0x8ca)][_0x2cffff];}return VisuMZ['BattleCore'][_0x295fda(0x831)][_0x295fda(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x87f)]=Game_Map[_0x553167(0x22b)][_0x553167(0x3f5)],Game_Map['prototype']['battleback2Name']=function(){const _0x1f037f=_0x553167;if(!BattleManager[_0x1f037f(0xf0)]()){const _0x1e3f8c=$gamePlayer[_0x1f037f(0x9ab)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x1f037f(0x8ca)]&&this[_0x1f037f(0x9ed)][_0x1e3f8c])return this['_regionBattleback2'][_0x1e3f8c];}return VisuMZ[_0x1f037f(0x841)][_0x1f037f(0x87f)]['call'](this);},VisuMZ[_0x553167(0x841)][_0x553167(0xb9c)]=Game_Map[_0x553167(0x22b)][_0x553167(0x12f)],Game_Map['prototype'][_0x553167(0x12f)]=function(){const _0x2477d3=_0x553167;let _0x19b724=JsonEx[_0x2477d3(0x323)](VisuMZ[_0x2477d3(0x841)][_0x2477d3(0xb9c)][_0x2477d3(0x7f7)](this));return VisuMZ['BattleCore'][_0x2477d3(0x567)](_0x19b724);},VisuMZ[_0x553167(0x841)][_0x553167(0x567)]=function(_0x187e02){const _0x4e3f3e=_0x553167;var _0x58fd1e,_0x59e3e0,_0x50c556;for(_0x50c556=_0x187e02[_0x4e3f3e(0x635)]-0x1;_0x50c556>0x0;_0x50c556--){_0x58fd1e=Math[_0x4e3f3e(0x66d)](Math['random']()*(_0x50c556+0x1)),_0x59e3e0=_0x187e02[_0x50c556],_0x187e02[_0x50c556]=_0x187e02[_0x58fd1e],_0x187e02[_0x58fd1e]=_0x59e3e0;}return _0x187e02;},VisuMZ['BattleCore'][_0x553167(0x719)]=Game_Interpreter[_0x553167(0x22b)]['command357'],Game_Interpreter[_0x553167(0x22b)]['command357']=function(_0x5852f5){const _0x27083=_0x553167;return $gameTemp[_0x27083(0x425)](this),VisuMZ[_0x27083(0x841)][_0x27083(0x719)][_0x27083(0x7f7)](this,_0x5852f5);},VisuMZ[_0x553167(0x841)][_0x553167(0x71a)]=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter[_0x553167(0x22b)][_0x553167(0x4ea)]=function(){const _0x2d0825=_0x553167;if(SceneManager[_0x2d0825(0x2c2)]())switch(this['_waitMode']){case _0x2d0825(0x840):if(Imported[_0x2d0825(0x1cf)]){if($gameScreen[_0x2d0825(0x738)]()[_0x2d0825(0x389)]>0x0)return!![];this[_0x2d0825(0x5c8)]='';}break;case _0x2d0825(0xa1a):if(BattleManager['_spriteset'][_0x2d0825(0x448)]())return!![];this[_0x2d0825(0x5c8)]='';break;case'battleBalloon':if(BattleManager['_spriteset'][_0x2d0825(0x8c8)]())return!![];this[_0x2d0825(0x5c8)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x2d0825(0x738)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x2d0825(0x738)]()['cameraOffsetDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x2d0825(0x673):if(BattleManager[_0x2d0825(0x306)][_0x2d0825(0xad7)]())return!![];this['_waitMode']='';break;case'battleFloat':if(BattleManager[_0x2d0825(0x306)][_0x2d0825(0xa65)]())return!![];this['_waitMode']='';break;case _0x2d0825(0x8c2):if(BattleManager[_0x2d0825(0x306)]['isAnyoneJumping']())return!![];this[_0x2d0825(0x5c8)]='';break;case _0x2d0825(0x3a0):if(BattleManager[_0x2d0825(0x7d3)][_0x2d0825(0x8c4)]())return!![];this[_0x2d0825(0x5c8)]='';break;case _0x2d0825(0x579):if(BattleManager['_spriteset'][_0x2d0825(0x688)]())return!![];this[_0x2d0825(0x5c8)]='';break;case _0x2d0825(0xb93):if(BattleManager[_0x2d0825(0x306)][_0x2d0825(0x49e)]())return!![];this[_0x2d0825(0x5c8)]='';break;case'battleGrow':if(BattleManager['_spriteset'][_0x2d0825(0x60b)]())return!![];this[_0x2d0825(0x5c8)]='';break;case'battleSpriteSkew':if(BattleManager[_0x2d0825(0x306)][_0x2d0825(0x69a)]())return!![];this[_0x2d0825(0x5c8)]='';break;case _0x2d0825(0x287):if(Imported[_0x2d0825(0x244)]){if(BattleManager[_0x2d0825(0x306)]['isAnyProjectilePresent']())return!![];this[_0x2d0825(0x5c8)]='';}break;case _0x2d0825(0x12c):if(Imported[_0x2d0825(0x1cf)]){if($gameScreen[_0x2d0825(0x738)]()[_0x2d0825(0x900)]>0x0)return!![];this['_waitMode']='';}break;case _0x2d0825(0x3f3):if(BattleManager['_spriteset'][_0x2d0825(0x9bd)]())return!![];this[_0x2d0825(0x5c8)]='';break;case _0x2d0825(0x186):if(Imported[_0x2d0825(0x1cf)]){if($gameScreen[_0x2d0825(0x738)]()[_0x2d0825(0x3bd)]>0x0)return!![];this[_0x2d0825(0x5c8)]='';}break;case'battleInjectPrep':if(Imported[_0x2d0825(0xb49)]){if(BattleManager[_0x2d0825(0x306)][_0x2d0825(0x242)]){if(BattleManager[_0x2d0825(0x306)][_0x2d0825(0x242)]())return!![];this[_0x2d0825(0x5c8)]=_0x2d0825(0xf2);}else this[_0x2d0825(0x5c8)]='';break;}break;case _0x2d0825(0xf2):if(Imported[_0x2d0825(0xb49)]){if(BattleManager['_spriteset'][_0x2d0825(0xafd)]())return!![];this[_0x2d0825(0x5c8)]='';}break;}return VisuMZ[_0x2d0825(0x841)]['Game_Interpreter_updateWaitMode'][_0x2d0825(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x681)]=Game_Interpreter['prototype'][_0x553167(0xb91)],Game_Interpreter['prototype'][_0x553167(0xb91)]=function(_0x3f2bec){const _0x27138f=_0x553167;return!$gameParty[_0x27138f(0x5e2)]()?this[_0x27138f(0x5be)](_0x3f2bec):VisuMZ[_0x27138f(0x841)][_0x27138f(0x681)][_0x27138f(0x7f7)](this,_0x3f2bec);},Game_Interpreter[_0x553167(0x22b)][_0x553167(0x2bc)]=function(_0x1d1940){const _0x21eeab=_0x553167;return VisuMZ[_0x21eeab(0x841)][_0x21eeab(0x681)][_0x21eeab(0x7f7)](this,_0x1d1940),BattleManager[_0x21eeab(0x49c)](_0x176491=>{const _0x4ade5f=_0x21eeab;this['_branch'][this[_0x4ade5f(0x70e)]]=_0x176491;}),!![];},VisuMZ[_0x553167(0x841)][_0x553167(0x400)]=function(_0x194dab){const _0x5790f8=_0x553167,_0x3319d1=$dataCommonEvents[_0x194dab];if(!_0x3319d1)return![];if(_0x3319d1[_0x5790f8(0x5d3)][_0x5790f8(0x635)]<=0x1)return![];return!![];},Game_Interpreter[_0x553167(0x22b)][_0x553167(0x5be)]=function(_0x40076c){const _0x1ef53d=_0x553167,_0x43b1f2=VisuMZ[_0x1ef53d(0x841)][_0x1ef53d(0x309)][_0x1ef53d(0x5d5)],_0x1f269c=_0x43b1f2[_0x1ef53d(0x14c)],_0x4df5b5=$dataCommonEvents[_0x1f269c];if(_0x4df5b5&&VisuMZ['BattleCore'][_0x1ef53d(0x400)](_0x1f269c)){const _0x5bb8ab=this[_0x1ef53d(0x156)]()?this['_eventId']:0x0,_0x453468=_0x4df5b5[_0x1ef53d(0x5d3)];this[_0x1ef53d(0x610)](_0x453468,_0x5bb8ab),this[_0x1ef53d(0x179)]=JsonEx['makeDeepCopy'](this[_0x1ef53d(0x179)]);const _0x48242f={'code':0xbc3,'indent':this[_0x1ef53d(0x70e)],'parameters':JsonEx[_0x1ef53d(0x323)](_0x40076c)};return this[_0x1ef53d(0x179)][_0x1ef53d(0x5e5)](this[_0x1ef53d(0xa45)]+0x1,0x0,_0x48242f),!![];}else return VisuMZ[_0x1ef53d(0x841)][_0x1ef53d(0x681)]['call'](this,_0x40076c);},VisuMZ[_0x553167(0x841)]['BattleManager_onEncounter']=BattleManager[_0x553167(0x1b2)],BattleManager['onEncounter']=function(){const _0x2c96f9=_0x553167;VisuMZ[_0x2c96f9(0x841)]['BattleManager_onEncounter'][_0x2c96f9(0x7f7)](this),this[_0x2c96f9(0x2b4)]();},BattleManager[_0x553167(0x2b4)]=function(){const _0xe282db=_0x553167,_0x475cb5=VisuMZ['BattleCore'][_0xe282db(0x309)]['Mechanics'],_0x10121e=_0x475cb5[_0xe282db(0x14c)];_0x10121e&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x10121e)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp['reserveCommonEvent'](_0x475cb5[_0xe282db(0x14c)]),$gameMap[_0xe282db(0xbf6)](),$gameMap[_0xe282db(0x5e7)][_0xe282db(0x46c)]=!![]),_0x475cb5[_0xe282db(0x46b)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x553167(0x841)][_0x553167(0x24f)]=Scene_Map['prototype'][_0x553167(0x88e)],Scene_Map[_0x553167(0x22b)][_0x553167(0x88e)]=function(){const _0x47a567=_0x553167;if(BattleManager[_0x47a567(0xb63)])return;VisuMZ[_0x47a567(0x841)]['Scene_Map_updateCallMenu'][_0x47a567(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x555)]=Scene_Map['prototype'][_0x553167(0x198)],Scene_Map[_0x553167(0x22b)]['launchBattle']=function(){const _0x1c24f5=_0x553167;BattleManager[_0x1c24f5(0xb63)]?this[_0x1c24f5(0xad1)]():VisuMZ[_0x1c24f5(0x841)][_0x1c24f5(0x555)][_0x1c24f5(0x7f7)](this);},Scene_Map[_0x553167(0x22b)][_0x553167(0xad1)]=function(){this['_active']=!![];},VisuMZ[_0x553167(0x841)][_0x553167(0x626)]=SceneManager[_0x553167(0xbba)],SceneManager[_0x553167(0xbba)]=function(){const _0x277da2=_0x553167;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ['BattleCore'][_0x277da2(0x626)][_0x277da2(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x66f)]=Game_Interpreter[_0x553167(0x22b)]['terminate'],Game_Interpreter[_0x553167(0x22b)][_0x553167(0x7ee)]=function(){const _0x28a6c0=_0x553167;VisuMZ[_0x28a6c0(0x841)][_0x28a6c0(0x66f)][_0x28a6c0(0x7f7)](this),this[_0x28a6c0(0x46c)]&&(this['_preBattleCommonEvent']=undefined,SceneManager['_scene']['battleCoreResumeLaunchBattle']());},Scene_Map[_0x553167(0x22b)][_0x553167(0x874)]=function(){const _0x20bb04=_0x553167;BattleManager[_0x20bb04(0xb63)]=undefined,BattleManager[_0x20bb04(0xb84)]=!![],this[_0x20bb04(0x9c4)]();},VisuMZ[_0x553167(0x841)]['Scene_Map_initializeAfter']=Scene_Map[_0x553167(0x22b)][_0x553167(0x7a1)],Scene_Map[_0x553167(0x22b)][_0x553167(0x7a1)]=function(){const _0x48c417=_0x553167;VisuMZ[_0x48c417(0x841)][_0x48c417(0x878)][_0x48c417(0x7f7)](this),BattleManager[_0x48c417(0xb84)]&&(this[_0x48c417(0x509)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x553167(0x841)]['Scene_Map_initialize']=Scene_Map['prototype'][_0x553167(0x7a1)],Scene_Map['prototype'][_0x553167(0x7a1)]=function(){const _0x42944e=_0x553167;VisuMZ['BattleCore'][_0x42944e(0xb04)][_0x42944e(0x7f7)](this),$gameTemp[_0x42944e(0x380)]();},VisuMZ[_0x553167(0x841)]['Scene_ItemBase_applyItem']=Scene_ItemBase['prototype'][_0x553167(0x410)],Scene_ItemBase[_0x553167(0x22b)][_0x553167(0x410)]=function(){const _0x43a3af=_0x553167;VisuMZ[_0x43a3af(0x841)][_0x43a3af(0x93f)]['call'](this);if(this[_0x43a3af(0x58c)]()[_0x43a3af(0x645)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x43a3af(0x645)][_0x43a3af(0x750)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x43a3af(0x22f)]=[]),DataManager[_0x43a3af(0xbfc)](this['item']())&&($gameTemp[_0x43a3af(0x22f)]=[]);},VisuMZ['BattleCore'][_0x553167(0x3f0)]=Scene_Options['prototype'][_0x553167(0x174)],Scene_Options[_0x553167(0x22b)][_0x553167(0x174)]=function(){const _0x231a21=_0x553167;let _0x11e811=VisuMZ[_0x231a21(0x841)][_0x231a21(0x3f0)][_0x231a21(0x7f7)](this);const _0x1f1ea2=VisuMZ[_0x231a21(0x841)][_0x231a21(0x309)];if(_0x1f1ea2[_0x231a21(0x898)][_0x231a21(0xb94)]&&_0x1f1ea2[_0x231a21(0x898)][_0x231a21(0x8e4)])_0x11e811+=0x2;if(_0x1f1ea2['HpGauge'][_0x231a21(0xb94)]&&_0x1f1ea2[_0x231a21(0x24c)][_0x231a21(0x8e4)])_0x11e811+=0x1;return _0x11e811;},VisuMZ[_0x553167(0x841)][_0x553167(0xaf2)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x7a1)],Scene_Battle['prototype'][_0x553167(0x7a1)]=function(){const _0x2073f4=_0x553167;VisuMZ[_0x2073f4(0x841)][_0x2073f4(0xaf2)][_0x2073f4(0x7f7)](this),this[_0x2073f4(0xf4)]();},VisuMZ[_0x553167(0x841)][_0x553167(0xb5f)]=Scene_Battle[_0x553167(0x22b)]['start'],Scene_Battle[_0x553167(0x22b)]['start']=function(){const _0xa15521=_0x553167;SceneManager[_0xa15521(0x783)]()?(Scene_Message[_0xa15521(0x22b)][_0xa15521(0x1e5)][_0xa15521(0x7f7)](this),this[_0xa15521(0x306)]&&this[_0xa15521(0x306)]['update'](),BattleManager[_0xa15521(0x4db)]&&BattleManager[_0xa15521(0xb76)]()):(VisuMZ[_0xa15521(0x841)][_0xa15521(0xb5f)][_0xa15521(0x7f7)](this),$gameTroop[_0xa15521(0xb25)]());},VisuMZ[_0x553167(0x841)][_0x553167(0x3ab)]=Scene_Battle['prototype']['stop'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x9c4)]=function(){const _0x7061ba=_0x553167;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x7061ba(0x22b)][_0x7061ba(0x9c4)]['call'](this):VisuMZ[_0x7061ba(0x841)][_0x7061ba(0x3ab)]['call'](this);},VisuMZ['BattleCore'][_0x553167(0x527)]=Scene_Battle['prototype'][_0x553167(0x7ee)],Scene_Battle[_0x553167(0x22b)]['terminate']=function(){const _0x170435=_0x553167;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x170435(0x22b)]['terminate'][_0x170435(0x7f7)](this):VisuMZ[_0x170435(0x841)]['Scene_Battle_terminate']['call'](this),$gameTemp['clearBattleBalloons'](),this[_0x170435(0xf4)]();},Scene_Battle['prototype'][_0x553167(0x7ce)]=function(){const _0x1a5652=_0x553167;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x1a5652(0x5c5)]!==undefined)return ConfigManager[_0x1a5652(0x5c5)];else{if(this['battleLayoutStyle']()===_0x1a5652(0xb17))return![];else{return Scene_Message[_0x1a5652(0x22b)][_0x1a5652(0x7ce)]['call'](this);;}}},VisuMZ[_0x553167(0x841)][_0x553167(0x7ef)]=Scene_Battle['prototype'][_0x553167(0x7b4)],Scene_Battle['prototype'][_0x553167(0x7b4)]=function(){const _0x482dcc=_0x553167;VisuMZ[_0x482dcc(0x841)][_0x482dcc(0x7ef)][_0x482dcc(0x7f7)](this),this[_0x482dcc(0x297)]()===_0x482dcc(0xb17)&&this[_0x482dcc(0xbf3)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0xbf5)]=function(_0x3d5374){const _0x3f1461=_0x553167;_0x3d5374?(this[_0x3f1461(0x3c8)]['x']=(Graphics[_0x3f1461(0x9ce)]-Graphics['boxWidth'])/0x2,this['_windowLayer']['y']=(Graphics[_0x3f1461(0x908)]-Graphics[_0x3f1461(0xbcf)])/0x2):(this[_0x3f1461(0x3c8)]['x']=Graphics[_0x3f1461(0x9ce)]*0xa,this[_0x3f1461(0x3c8)]['y']=Graphics['height']*0xa);},VisuMZ[_0x553167(0x841)][_0x553167(0x43d)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0xb80)],Scene_Battle['prototype']['selectNextCommand']=function(){const _0x71dd2f=_0x553167,_0x3b8618=BattleManager[_0x71dd2f(0xaa9)]();VisuMZ[_0x71dd2f(0x841)][_0x71dd2f(0x43d)][_0x71dd2f(0x7f7)](this);if(_0x3b8618){if(_0x3b8618===BattleManager['actor']())return;if(_0x3b8618===BattleManager[_0x71dd2f(0x1ef)])return;if(_0x3b8618['battler']())_0x3b8618[_0x71dd2f(0x8d6)]()[_0x71dd2f(0x861)]();}},VisuMZ[_0x553167(0x841)][_0x553167(0x18a)]=Scene_Battle[_0x553167(0x22b)]['selectPreviousCommand'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x9fb)]=function(){const _0x591666=_0x553167,_0x1afd88=BattleManager[_0x591666(0xaa9)]();if(_0x1afd88&&_0x1afd88[_0x591666(0x8d6)])_0x1afd88[_0x591666(0x8d6)]()[_0x591666(0x861)]();VisuMZ[_0x591666(0x841)][_0x591666(0x18a)][_0x591666(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x135)]=Scene_Battle[_0x553167(0x22b)]['createAllWindows'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x57f)]=function(){const _0x316531=_0x553167;this['createEnemyNameContainer'](),VisuMZ['BattleCore'][_0x316531(0x135)][_0x316531(0x7f7)](this),this[_0x316531(0x6c5)]();},VisuMZ[_0x553167(0x841)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x553167(0x22b)][_0x553167(0x7af)],Scene_Battle[_0x553167(0x22b)][_0x553167(0x7af)]=function(){const _0x2c6c7b=_0x553167;if(VisuMZ['BattleCore'][_0x2c6c7b(0x309)][_0x2c6c7b(0x875)][_0x2c6c7b(0xacc)])return VisuMZ[_0x2c6c7b(0x841)][_0x2c6c7b(0x309)][_0x2c6c7b(0x875)]['BattleLogRectJS'][_0x2c6c7b(0x7f7)](this);return VisuMZ[_0x2c6c7b(0x841)][_0x2c6c7b(0x7d0)]['call'](this);},VisuMZ['BattleCore'][_0x553167(0x82d)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x4e9)],Scene_Battle[_0x553167(0x22b)][_0x553167(0x4e9)]=function(){const _0x593207=_0x553167;VisuMZ[_0x593207(0x841)]['Scene_Battle_createPartyCommandWindow']['call'](this),this[_0x593207(0x8fe)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x8fe)]=function(){const _0x391192=_0x553167,_0x34f88f=this[_0x391192(0x176)];_0x34f88f['setHandler'](_0x391192(0x998),this['commandAutoBattle'][_0x391192(0x161)](this)),_0x34f88f[_0x391192(0x945)](_0x391192(0x641),this[_0x391192(0x72c)]['bind'](this));const _0x315194=this[_0x391192(0x297)]();switch(_0x315194){case'xp':case _0x391192(0x7cf):return this[_0x391192(0x176)][_0x391192(0x785)](0x1);break;}},Scene_Battle['prototype'][_0x553167(0x363)]=function(){const _0x321e85=_0x553167;BattleManager[_0x321e85(0x7c7)]=!![],$gameParty[_0x321e85(0x1f6)](),this[_0x321e85(0xb80)](),BattleManager['isTpb']()&&(BattleManager[_0x321e85(0x178)]=![]);},Scene_Battle['prototype'][_0x553167(0x72c)]=function(){const _0xeb6090=_0x553167;this[_0xeb6090(0x506)]()?(this['_callSceneOptions']=!![],this['_logWindow']['push'](_0xeb6090(0x278),VisuMZ[_0xeb6090(0x841)][_0xeb6090(0x309)]['PartyCmd'][_0xeb6090(0xbda)])):this[_0xeb6090(0x408)]();},Scene_Battle[_0x553167(0x22b)]['isQueueOptionsMenu']=function(){const _0x3bc4e4=_0x553167;return BattleManager[_0x3bc4e4(0x619)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x408)]=function(){const _0x29d1f3=_0x553167;this[_0x29d1f3(0x99b)]=![],this[_0x29d1f3(0x306)][_0x29d1f3(0xbcd)](),this[_0x29d1f3(0x3c8)][_0x29d1f3(0x743)]=![];if(BattleManager['isBattleTest']())($dataSystem['battleback1Name']||$dataSystem[_0x29d1f3(0x3f5)])&&SceneManager[_0x29d1f3(0xf5)]();else($gameMap['battleback1Name']()||$gameMap[_0x29d1f3(0x3f5)]())&&SceneManager[_0x29d1f3(0xf5)]();SceneManager['push'](Scene_Options),BattleManager[_0x29d1f3(0x981)]()&&(BattleManager[_0x29d1f3(0x4db)]=BattleManager[_0x29d1f3(0xaa9)]());},VisuMZ[_0x553167(0x841)][_0x553167(0x686)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0xb34)],Scene_Battle[_0x553167(0x22b)][_0x553167(0xb34)]=function(){const _0x34997d=_0x553167;VisuMZ[_0x34997d(0x841)][_0x34997d(0x686)][_0x34997d(0x7f7)](this);if(this[_0x34997d(0x99b)]&&!BattleManager[_0x34997d(0x1ef)])this['callOptions']();},VisuMZ[_0x553167(0x841)]['Scene_Battle_update']=Scene_Battle['prototype'][_0x553167(0xbcd)],Scene_Battle[_0x553167(0x22b)][_0x553167(0xbcd)]=function(){const _0x454f9f=_0x553167;VisuMZ[_0x454f9f(0x841)][_0x454f9f(0x6dd)][_0x454f9f(0x7f7)](this),this[_0x454f9f(0x616)]();},Scene_Battle['prototype'][_0x553167(0x6c5)]=function(){const _0xe5182f=_0x553167,_0x32d34d=this[_0xe5182f(0x95d)]();this[_0xe5182f(0x774)]=new Window_AutoBattleCancel(_0x32d34d),this[_0xe5182f(0x774)][_0xe5182f(0x447)](),this[_0xe5182f(0xbd9)](this['_autoBattleWindow']);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x95d)]=function(){const _0x1fa687=_0x553167;return VisuMZ[_0x1fa687(0x841)][_0x1fa687(0x309)][_0x1fa687(0x898)][_0x1fa687(0x1ba)][_0x1fa687(0x7f7)](this);},Scene_Battle[_0x553167(0x22b)]['clearOnceParallelInterpreters']=function(){const _0x518a50=_0x553167;this[_0x518a50(0x8a7)]=[];},Scene_Battle[_0x553167(0x22b)]['updateOnceParallelInterpreters']=function(){const _0x185886=_0x553167;if(!this[_0x185886(0x8a7)])return;for(const _0x281d24 of this[_0x185886(0x8a7)]){_0x281d24&&_0x281d24[_0x185886(0xbcd)]();}},Scene_Battle[_0x553167(0x22b)]['playOnceParallelInterpreter']=function(_0x20be16){const _0x197421=$dataCommonEvents[_0x20be16];if(!_0x197421)return;const _0x58ba00=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x58ba00),_0x58ba00['setCommonEvent'](_0x20be16);},Scene_Battle[_0x553167(0x22b)]['addOnceParallelInterpreter']=function(_0x1e96cf){const _0x49254f=_0x553167;this[_0x49254f(0x8a7)]=this[_0x49254f(0x8a7)]||[],this[_0x49254f(0x8a7)][_0x49254f(0x9d2)](_0x1e96cf);},Scene_Battle['prototype']['removeOnceParallelInterpreter']=function(_0x5cefc1){const _0x5c3ec5=_0x553167;this[_0x5c3ec5(0x8a7)]=this[_0x5c3ec5(0x8a7)]||[],this[_0x5c3ec5(0x8a7)][_0x5c3ec5(0x4c0)](_0x5cefc1);},Game_Troop[_0x553167(0x22b)][_0x553167(0xb25)]=function(){const _0x1c6dc6=_0x553167;for(const _0x55bdff of this[_0x1c6dc6(0x807)]()[_0x1c6dc6(0x701)]){if(!this[_0x1c6dc6(0x384)](_0x55bdff))continue;SceneManager[_0x1c6dc6(0xa7f)][_0x1c6dc6(0x1a7)](_0x55bdff);}},Game_Troop['prototype'][_0x553167(0x384)]=function(_0x23b07f){const _0x41710a=_0x553167;if(!_0x23b07f)return;for(const _0x3dab9c of _0x23b07f[_0x41710a(0x5d3)]){if([0x6c,0x198]['includes'](_0x3dab9c[_0x41710a(0x148)])){const _0x3b88eb=_0x3dab9c[_0x41710a(0x2a1)][0x0];if(_0x3b88eb[_0x41710a(0x750)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x553167(0x22b)][_0x553167(0x1a7)]=function(_0x19f54c){const _0x1808fa=_0x553167;if(!_0x19f54c)return;const _0x3b7561=new Game_BattleOnceParallelInterpreter();this[_0x1808fa(0xa7c)](_0x3b7561),_0x3b7561[_0x1808fa(0x2e1)](_0x19f54c);};function Game_BattleOnceParallelInterpreter(){const _0x15b91e=_0x553167;this[_0x15b91e(0x7a1)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x553167(0x595)](Game_Interpreter[_0x553167(0x22b)]),Game_BattleOnceParallelInterpreter[_0x553167(0x22b)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype']['setCommonEvent']=function(_0x172ade){const _0x1a6c67=_0x553167,_0x16e428=$dataCommonEvents[_0x172ade];_0x16e428?this['setup'](_0x16e428[_0x1a6c67(0x5d3)],0x0):this[_0x1a6c67(0x7ee)]();},Game_BattleOnceParallelInterpreter[_0x553167(0x22b)]['terminate']=function(){const _0x40fa46=_0x553167;if(!SceneManager[_0x40fa46(0x2c2)]())return;SceneManager[_0x40fa46(0xa7f)][_0x40fa46(0x283)](this),Game_Interpreter[_0x40fa46(0x22b)][_0x40fa46(0x7ee)][_0x40fa46(0x7f7)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x553167(0x2e1)]=function(_0x4fd942){const _0x3972e0=_0x553167;_0x4fd942?this['setup'](_0x4fd942[_0x3972e0(0x5d3)],0x0):this[_0x3972e0(0x7ee)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x5fd)]=function(){const _0x557a58=_0x553167;return VisuMZ['BattleCore']['Settings'][_0x557a58(0xb2b)][_0x557a58(0x2d4)];},VisuMZ[_0x553167(0x841)][_0x553167(0x5df)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x107)],Scene_Battle[_0x553167(0x22b)][_0x553167(0x107)]=function(){const _0x52a233=_0x553167;this['isPartyCommandWindowDisabled']()?this[_0x52a233(0x9b6)]():VisuMZ[_0x52a233(0x841)]['Scene_Battle_startPartyCommandSelection'][_0x52a233(0x7f7)](this);},Scene_Battle['prototype'][_0x553167(0x9b6)]=function(){const _0x215ec9=_0x553167;if(BattleManager[_0x215ec9(0xadd)]())this[_0x215ec9(0xb80)]();else BattleManager[_0x215ec9(0x981)]()&&VisuMZ[_0x215ec9(0x841)][_0x215ec9(0x5df)][_0x215ec9(0x7f7)](this);},VisuMZ['BattleCore'][_0x553167(0x9a3)]=Scene_Battle[_0x553167(0x22b)]['commandFight'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x81a)]=function(){const _0x3a8830=_0x553167;BattleManager[_0x3a8830(0x981)]()?(this[_0x3a8830(0x100)](),this[_0x3a8830(0x349)]()):VisuMZ['BattleCore'][_0x3a8830(0x9a3)]['call'](this);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x100)]=function(){const _0x5e0ee3=_0x553167;if(!VisuMZ[_0x5e0ee3(0x841)][_0x5e0ee3(0x834)])return;if(Imported[_0x5e0ee3(0x916)]&&BattleManager[_0x5e0ee3(0x1eb)]())return;const _0x56f137=$gameParty['aliveMembers']()[_0x5e0ee3(0x577)](_0xab88=>_0xab88['isTpbCharged']()&&_0xab88[_0x5e0ee3(0x8e6)]());BattleManager[_0x5e0ee3(0x7ec)]=_0x56f137[0x0]||null,BattleManager['_currentActor']&&BattleManager['_currentActor']['setActionState'](_0x5e0ee3(0x3cd));},VisuMZ[_0x553167(0x841)][_0x553167(0xbfa)]=Scene_Battle[_0x553167(0x22b)]['commandEscape'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x55e)]=function(){const _0x1512aa=_0x553167;VisuMZ[_0x1512aa(0x841)]['Scene_Battle_commandEscape'][_0x1512aa(0x7f7)](this);if(!BattleManager['isTpb']())BattleManager[_0x1512aa(0x7ec)]=null;},VisuMZ[_0x553167(0x841)][_0x553167(0x39b)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x201)],Scene_Battle[_0x553167(0x22b)]['createActorCommandWindow']=function(){const _0x4f0a7b=_0x553167;VisuMZ[_0x4f0a7b(0x841)]['Scene_Battle_createActorCommandWindow'][_0x4f0a7b(0x7f7)](this),this[_0x4f0a7b(0x2a2)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x2a2)]=function(){const _0x5824b4=_0x553167,_0x5a70e3=this[_0x5824b4(0x184)];_0x5a70e3[_0x5824b4(0x945)]('escape',this[_0x5824b4(0x749)][_0x5824b4(0x161)](this)),_0x5a70e3[_0x5824b4(0x945)](_0x5824b4(0x998),this[_0x5824b4(0x7eb)][_0x5824b4(0x161)](this)),_0x5a70e3[_0x5824b4(0x945)]('singleSkill',this['actorCommandSingleSkill'][_0x5824b4(0x161)](this)),BattleManager[_0x5824b4(0x981)]()&&(this[_0x5824b4(0x5fd)]()?delete _0x5a70e3[_0x5824b4(0xaa6)][_0x5824b4(0x32f)]:_0x5a70e3['setHandler'](_0x5824b4(0x32f),this['actorCommandCancelTPB']['bind'](this)));},Scene_Battle[_0x553167(0x22b)]['actorCommandEscape']=function(){const _0x389d66=_0x553167;this[_0x389d66(0x55e)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x7eb)]=function(){const _0x503f61=_0x553167;BattleManager[_0x503f61(0xaa9)]()[_0x503f61(0x37d)](),BattleManager[_0x503f61(0x4e6)](),BattleManager[_0x503f61(0x7bc)](),this[_0x503f61(0xb1b)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x4a0)]=function(){const _0x21d0f6=_0x553167,_0xb36fe2=BattleManager[_0x21d0f6(0x815)](),_0x196996=this[_0x21d0f6(0x184)][_0x21d0f6(0x5dd)]();_0xb36fe2['setSkill'](_0x196996),BattleManager['actor']()['setLastBattleSkill']($dataSkills[_0x196996]),this['onSelectAction']();},Scene_Battle[_0x553167(0x22b)]['actorCommandCancelTPB']=function(){const _0x526f8f=_0x553167;this[_0x526f8f(0x262)]()?this[_0x526f8f(0xb58)]():this[_0x526f8f(0x1dc)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x834)]=![],Scene_Battle[_0x553167(0x22b)][_0x553167(0x262)]=function(){const _0x1177cd=_0x553167;if(Imported[_0x1177cd(0x916)]&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x1177cd(0x841)][_0x1177cd(0x834)])return![];const _0x56083e=$gameParty[_0x1177cd(0x58e)]()[_0x1177cd(0x577)](_0x2fc559=>_0x2fc559[_0x1177cd(0x144)]()&&_0x2fc559['canInput']());return _0x56083e[_0x1177cd(0x635)]>0x0&&BattleManager[_0x1177cd(0xaa9)]()!==_0x56083e[_0x56083e['length']-0x1];}},Scene_Battle['prototype'][_0x553167(0xb58)]=function(){const _0x34fcb2=_0x553167,_0x25b179=BattleManager[_0x34fcb2(0xaa9)](),_0x168f48=_0x25b179['battler']();if(_0x168f48)_0x168f48[_0x34fcb2(0x861)]();const _0x597f80=$gameParty[_0x34fcb2(0x58e)]()['filter'](_0x42b9f7=>_0x42b9f7[_0x34fcb2(0x144)]()&&_0x42b9f7[_0x34fcb2(0x8e6)]()),_0x5f1306=_0x597f80[_0x34fcb2(0x163)](_0x25b179),_0x3e13b3=_0x597f80[_0x5f1306+0x1];BattleManager[_0x34fcb2(0x7ec)]=_0x3e13b3||null;if(_0x3e13b3)_0x3e13b3[_0x34fcb2(0x611)](_0x34fcb2(0x3cd));_0x25b179[_0x34fcb2(0x611)]('undecided'),this[_0x34fcb2(0xb1b)]();},Scene_Battle[_0x553167(0x22b)]['processActorCommandCancelTPB']=function(){const _0xe5232a=_0x553167;this[_0xe5232a(0x176)][_0xe5232a(0x303)](),this['_actorCommandWindow'][_0xe5232a(0xa1c)]();if(!VisuMZ[_0xe5232a(0x841)]['TpbActiveChangeEnabled'])return;if(Imported[_0xe5232a(0x916)]&&BattleManager[_0xe5232a(0x1eb)]())return;if(BattleManager['_currentActor']){BattleManager[_0xe5232a(0x7ec)][_0xe5232a(0x611)]('undecided');const _0x5a8c2d=BattleManager[_0xe5232a(0x7ec)][_0xe5232a(0x8d6)]();if(_0x5a8c2d)_0x5a8c2d[_0xe5232a(0x861)]();}BattleManager[_0xe5232a(0x7ec)]=null;},VisuMZ[_0x553167(0x841)]['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x553167(0x59b)],Scene_Battle[_0x553167(0x22b)]['createHelpWindow']=function(){const _0x2b935e=_0x553167;VisuMZ[_0x2b935e(0x841)][_0x2b935e(0x784)]['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x553167(0x22b)]['createHelpWindowBattleCore']=function(){const _0x397d9f=_0x553167;this['_actorCommandWindow'][_0x397d9f(0x696)](this[_0x397d9f(0x2c1)]),this[_0x397d9f(0x176)][_0x397d9f(0x696)](this['_helpWindow']);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x59a)]=function(){const _0x3e9855=_0x553167;if(!VisuMZ[_0x3e9855(0x841)]['Settings'][_0x3e9855(0x194)][_0x3e9855(0x8c5)])return;this[_0x3e9855(0x8fa)]=new Sprite(),this[_0x3e9855(0x8fa)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this['_windowLayer']['y'];const _0x167ac4=this[_0x3e9855(0xa39)][_0x3e9855(0x163)](this['_windowLayer']);this[_0x3e9855(0x667)](this['_enemyNameContainer'],_0x167ac4);for(let _0x38398d=0x0;_0x38398d<0x8;_0x38398d++){const _0x1acc52=new Window_EnemyName(_0x38398d);this[_0x3e9855(0x8fa)][_0x3e9855(0xbd9)](_0x1acc52);}},VisuMZ[_0x553167(0x841)][_0x553167(0x14d)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x5a1)],Scene_Battle['prototype'][_0x553167(0x5a1)]=function(){const _0x1a06d0=_0x553167;VisuMZ[_0x1a06d0(0x841)]['Scene_Battle_createEnemyWindow'][_0x1a06d0(0x7f7)](this),this['createMultiTargetWindows']();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x7a5)]=function(){const _0x2da44d=_0x553167;this[_0x2da44d(0xa6a)](!![]),this[_0x2da44d(0xa6a)](![]);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x160)]=function(_0x448d87){const _0x3d6274=_0x553167,_0x3e101f=Window_BattleMultiTarget[_0x3d6274(0x7fd)],_0x122beb=this[_0x3d6274(0x54b)](0x1,!![]);let _0x3d928a=_0x448d87?Graphics[_0x3d6274(0x5f7)]-_0x3e101f:0x0;_0x3d928a+=_0x448d87?Window_BattleMultiTarget[_0x3d6274(0xbb0)]:Window_BattleMultiTarget[_0x3d6274(0x214)];const _0x2a26b7=[_0x3d6274(0x517)]['includes'](this[_0x3d6274(0x297)]())?0x0:this['_statusWindow'][_0x3d6274(0x908)];let _0x33102b=Graphics[_0x3d6274(0xbcf)]-_0x2a26b7-_0x122beb;return _0x33102b+=_0x448d87?Window_BattleMultiTarget[_0x3d6274(0x8bd)]:Window_BattleMultiTarget['ENEMY_OFFSET_Y'],new Rectangle(_0x3d928a,_0x33102b,_0x3e101f,_0x122beb);},Scene_Battle['prototype'][_0x553167(0xa6a)]=function(_0x5a7a43){const _0x1015f8=_0x553167,_0x513dc0=this[_0x1015f8(0x160)](_0x5a7a43),_0x4955bc=new Window_BattleMultiTarget(_0x513dc0,_0x5a7a43);this[_0x1015f8(0x41c)](_0x4955bc),_0x5a7a43?this[_0x1015f8(0x102)]=_0x4955bc:this[_0x1015f8(0x85e)]=_0x4955bc;},VisuMZ[_0x553167(0x841)][_0x553167(0x92a)]=Scene_Battle[_0x553167(0x22b)]['needsInputWindowChange'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x499)]=function(){const _0x3ffc4c=_0x553167;if(this[_0x3ffc4c(0x90c)])return![];return VisuMZ[_0x3ffc4c(0x841)]['Scene_Battle_needsInputWindowChangeIBS'][_0x3ffc4c(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x883)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x53d)],Scene_Battle['prototype'][_0x553167(0x53d)]=function(){const _0x4a6222=_0x553167;if(this['_cancelButton']&&this['_inBattleStatusMode']){this[_0x4a6222(0x8fd)][_0x4a6222(0x743)]=!![];return;}VisuMZ[_0x4a6222(0x841)][_0x4a6222(0x883)][_0x4a6222(0x7f7)](this);},VisuMZ[_0x553167(0x841)]['Scene_Battle_isTimeActiveIBS']=Scene_Battle[_0x553167(0x22b)]['isTimeActive'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x38c)]=function(){const _0x11c786=_0x553167;if(this[_0x11c786(0x90c)])return![];return VisuMZ[_0x11c786(0x841)][_0x11c786(0x1b3)]['call'](this);},VisuMZ[_0x553167(0x841)]['Scene_Battle_createAllWindowsIBS']=Scene_Battle[_0x553167(0x22b)]['createAllWindows'],Scene_Battle[_0x553167(0x22b)]['createAllWindows']=function(){const _0x4eaece=_0x553167;VisuMZ[_0x4eaece(0x841)]['Scene_Battle_createAllWindowsIBS'][_0x4eaece(0x7f7)](this),this['createInBattleStatusWindow']();},VisuMZ[_0x553167(0x841)][_0x553167(0x559)]=Scene_Battle['prototype'][_0x553167(0x4e9)],Scene_Battle['prototype']['createPartyCommandWindow']=function(){const _0x421c68=_0x553167;VisuMZ[_0x421c68(0x841)][_0x421c68(0x559)]['call'](this);const _0x290b14=this[_0x421c68(0x176)];_0x290b14[_0x421c68(0x945)](_0x421c68(0x786),this['startInBattleStatus'][_0x421c68(0x161)](this,_0x290b14));},VisuMZ['BattleCore'][_0x553167(0x964)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x201)],Scene_Battle['prototype']['createActorCommandWindow']=function(){const _0x58dfd0=_0x553167;VisuMZ[_0x58dfd0(0x841)][_0x58dfd0(0x964)][_0x58dfd0(0x7f7)](this);const _0x2196cd=this[_0x58dfd0(0x184)];_0x2196cd[_0x58dfd0(0x945)]('status',this[_0x58dfd0(0x40a)][_0x58dfd0(0x161)](this,_0x2196cd));},Scene_Battle[_0x553167(0x22b)][_0x553167(0x6cf)]=function(){const _0x527a93=_0x553167,_0x4b0653=this[_0x527a93(0xae6)](),_0x44d243=new Window_InBattleStatus(_0x4b0653);this['addWindow'](_0x44d243),_0x44d243[_0x527a93(0x447)](),_0x44d243[_0x527a93(0xa1c)](),this['_inBattleStatusWindow']=_0x44d243;},Scene_Battle[_0x553167(0x22b)][_0x553167(0xae6)]=function(){const _0x2d1839=_0x553167;if(VisuMZ[_0x2d1839(0x841)][_0x2d1839(0x309)][_0x2d1839(0x907)][_0x2d1839(0x1db)])return VisuMZ['BattleCore']['Settings'][_0x2d1839(0x907)]['StatusWindow_RectJS'][_0x2d1839(0x7f7)](this);const _0x2503e2=Graphics[_0x2d1839(0x5f7)]>0x3e8?0x78:0x0,_0x4ccab7=this[_0x2d1839(0x2c1)]['y']+this[_0x2d1839(0x2c1)]['height'],_0x3aebaa=Graphics[_0x2d1839(0x5f7)]-_0x2503e2*0x2,_0x2f9285=Graphics[_0x2d1839(0xbcf)]-_0x4ccab7-this[_0x2d1839(0xa36)]();return new Rectangle(_0x2503e2,_0x4ccab7,_0x3aebaa,_0x2f9285);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x40a)]=function(_0x519ca9){const _0x1d1135=_0x553167;this[_0x1d1135(0x41c)](this['_inBattleStatusWindow']),this['_inBattleStatusMode']=!![],this['_helpWindow'][_0x1d1135(0x8b8)]();const _0x41a576=['xp','portrait',_0x1d1135(0xb17),_0x1d1135(0x8b1),_0x1d1135(0x517)];let _0x5bd420=_0x41a576['includes'](this[_0x1d1135(0x297)]());_0x5bd420&&(_0x519ca9[_0x1d1135(0x447)](),_0x519ca9[_0x1d1135(0xa1c)]()),this['_inBattleStatusWindow'][_0x1d1135(0x4e5)](BattleManager[_0x1d1135(0xaa9)]()||$gameParty[_0x1d1135(0x22d)]()[0x0]),this[_0x1d1135(0xa3d)]['setReturnWindow'](_0x519ca9),this[_0x1d1135(0xa3d)]['show'](),this[_0x1d1135(0xa3d)][_0x1d1135(0x5f9)]();},Scene_Battle[_0x553167(0x22b)]['endInBattleStatus']=function(){const _0x52c452=_0x553167;this[_0x52c452(0x90c)]=![],this[_0x52c452(0x2c1)][_0x52c452(0x447)]();const _0x531c51=this[_0x52c452(0xa3d)][_0x52c452(0x7d6)]();_0x531c51[_0x52c452(0x8b8)](),_0x531c51['open'](),_0x531c51['activate'](),this[_0x52c452(0xa3d)][_0x52c452(0x447)](),this['_inBattleStatusWindow'][_0x52c452(0xa1c)]();},Scene_Battle[_0x553167(0x22b)]['battleLayoutStyle']=function(){const _0x50ecf6=_0x553167;if($gameTemp[_0x50ecf6(0x539)]!==undefined)return $gameTemp[_0x50ecf6(0x539)];if(this['_battleLayoutStyle'])return this[_0x50ecf6(0xb59)];return this['_battleLayoutStyle']=VisuMZ['BattleCore'][_0x50ecf6(0x309)][_0x50ecf6(0x4a7)][_0x50ecf6(0xb2d)][_0x50ecf6(0xb3c)]()[_0x50ecf6(0x976)](),this[_0x50ecf6(0xb59)]===_0x50ecf6(0x8b1)&&!Imported[_0x50ecf6(0x779)]&&(this[_0x50ecf6(0xb59)]=_0x50ecf6(0x734)),this[_0x50ecf6(0xb59)]==='frontview_ui'&&!Imported[_0x50ecf6(0x130)]&&(this['_battleLayoutStyle']=_0x50ecf6(0x734)),this[_0x50ecf6(0xb59)];},VisuMZ[_0x553167(0x841)][_0x553167(0x9d6)]=Scene_Battle['prototype'][_0x553167(0xa36)],Scene_Battle['prototype'][_0x553167(0xa36)]=function(){const _0x4d0b85=_0x553167,_0x3463ab=this[_0x4d0b85(0x297)]();switch(_0x3463ab){case _0x4d0b85(0x5d3):return this[_0x4d0b85(0x54b)](Math[_0x4d0b85(0x4c1)](0x1,$gameParty[_0x4d0b85(0x762)]()),!![]);break;case _0x4d0b85(0xb17):return this['calcWindowHeight'](0x4,!![]);break;default:return VisuMZ['BattleCore'][_0x4d0b85(0x9d6)][_0x4d0b85(0x7f7)](this);break;}},VisuMZ[_0x553167(0x841)][_0x553167(0x763)]=Scene_Battle['prototype']['helpWindowRect'],Scene_Battle['prototype'][_0x553167(0x9f5)]=function(){const _0x315609=_0x553167,_0x1f7b89=this[_0x315609(0x297)]();switch(_0x1f7b89){case'border':return this[_0x315609(0x4d0)]();break;case _0x315609(0x734):case _0x315609(0x5d3):case'xp':case _0x315609(0x7cf):default:return VisuMZ[_0x315609(0x841)]['Scene_Battle_helpWindowRect'][_0x315609(0x7f7)](this);break;}},Scene_Battle[_0x553167(0x22b)][_0x553167(0x5e1)]=function(){const _0x4e3a7e=_0x553167,_0x575da9=this[_0x4e3a7e(0x297)]();switch(_0x575da9){case'xp':case _0x4e3a7e(0x7cf):return this['statusWindowRectXPStyle']();break;case'border':return this[_0x4e3a7e(0x5dc)]();break;case _0x4e3a7e(0x734):case _0x4e3a7e(0x5d3):default:return this[_0x4e3a7e(0xbf0)]();break;}},VisuMZ[_0x553167(0x841)][_0x553167(0x205)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x20e)],Scene_Battle[_0x553167(0x22b)][_0x553167(0x20e)]=function(){const _0x62a991=_0x553167,_0x5f2748=this[_0x62a991(0x297)]();switch(_0x5f2748){case'xp':case _0x62a991(0x7cf):return this[_0x62a991(0x96a)]();break;case _0x62a991(0xb17):return this[_0x62a991(0xa85)]();case _0x62a991(0x734):case _0x62a991(0x5d3):default:return this[_0x62a991(0x3cb)]();break;}},Scene_Battle[_0x553167(0x22b)]['partyCommandWindowRectDefaultStyle']=function(){const _0x5aeef6=_0x553167,_0x19b7f2=VisuMZ[_0x5aeef6(0x841)][_0x5aeef6(0x309)][_0x5aeef6(0x4a7)],_0x134fc0=_0x19b7f2['CommandWidth']||0xc0,_0x5af14d=this[_0x5aeef6(0xa36)](),_0x1f17e5=this[_0x5aeef6(0x7ce)]()?Graphics[_0x5aeef6(0x5f7)]-_0x134fc0:0x0,_0x5742f9=Graphics[_0x5aeef6(0xbcf)]-_0x5af14d;return new Rectangle(_0x1f17e5,_0x5742f9,_0x134fc0,_0x5af14d);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x569)]=function(){return this['partyCommandWindowRect']();},VisuMZ['BattleCore'][_0x553167(0x1be)]=Scene_Battle['prototype'][_0x553167(0xb6a)],Scene_Battle[_0x553167(0x22b)][_0x553167(0xb6a)]=function(){const _0x3807f1=_0x553167;if(this['_inBattleStatusMode'])return;const _0x33c44d=this['battleLayoutStyle']();switch(_0x33c44d){case'xp':case _0x3807f1(0x7cf):case _0x3807f1(0xb17):break;case'default':case _0x3807f1(0x5d3):default:VisuMZ[_0x3807f1(0x841)][_0x3807f1(0x1be)][_0x3807f1(0x7f7)](this);break;}},Scene_Battle[_0x553167(0x22b)]['statusWindowRectDefaultStyle']=function(){const _0x76eebd=_0x553167,_0x51f649=VisuMZ['BattleCore'][_0x76eebd(0x309)]['BattleLayout'],_0x1dfb5b=Window_BattleStatus[_0x76eebd(0x22b)][_0x76eebd(0x60c)](),_0x2da53e=Graphics[_0x76eebd(0x5f7)]-(_0x51f649[_0x76eebd(0xae8)]||0xc0),_0xe84ce7=this[_0x76eebd(0xa36)]()+_0x1dfb5b,_0x2503e5=this[_0x76eebd(0x7ce)]()?0x0:Graphics[_0x76eebd(0x5f7)]-_0x2da53e,_0x50ae3b=Graphics['boxHeight']-_0xe84ce7+_0x1dfb5b;return new Rectangle(_0x2503e5,_0x50ae3b,_0x2da53e,_0xe84ce7);},Scene_Battle['prototype'][_0x553167(0x655)]=function(){const _0x2a3777=_0x553167,_0x436622=Window_BattleStatus[_0x2a3777(0x22b)][_0x2a3777(0x60c)](),_0x5eddb8=Graphics['boxWidth'],_0xacaf74=this['windowAreaHeight']()+_0x436622,_0x1921c3=0x0,_0xb4f4b5=Graphics[_0x2a3777(0xbcf)]-_0xacaf74+_0x436622;return new Rectangle(_0x1921c3,_0xb4f4b5,_0x5eddb8,_0xacaf74);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x96a)]=function(){const _0x2244c2=_0x553167,_0x5c6b7d=Graphics[_0x2244c2(0x5f7)]/0x2,_0x509c38=this[_0x2244c2(0x54b)](VisuMZ[_0x2244c2(0x841)]['Settings'][_0x2244c2(0x4a7)][_0x2244c2(0x124)],!![]),_0xb59861=Math[_0x2244c2(0x462)]((Graphics[_0x2244c2(0x5f7)]-_0x5c6b7d)/0x2),_0x225821=Graphics[_0x2244c2(0xbcf)]-_0x509c38-this['statusWindowRectXPStyle']()[_0x2244c2(0x908)];return new Rectangle(_0xb59861,_0x225821,_0x5c6b7d,_0x509c38);},Scene_Battle['prototype'][_0x553167(0x4d0)]=function(){const _0x57c36c=_0x553167,_0x3e12ec=Graphics['width'],_0x36a41c=Math[_0x57c36c(0x462)]((Graphics[_0x57c36c(0x5f7)]-_0x3e12ec)/0x2),_0x387589=this['helpAreaHeight'](),_0x3847e3=(Graphics['height']-Graphics[_0x57c36c(0xbcf)])/-0x2;return new Rectangle(_0x36a41c,_0x3847e3,_0x3e12ec,_0x387589);},Scene_Battle['prototype'][_0x553167(0x5dc)]=function(){const _0x2d3fad=_0x553167,_0x4b44cd=Graphics['width'],_0xf9731a=Math[_0x2d3fad(0x462)]((Graphics[_0x2d3fad(0x5f7)]-_0x4b44cd)/0x2),_0x41d81b=this[_0x2d3fad(0x54b)](0x4,!![]),_0x5a3560=Graphics[_0x2d3fad(0xbcf)]-_0x41d81b+(Graphics[_0x2d3fad(0x908)]-Graphics[_0x2d3fad(0xbcf)])/0x2;return new Rectangle(_0xf9731a,_0x5a3560,_0x4b44cd,_0x41d81b);},Scene_Battle[_0x553167(0x22b)][_0x553167(0xa85)]=function(){const _0x4a41b4=_0x553167,_0x482eeb=Math['floor'](Graphics[_0x4a41b4(0x9ce)]/0x3),_0x3150d8=this[_0x4a41b4(0x7ce)]()?(Graphics['width']+Graphics[_0x4a41b4(0x5f7)])/0x2-_0x482eeb:(Graphics['width']-Graphics[_0x4a41b4(0x5f7)])/-0x2,_0x564b08=this[_0x4a41b4(0x4d0)](),_0x19135b=_0x564b08['y']+_0x564b08[_0x4a41b4(0x908)],_0x1c9f42=this[_0x4a41b4(0x5dc)](),_0x4ff9c1=_0x1c9f42['y']-_0x19135b;return new Rectangle(_0x3150d8,_0x19135b,_0x482eeb,_0x4ff9c1);},Scene_Battle[_0x553167(0x22b)][_0x553167(0xfb)]=function(){const _0x1cdbda=_0x553167,_0x2a3a9e=Math['ceil'](Graphics[_0x1cdbda(0x9ce)]/0x3),_0x9ee1e7=Math[_0x1cdbda(0x462)]((Graphics[_0x1cdbda(0x5f7)]-_0x2a3a9e)/0x2),_0x1b2124=this[_0x1cdbda(0xa85)](),_0x572d4c=_0x1b2124['y'],_0x25dd5d=_0x1b2124[_0x1cdbda(0x908)];return new Rectangle(_0x9ee1e7,_0x572d4c,_0x2a3a9e,_0x25dd5d);},Scene_Battle[_0x553167(0x22b)][_0x553167(0xbf3)]=function(){const _0x300c19=_0x553167;this[_0x300c19(0x8fd)]['y']=this[_0x300c19(0x2c1)]['y']+this['_helpWindow'][_0x300c19(0x908)],this[_0x300c19(0x7ce)]()?this[_0x300c19(0x297)]()===_0x300c19(0xb17)?this['_cancelButton']['x']=0x8:this['_cancelButton']['x']=-this[_0x300c19(0x8fd)][_0x300c19(0x9ce)]-0x4:this[_0x300c19(0x8fd)]['x']=Graphics['width']-(Graphics['width']-Graphics[_0x300c19(0x5f7)])/0x2-this[_0x300c19(0x8fd)][_0x300c19(0x9ce)]-0x4;},VisuMZ[_0x553167(0x841)][_0x553167(0x269)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x5a5)],Scene_Battle[_0x553167(0x22b)][_0x553167(0x5a5)]=function(){const _0xdf75a6=_0x553167;if(this[_0xdf75a6(0x297)]()===_0xdf75a6(0xb17))return this[_0xdf75a6(0xfb)]();else return this[_0xdf75a6(0x325)]()?this[_0xdf75a6(0x2cc)]():VisuMZ[_0xdf75a6(0x841)]['Scene_Battle_skillWindowRect'][_0xdf75a6(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x708)]=Scene_Battle[_0x553167(0x22b)]['itemWindowRect'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x564)]=function(){const _0xaec89a=_0x553167;if(this['battleLayoutStyle']()==='border')return this['skillItemWindowRectBorderStyle']();else return this['isSkillItemWindowsMiddle']()?this[_0xaec89a(0x2cc)]():VisuMZ[_0xaec89a(0x841)][_0xaec89a(0x708)][_0xaec89a(0x7f7)](this);},Scene_Battle['prototype'][_0x553167(0x325)]=function(){const _0x2e162f=_0x553167;return VisuMZ[_0x2e162f(0x841)][_0x2e162f(0x309)]['BattleLayout'][_0x2e162f(0x70c)];},Scene_Battle[_0x553167(0x22b)][_0x553167(0x2cc)]=function(){const _0x126d1e=_0x553167,_0x286495=Sprite_Button[_0x126d1e(0x22b)]['blockWidth']()*0x2+0x4;let _0x4d91e1=Graphics[_0x126d1e(0x5f7)]-_0x286495;Imported[_0x126d1e(0x28b)]&&SceneManager['isSideButtonLayout']()&&(_0x4d91e1+=_0x286495);const _0x248d0f=this[_0x126d1e(0xac8)](),_0x189357=Graphics['boxHeight']-_0x248d0f-this[_0x126d1e(0x5e1)]()[_0x126d1e(0x908)]+Window_BattleStatus[_0x126d1e(0x22b)][_0x126d1e(0x60c)](),_0x36c3a8=0x0;return new Rectangle(_0x36c3a8,_0x248d0f,_0x4d91e1,_0x189357);},VisuMZ[_0x553167(0x841)][_0x553167(0x36f)]=Scene_Battle[_0x553167(0x22b)]['startActorSelection'],Scene_Battle[_0x553167(0x22b)][_0x553167(0x42e)]=function(){const _0x4af2a7=_0x553167;VisuMZ['BattleCore']['Scene_Battle_startActorSelection']['call'](this),this[_0x4af2a7(0x6c0)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x9f2)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x901)],Scene_Battle[_0x553167(0x22b)][_0x553167(0x901)]=function(){const _0x333ba0=_0x553167;VisuMZ['BattleCore'][_0x333ba0(0x9f2)][_0x333ba0(0x7f7)](this),this[_0x333ba0(0x95b)][_0x333ba0(0x93d)](),this[_0x333ba0(0x6c0)]();},Scene_Battle['prototype'][_0x553167(0x6c0)]=function(){const _0x49e3d6=_0x553167,_0x587758=this[_0x49e3d6(0x297)]();['xp',_0x49e3d6(0x7cf),_0x49e3d6(0xb17)][_0x49e3d6(0xb5d)](_0x587758)&&this['_actorCommandWindow'][_0x49e3d6(0xa1c)](),(_0x587758===_0x49e3d6(0xb17)||this[_0x49e3d6(0x325)]())&&(this[_0x49e3d6(0x5a4)][_0x49e3d6(0xa1c)](),this['_itemWindow'][_0x49e3d6(0xa1c)]());},VisuMZ['BattleCore']['Scene_Battle_onActorOk']=Scene_Battle[_0x553167(0x22b)][_0x553167(0x1a1)],Scene_Battle['prototype'][_0x553167(0x1a1)]=function(){const _0x4d6a88=_0x553167;VisuMZ[_0x4d6a88(0x841)]['Scene_Battle_onActorOk']['call'](this),this[_0x4d6a88(0x6c6)]();},Scene_Battle[_0x553167(0x22b)][_0x553167(0x8d7)]=function(){const _0x33b146=_0x553167;return['attack',_0x33b146(0x6fd),_0x33b146(0x359)][_0x33b146(0xb5d)](this[_0x33b146(0x184)]['currentSymbol']());},VisuMZ[_0x553167(0x841)][_0x553167(0x6b8)]=Scene_Battle[_0x553167(0x22b)][_0x553167(0x6f8)],Scene_Battle['prototype']['onActorCancel']=function(){const _0x4be14a=_0x553167;this[_0x4be14a(0x8d7)]()?(this['_statusWindow']['show'](),this[_0x4be14a(0xa4e)][_0x4be14a(0x447)](),this[_0x4be14a(0x184)][_0x4be14a(0x706)]()):VisuMZ[_0x4be14a(0x841)][_0x4be14a(0x6b8)]['call'](this),this[_0x4be14a(0xa03)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x6c7)]=Scene_Battle['prototype'][_0x553167(0xfd)],Scene_Battle[_0x553167(0x22b)][_0x553167(0xfd)]=function(){const _0x522ef1=_0x553167;if(!this['_enemyWindow'][_0x522ef1(0xb8f)]()){this[_0x522ef1(0x95b)][_0x522ef1(0x706)]();return;}const _0x588ee3=BattleManager[_0x522ef1(0x815)]();_0x588ee3[_0x522ef1(0xa13)](this['_enemyWindow'][_0x522ef1(0xb8f)]()),this[_0x522ef1(0x95b)]['closeBattleActorWindow'](),VisuMZ[_0x522ef1(0x841)][_0x522ef1(0x6c7)][_0x522ef1(0x7f7)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x553167(0x841)][_0x553167(0x200)]=Scene_Battle[_0x553167(0x22b)]['onEnemyCancel'],Scene_Battle[_0x553167(0x22b)][_0x553167(0xa68)]=function(){const _0x6a7134=_0x553167;this[_0x6a7134(0x8d7)]()?(this['_statusWindow'][_0x6a7134(0x8b8)](),this['_enemyWindow'][_0x6a7134(0x447)](),this[_0x6a7134(0x184)][_0x6a7134(0x706)]()):VisuMZ[_0x6a7134(0x841)][_0x6a7134(0x200)][_0x6a7134(0x7f7)](this),this[_0x6a7134(0xa03)](),this[_0x6a7134(0x95b)][_0x6a7134(0x666)]();},Scene_Battle[_0x553167(0x22b)]['okTargetSelectionVisibility']=function(){const _0x50c9d0=_0x553167,_0x5376a7=this[_0x50c9d0(0x297)]();(_0x5376a7===_0x50c9d0(0xb17)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow'][_0x50c9d0(0x5f9)](),this[_0x50c9d0(0x5a4)]['active']&&this['_skillWindow']['show'](),this[_0x50c9d0(0x63c)]['open'](),this[_0x50c9d0(0x63c)][_0x50c9d0(0x9c3)]&&this[_0x50c9d0(0x63c)][_0x50c9d0(0x8b8)]());},Scene_Battle[_0x553167(0x22b)][_0x553167(0xa03)]=function(){const _0x303da4=_0x553167,_0x58329a=this[_0x303da4(0x297)]();['xp','portrait',_0x303da4(0xb17)][_0x303da4(0xb5d)](_0x58329a)&&this[_0x303da4(0x184)][_0x303da4(0x5f9)](),this[_0x303da4(0x6c6)]();},Sprite_Battler[_0x553167(0x914)]=VisuMZ[_0x553167(0x841)][_0x553167(0x309)]['Actor'][_0x553167(0x4ca)],VisuMZ[_0x553167(0x841)][_0x553167(0x966)]=Sprite_Battler[_0x553167(0x22b)][_0x553167(0x23a)],Sprite_Battler['prototype']['initMembers']=function(){const _0x9ec646=_0x553167;VisuMZ[_0x9ec646(0x841)][_0x9ec646(0x966)]['call'](this),this[_0x9ec646(0x54e)]();if(this[_0x9ec646(0x589)]===Sprite_Enemy)this[_0x9ec646(0x563)]();this['createDistortionSprite']();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x54e)]=function(){const _0x56ee7a=_0x553167;this[_0x56ee7a(0x649)]=0x0,this[_0x56ee7a(0x756)]=0x0,this['_floatHeight']=0x0,this[_0x56ee7a(0x2f5)]=0x0,this[_0x56ee7a(0x364)]=0x0,this[_0x56ee7a(0xb09)]=0x0,this[_0x56ee7a(0x75d)]=_0x56ee7a(0x9fe),this[_0x56ee7a(0x79d)]=0x0,this[_0x56ee7a(0x6bd)]=0x0,this['_jumpDuration']=0x0,this[_0x56ee7a(0xb8b)]=0x0,this[_0x56ee7a(0x2af)]=0xff,this[_0x56ee7a(0x1b1)]=0x0,this[_0x56ee7a(0x6a1)]=0x0,this[_0x56ee7a(0x9c7)]=_0x56ee7a(0x9fe),this[_0x56ee7a(0x1e8)]=0x0,this[_0x56ee7a(0x4ac)]=0x0,this[_0x56ee7a(0x818)]=0x0,this[_0x56ee7a(0x969)]=0x0,this[_0x56ee7a(0xa18)]=_0x56ee7a(0x9fe),this['_angleRevertOnFinish']=!![],this[_0x56ee7a(0xa99)]=0x0,this[_0x56ee7a(0x15b)]=0x0,this['_targetSkewX']=0x0,this['_targetSkewY']=0x0,this[_0x56ee7a(0x843)]=0x0,this[_0x56ee7a(0x808)]=0x0,this[_0x56ee7a(0xaf0)]=_0x56ee7a(0x9fe),this['_growX']=0x1,this[_0x56ee7a(0x4cb)]=0x1,this[_0x56ee7a(0x4cf)]=0x1,this['_targetGrowY']=0x1,this[_0x56ee7a(0x9a4)]=0x0,this[_0x56ee7a(0x863)]=0x0,this[_0x56ee7a(0xb7c)]=_0x56ee7a(0x9fe),this[_0x56ee7a(0xa1b)]=0x1,this[_0x56ee7a(0x8ee)]=0x0,this['_targetHomeY']=0x0,this[_0x56ee7a(0x498)]=0x0,this[_0x56ee7a(0x7ff)]=0x0,this[_0x56ee7a(0x6f9)]='Linear',this[_0x56ee7a(0x793)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler[_0x553167(0x22b)]['createShadowSprite']=function(){const _0x2ffcc8=_0x553167;this[_0x2ffcc8(0x85f)]=new Sprite(),this[_0x2ffcc8(0x85f)]['bitmap']=ImageManager[_0x2ffcc8(0x373)](_0x2ffcc8(0x3af)),this['_shadowSprite']['bitmap'][_0x2ffcc8(0x14f)]=VisuMZ['BattleCore']['Settings']['Actor'][_0x2ffcc8(0x29c)],this['_shadowSprite'][_0x2ffcc8(0x9f3)]['x']=0.5,this[_0x2ffcc8(0x85f)]['anchor']['y']=0.5,this[_0x2ffcc8(0x85f)]['y']=-0x2,this[_0x2ffcc8(0x85f)][_0x2ffcc8(0x743)]=![],this[_0x2ffcc8(0xbd9)](this[_0x2ffcc8(0x85f)]);},Sprite_Battler[_0x553167(0x22b)]['createDistortionSprite']=function(){const _0x33aa77=_0x553167;this['_distortionSprite']=new Sprite(),this[_0x33aa77(0x753)]['anchor']['x']=0.5,this['_distortionSprite'][_0x33aa77(0x9f3)]['y']=0.5,this[_0x33aa77(0xbd9)](this['_distortionSprite']);},Sprite_Battler[_0x553167(0x22b)]['_updateColorFilter']=function(){const _0x20c1f9=_0x553167;if(this[_0x20c1f9(0xb56)]&&this[_0x20c1f9(0xb56)]()){Sprite[_0x20c1f9(0x22b)]['_updateColorFilter']['call'](this);return;}const _0x4e879d=this[_0x20c1f9(0x753)];if(!_0x4e879d)return;!_0x4e879d[_0x20c1f9(0x802)]&&_0x4e879d[_0x20c1f9(0xa7a)](),_0x4e879d['_colorFilter']['setHue'](this[_0x20c1f9(0x299)]),_0x4e879d[_0x20c1f9(0x802)][_0x20c1f9(0x4f7)](this[_0x20c1f9(0x670)]),_0x4e879d['_colorFilter'][_0x20c1f9(0x601)](this[_0x20c1f9(0x60a)]);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x684)]=function(){const _0x4bb73a=_0x553167;if(!this[_0x4bb73a(0x753)])return;if(this['_shadowSprite']){const _0x2fca1e=this[_0x4bb73a(0x553)](this[_0x4bb73a(0x753)]);this['addChildAt'](this[_0x4bb73a(0x85f)],_0x2fca1e),this[_0x4bb73a(0x6a9)]();}this[_0x4bb73a(0x3f4)]&&this['_distortionSprite'][_0x4bb73a(0xbd9)](this['_svBattlerSprite']),this['_weaponSprite']&&this[_0x4bb73a(0x753)][_0x4bb73a(0xbd9)](this['_weaponSprite']),this['_mainSprite']&&this[_0x4bb73a(0x753)][_0x4bb73a(0xbd9)](this[_0x4bb73a(0x1d5)]),this[_0x4bb73a(0x127)]&&this[_0x4bb73a(0x753)][_0x4bb73a(0xbd9)](this[_0x4bb73a(0x127)]),this[_0x4bb73a(0x632)]&&this[_0x4bb73a(0x753)][_0x4bb73a(0xbd9)](this[_0x4bb73a(0x632)]);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x6a9)]=function(){const _0x5421d3=_0x553167;if(!this[_0x5421d3(0x85f)])return;if(this[_0x5421d3(0x928)]&&this['_battler'][_0x5421d3(0x110)]()){const _0x35d25a=this[_0x5421d3(0x85f)][_0x5421d3(0xa3a)];this[_0x5421d3(0x85f)]['setFrame'](0x0,0x0,_0x35d25a[_0x5421d3(0x9ce)],_0x35d25a[_0x5421d3(0x908)]);}else this['_shadowSprite'][_0x5421d3(0x51e)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype']['damageContainer']=function(){const _0x33c2f2=_0x553167;return SceneManager[_0x33c2f2(0x2c2)]()?SceneManager['_scene']['_spriteset']['_damageContainer']:this[_0x33c2f2(0x73e)];},Sprite_Battler[_0x553167(0x22b)][_0x553167(0xa00)]=function(_0x49c534,_0x506ee9){const _0x2908f0=_0x553167;if(!this[_0x2908f0(0x928)][_0x2908f0(0x13d)]())return;if(BattleManager[_0x2908f0(0xbce)]())return;const _0x29af12=VisuMZ['BattleCore'][_0x2908f0(0x309)]['Damage'],_0x4792a6=new Sprite_Damage();_0x4792a6[_0x2908f0(0xb60)]=_0x29af12[_0x2908f0(0x77e)],this['sortDamageSprites'](_0x4792a6),_0x4792a6['setupTextPopup'](_0x49c534,_0x506ee9),this[_0x2908f0(0x280)](_0x4792a6);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x5bb)]=function(_0x1003c7,_0x53bbca,_0x162007){const _0x297cb2=_0x553167;if(!this[_0x297cb2(0x928)][_0x297cb2(0x13d)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x5ca56a=VisuMZ[_0x297cb2(0x841)][_0x297cb2(0x309)][_0x297cb2(0x2e0)],_0x432221=new Sprite_Damage();_0x432221[_0x297cb2(0xb60)]=_0x5ca56a[_0x297cb2(0x77e)],this[_0x297cb2(0xa14)](_0x432221),_0x432221[_0x297cb2(0x5bb)](_0x1003c7,_0x53bbca,_0x162007),this[_0x297cb2(0x280)](_0x432221);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x516)]=function(){const _0x44b1ce=_0x553167;if(!this[_0x44b1ce(0x928)]['isDamagePopupRequested']())return;while(this[_0x44b1ce(0x928)][_0x44b1ce(0xaea)]()){this['_battler']['isSpriteVisible']()&&this['createDamageSprite']();}this[_0x44b1ce(0x928)][_0x44b1ce(0x92d)](),this[_0x44b1ce(0x928)][_0x44b1ce(0x711)]();},Sprite_Battler[_0x553167(0x22b)]['createDamageSprite']=function(){const _0x39200b=_0x553167;if(BattleManager[_0x39200b(0xbce)]())return;const _0x368745=VisuMZ[_0x39200b(0x841)][_0x39200b(0x309)][_0x39200b(0x2e0)],_0x5e5dab=new Sprite_Damage();_0x5e5dab[_0x39200b(0xb60)]=_0x368745[_0x39200b(0x77e)],this['sortDamageSprites'](_0x5e5dab),_0x5e5dab['setup'](this[_0x39200b(0x928)]),_0x5e5dab['setupBattleCore'](this[_0x39200b(0x928)]),this[_0x39200b(0x280)](_0x5e5dab);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x280)]=function(_0x16002f){const _0x182fc5=_0x553167;this[_0x182fc5(0x83e)]['push'](_0x16002f);if(this[_0x182fc5(0x36b)]()){const _0x35cd1e=SceneManager['_scene']['_statusWindow'];if(_0x35cd1e)_0x35cd1e[_0x182fc5(0x280)](_0x16002f,this[_0x182fc5(0x928)]);}else{this['damageContainer']()[_0x182fc5(0xbd9)](_0x16002f);if(SceneManager[_0x182fc5(0x3fd)]())_0x16002f[_0x182fc5(0xb03)]['x']=-0x1;}},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x36b)]=function(){const _0x32da09=_0x553167;return!$gameSystem['isSideView']()&&this[_0x32da09(0x928)]&&this[_0x32da09(0x928)]['isActor']();return!$gameSystem['isSideView']()&&this['_battler']&&this[_0x32da09(0x928)][_0x32da09(0x8fb)]()&&Window_BattleStatus[_0x32da09(0x22b)][_0x32da09(0x297)]()===_0x32da09(0x7cf);},Sprite_Battler['prototype'][_0x553167(0xa14)]=function(_0x3d4503){const _0x442fc0=_0x553167;this[_0x442fc0(0xa43)](_0x3d4503,!![]);const _0x3c85f7=VisuMZ[_0x442fc0(0x841)][_0x442fc0(0x309)][_0x442fc0(0x2e0)],_0x40f85f=SceneManager[_0x442fc0(0x3fd)]()?-0x1:0x1;if(_0x3c85f7[_0x442fc0(0x4ff)])for(const _0x216e8c of this[_0x442fc0(0x83e)]){_0x216e8c['x']+=_0x3c85f7[_0x442fc0(0xb3e)]*_0x40f85f,_0x216e8c['y']+=_0x3c85f7[_0x442fc0(0x7ab)];}else{const _0x45705e=this['_damages'][this[_0x442fc0(0x83e)]['length']-0x1];_0x45705e&&(_0x3d4503['x']=_0x45705e['x']+_0x3c85f7[_0x442fc0(0xb3e)]*_0x40f85f,_0x3d4503['y']=_0x45705e['y']+_0x3c85f7[_0x442fc0(0x7ab)]);}},Sprite_Battler[_0x553167(0x22b)][_0x553167(0xa43)]=function(_0x4e033d,_0x316dcd){const _0x26d8c8=_0x553167,_0x50686a=SceneManager[_0x26d8c8(0x3fd)]()?-0x1:0x1;let _0xcb262f=this[_0x26d8c8(0x649)];_0xcb262f+=this[_0x26d8c8(0x53a)]();let _0x59f00c=this[_0x26d8c8(0x756)];const _0x271544=this['_distortionSprite']['scale']['y'];_0x59f00c+=this[_0x26d8c8(0x3a9)]();const _0x4933bf=SceneManager[_0x26d8c8(0xa7f)][_0x26d8c8(0xa6f)];if(_0x4933bf&&this[_0x26d8c8(0x73e)]===_0x4933bf){_0xcb262f+=_0x4933bf['x']-this[_0x26d8c8(0x8a0)]();const _0xa35ca9=_0x4933bf['lineHeight']()*0x3/0x4;_0x59f00c=_0x4933bf['y']+_0xa35ca9,_0x59f00c=Math[_0x26d8c8(0x6b0)](_0x59f00c,_0x4933bf['y']+this['y']-this[_0x26d8c8(0x908)]+_0xa35ca9);}_0x4e033d['x']=Math[_0x26d8c8(0x462)](_0xcb262f+this[_0x26d8c8(0x8a0)]()*_0x50686a),_0x4e033d['y']=Math[_0x26d8c8(0x462)](_0x59f00c+this[_0x26d8c8(0xbb7)]());},VisuMZ[_0x553167(0x841)][_0x553167(0x3de)]=Sprite_Battler[_0x553167(0x22b)]['damageOffsetX'],Sprite_Battler[_0x553167(0x22b)][_0x553167(0x8a0)]=function(){const _0x4212dd=_0x553167;let _0x55f5da=VisuMZ[_0x4212dd(0x841)][_0x4212dd(0x3de)][_0x4212dd(0x7f7)](this),_0x4124b3=VisuMZ['BattleCore'][_0x4212dd(0x309)]['Damage'][_0x4212dd(0x41a)]||0x0;return _0x4124b3+=this[_0x4212dd(0x928)]['damagePopupOffsetX'](),Math[_0x4212dd(0x462)](_0x55f5da+_0x4124b3);},VisuMZ['BattleCore'][_0x553167(0x99c)]=Sprite_Battler['prototype'][_0x553167(0xbb7)],Sprite_Battler[_0x553167(0x22b)]['damageOffsetY']=function(){const _0x2698af=_0x553167;let _0x5aaefd=VisuMZ[_0x2698af(0x841)][_0x2698af(0x99c)][_0x2698af(0x7f7)](this);switch(this['_battler'][_0x2698af(0x694)]()){case'head':_0x5aaefd-=this[_0x2698af(0x908)]*this[_0x2698af(0xb03)]['y'];break;case'center':_0x5aaefd-=this[_0x2698af(0x908)]*this[_0x2698af(0xb03)]['y']*0.5;break;}let _0x410ee1=VisuMZ[_0x2698af(0x841)]['Settings'][_0x2698af(0x2e0)][_0x2698af(0xbad)]||0x0;return _0x410ee1+=this[_0x2698af(0x928)][_0x2698af(0x9fd)](),Math[_0x2698af(0x462)](_0x5aaefd+_0x410ee1);},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x8a0)]=function(){const _0x378c77=_0x553167;return Sprite_Battler[_0x378c77(0x22b)]['damageOffsetX']['call'](this);},Sprite_Actor[_0x553167(0x22b)][_0x553167(0xbb7)]=function(){const _0x4af09a=_0x553167;return Sprite_Battler[_0x4af09a(0x22b)][_0x4af09a(0xbb7)][_0x4af09a(0x7f7)](this);},Sprite_Battler['prototype'][_0x553167(0x5f6)]=function(_0x49b4d7){const _0x1e7e40=_0x553167;this[_0x1e7e40(0x36b)]()?SceneManager[_0x1e7e40(0xa7f)][_0x1e7e40(0xa6f)]['removeDamageSprite'](_0x49b4d7):(this[_0x1e7e40(0x42d)]()[_0x1e7e40(0x588)](_0x49b4d7),this[_0x1e7e40(0x83e)][_0x1e7e40(0x4c0)](_0x49b4d7),_0x49b4d7['destroy']());},VisuMZ[_0x553167(0x841)]['Sprite_Battler_setHome']=Sprite_Battler[_0x553167(0x22b)][_0x553167(0x24b)],Sprite_Battler[_0x553167(0x22b)][_0x553167(0x24b)]=function(_0x762b1e,_0xe7bc99){const _0x10aa23=_0x553167,_0x455d08=VisuMZ[_0x10aa23(0x841)][_0x10aa23(0x309)];if(this[_0x10aa23(0x589)]===Sprite_Actor)_0x762b1e+=_0x455d08[_0x10aa23(0x5d0)][_0x10aa23(0x9d1)]||0x0,_0xe7bc99+=_0x455d08['Actor'][_0x10aa23(0xb21)]||0x0;else this[_0x10aa23(0x589)]===Sprite_Enemy&&(_0x762b1e+=_0x455d08[_0x10aa23(0x194)][_0x10aa23(0x9d1)]||0x0,_0xe7bc99+=_0x455d08[_0x10aa23(0x194)][_0x10aa23(0xb21)]||0x0);this[_0x10aa23(0x928)]&&(_0x762b1e=this['_battler'][_0x10aa23(0x453)]??_0x762b1e,_0xe7bc99=this[_0x10aa23(0x928)][_0x10aa23(0xa6c)]??_0xe7bc99),VisuMZ[_0x10aa23(0x841)][_0x10aa23(0x1e3)][_0x10aa23(0x7f7)](this,_0x762b1e,_0xe7bc99),this[_0x10aa23(0x8ee)]=this[_0x10aa23(0x173)],this[_0x10aa23(0x8ce)]=this[_0x10aa23(0x6ea)],this[_0x10aa23(0x498)]=0x0,this[_0x10aa23(0x7ff)]=0x0,this[_0x10aa23(0x6f9)]=_0x10aa23(0x9fe);},VisuMZ[_0x553167(0x841)][_0x553167(0x65d)]=Sprite_Battler[_0x553167(0x22b)][_0x553167(0xbcd)],Sprite_Battler[_0x553167(0x22b)][_0x553167(0xbcd)]=function(){const _0x581969=_0x553167;VisuMZ[_0x581969(0x841)][_0x581969(0x65d)][_0x581969(0x7f7)](this),!this[_0x581969(0x928)]&&this['_hpGaugeSprite']&&(this[_0x581969(0x52a)][_0x581969(0x743)]=![]);},VisuMZ[_0x553167(0x841)][_0x553167(0xba0)]=Sprite_Battler[_0x553167(0x22b)][_0x553167(0x35c)],Sprite_Battler[_0x553167(0x22b)]['updateMain']=function(){const _0x11854f=_0x553167;this[_0x11854f(0x6fc)](),this[_0x11854f(0x552)](),this['updateSpin'](),this[_0x11854f(0x2c8)](),VisuMZ[_0x11854f(0x841)][_0x11854f(0xba0)]['call'](this),this[_0x11854f(0x390)](),this['updateShakeFlinch']();if(this[_0x11854f(0x589)]===Sprite_Enemy)this[_0x11854f(0x971)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x3b7)]=Sprite_Battler[_0x553167(0x22b)][_0x553167(0x1c8)],Sprite_Battler[_0x553167(0x22b)]['updatePosition']=function(){const _0x53b28d=_0x553167;this[_0x53b28d(0x88c)](),VisuMZ[_0x53b28d(0x841)]['Sprite_Battler_updatePosition']['call'](this),this[_0x53b28d(0x3b4)](),this['updateOpacity']();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x2e6)]=function(){const _0x408c3=_0x553167,_0x2582b6=this[_0x408c3(0x1d8)]();if(this[_0x408c3(0x928)]['isSelected']())this[_0x408c3(0x88b)]++,Graphics[_0x408c3(0xa32)]%0x1e<0xf?_0x2582b6[_0x408c3(0x4f7)]([0xff,0xff,0xff,0x40]):_0x2582b6['setBlendColor']([0x0,0x0,0x0,0x0]);else this[_0x408c3(0x88b)]>0x0&&(this[_0x408c3(0x88b)]=0x0,_0x2582b6[_0x408c3(0x4f7)]([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x553167(0xb28)]=function(_0x30b978,_0x31ceac){const _0xa15dc3=_0x553167,_0xd72610=VisuMZ[_0xa15dc3(0x841)]['Settings'];if(this[_0xa15dc3(0x589)]===Sprite_Actor)_0x30b978+=_0xd72610['Actor'][_0xa15dc3(0x9d1)]||0x0,_0x31ceac+=_0xd72610[_0xa15dc3(0x5d0)][_0xa15dc3(0xb21)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x30b978+=_0xd72610[_0xa15dc3(0x194)][_0xa15dc3(0x9d1)]||0x0,_0x31ceac+=_0xd72610['Enemy'][_0xa15dc3(0xb21)]||0x0);const _0x591668=_0x30b978-this[_0xa15dc3(0x173)],_0x480039=_0x31ceac-this[_0xa15dc3(0x6ea)];this[_0xa15dc3(0x173)]=_0x30b978,this['_homeY']=_0x31ceac,this['_offsetX']-=_0x591668,this[_0xa15dc3(0x9e4)]-=_0x480039,this[_0xa15dc3(0xa02)]-=_0x591668,this[_0xa15dc3(0x8ed)]-=_0x480039,this[_0xa15dc3(0x1c8)]();},Sprite_Battler[_0x553167(0x22b)]['startHomeMove']=function(_0x5846ea,_0x1abaa3,_0x543fb9,_0x8ef4dd){const _0x4822e1=_0x553167,_0x38d787=VisuMZ[_0x4822e1(0x841)][_0x4822e1(0x309)];if(this['constructor']===Sprite_Actor)_0x5846ea+=_0x38d787[_0x4822e1(0x5d0)][_0x4822e1(0x9d1)]||0x0,_0x1abaa3+=_0x38d787[_0x4822e1(0x5d0)]['OffsetY']||0x0;else this['constructor']===Sprite_Enemy&&(_0x5846ea+=_0x38d787[_0x4822e1(0x194)][_0x4822e1(0x9d1)]||0x0,_0x1abaa3+=_0x38d787[_0x4822e1(0x194)]['OffsetY']||0x0);(this[_0x4822e1(0x8ee)]!==_0x5846ea||this[_0x4822e1(0x8ce)]!==_0x1abaa3)&&(this['_targetHomeX']=_0x5846ea,this['_targetHomeY']=_0x1abaa3,this[_0x4822e1(0x498)]=_0x543fb9,this['_homeWholeDuration']=_0x543fb9,this['_homeEasing']=_0x8ef4dd,_0x543fb9<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x88c)]=function(){const _0x248402=_0x553167;if(this[_0x248402(0x498)]<=0x0)return;const _0x5e979f=this[_0x248402(0x498)],_0x318292=this[_0x248402(0x7ff)],_0x4ac4b4=this['_homeEasing'];Imported['VisuMZ_0_CoreEngine']?(this[_0x248402(0x173)]=this['applyEasing'](this['_homeX'],this[_0x248402(0x8ee)],_0x5e979f,_0x318292,_0x4ac4b4),this[_0x248402(0x6ea)]=this[_0x248402(0x7c5)](this[_0x248402(0x6ea)],this[_0x248402(0x8ce)],_0x5e979f,_0x318292,_0x4ac4b4)):(this[_0x248402(0x173)]=(this[_0x248402(0x173)]*(_0x5e979f-0x1)+this[_0x248402(0x8ee)])/_0x5e979f,this['_homeY']=(this[_0x248402(0x6ea)]*(_0x5e979f-0x1)+this[_0x248402(0x8ce)])/_0x5e979f);this['_homeDuration']--;if(this['_homeDuration']<=0x0)this[_0x248402(0x23e)]();},Sprite_Battler['prototype'][_0x553167(0x23e)]=function(){const _0x21af1f=_0x553167;this['_homeX']=this[_0x21af1f(0x8ee)],this[_0x21af1f(0x6ea)]=this[_0x21af1f(0x8ce)];},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x3b4)]=function(){const _0x5cc0fa=_0x553167;this[_0x5cc0fa(0x649)]=this['x'],this[_0x5cc0fa(0x756)]=this['y'],this['updateFloat'](),this[_0x5cc0fa(0x7bb)](),this['x']+=this[_0x5cc0fa(0x53a)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x5cc0fa(0x5db)](),this['x']=Math[_0x5cc0fa(0x66d)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x53a)]=function(){let _0x2d7b36=0x0;return _0x2d7b36;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x3a9)]=function(){const _0x402605=_0x553167;let _0x25f9ed=0x0;return this[_0x402605(0x928)]&&!this[_0x402605(0x928)]['isBattlerGrounded']()&&(_0x25f9ed-=this[_0x402605(0xb67)],_0x25f9ed-=this[_0x402605(0x79d)]),_0x25f9ed;},Sprite_Battler['prototype'][_0x553167(0x5db)]=function(){const _0x2729e6=_0x553167;let _0x3a5dbf=0x0;if(this[_0x2729e6(0x753)]&&this['constructor']!==Sprite_SvEnemy){const _0x26443c=this[_0x2729e6(0x753)][_0x2729e6(0xb03)]['y'];_0x3a5dbf-=(_0x26443c-0x1)*this['height'];}return _0x3a5dbf;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x2c8)]=function(){const _0x2a5211=_0x553167,_0x118c1a=this[_0x2a5211(0x928)]&&this[_0x2a5211(0x928)][_0x2a5211(0xae2)]();this[_0x2a5211(0xa1b)]=(_0x118c1a?-0x1:0x1)*Math['abs'](this[_0x2a5211(0xb03)]['x']);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x84f)]=function(_0x122618,_0x5b5f90,_0xe13df8){const _0x16fabd=_0x553167;if(!this[_0x16fabd(0x230)]())return;if(this['_targetFloatHeight']===_0x122618)return;this[_0x16fabd(0x2f5)]=_0x122618,this['_floatDuration']=_0x5b5f90,this[_0x16fabd(0xb09)]=_0x5b5f90,this[_0x16fabd(0x75d)]=_0xe13df8||_0x16fabd(0x9fe);if(_0x5b5f90<=0x0)this[_0x16fabd(0xb67)]=_0x122618;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x827)]=function(){const _0x4e05ad=_0x553167;if(this[_0x4e05ad(0x364)]<=0x0)return;const _0x5ee328=this[_0x4e05ad(0x364)],_0x40e1bb=this[_0x4e05ad(0xb09)],_0x427fbc=this[_0x4e05ad(0x75d)];Imported[_0x4e05ad(0x28b)]?this['_floatHeight']=this['applyEasing'](this[_0x4e05ad(0xb67)],this[_0x4e05ad(0x2f5)],_0x5ee328,_0x40e1bb,_0x427fbc):this[_0x4e05ad(0xb67)]=(this[_0x4e05ad(0xb67)]*(_0x5ee328-0x1)+this[_0x4e05ad(0x2f5)])/_0x5ee328;this['_floatDuration']--;if(this[_0x4e05ad(0x364)]<=0x0)this[_0x4e05ad(0x4f8)]();},Sprite_Battler['prototype'][_0x553167(0x4f8)]=function(){const _0x8d6a57=_0x553167;this['_floatHeight']=this[_0x8d6a57(0x2f5)];},Sprite_Battler['prototype'][_0x553167(0x4ef)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x674)]=function(_0x55ada6,_0xbc13fc){const _0x543129=_0x553167;if(!this[_0x543129(0x230)]())return;if(_0xbc13fc<=0x0)return;this['_jumpMaxHeight']=_0x55ada6,this[_0x543129(0x49f)]=_0xbc13fc,this[_0x543129(0xb8b)]=_0xbc13fc;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x7bb)]=function(){const _0x27f715=_0x553167;if(this[_0x27f715(0x49f)]<=0x0)return;const _0x184ca7=this[_0x27f715(0xb8b)]-this['_jumpDuration'],_0xf5e890=this['_jumpWholeDuration']/0x2,_0x52af91=this[_0x27f715(0x6bd)],_0x14aefb=-_0x52af91/Math[_0x27f715(0x396)](_0xf5e890,0x2);this[_0x27f715(0x79d)]=_0x14aefb*Math[_0x27f715(0x396)](_0x184ca7-_0xf5e890,0x2)+_0x52af91,this['_jumpDuration']--;if(this[_0x27f715(0x49f)]<=0x0)return this[_0x27f715(0x73d)]();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x73d)]=function(){const _0x27fba7=_0x553167;this[_0x27fba7(0x79d)]=0x0;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0xa8e)]=function(){const _0x1df468=_0x553167;return this[_0x1df468(0x49f)]>0x0;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x546)]=function(_0x298584,_0xe5f339,_0x313694){const _0x2adb23=_0x553167;if(this[_0x2adb23(0x2af)]===_0x298584)return;this[_0x2adb23(0x2af)]=_0x298584,this['_opacityDuration']=_0xe5f339,this['_opacityWholeDuration']=_0xe5f339,this[_0x2adb23(0x9c7)]=_0x313694||_0x2adb23(0x9fe);if(_0xe5f339<=0x0)this[_0x2adb23(0x25b)]=_0x298584;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x5ad)]=function(){const _0x378772=_0x553167;if(this[_0x378772(0x589)]['name']==='Sprite_SvEnemy')return;if(this[_0x378772(0x1b1)]<=0x0)return;const _0x4a83fe=this[_0x378772(0x1b1)],_0xd74671=this['_opacityWholeDuration'],_0x35f9b5=this['_opacityEasing'];Imported['VisuMZ_0_CoreEngine']?this[_0x378772(0x25b)]=this[_0x378772(0x7c5)](this[_0x378772(0x25b)],this[_0x378772(0x2af)],_0x4a83fe,_0xd74671,_0x35f9b5):this[_0x378772(0x25b)]=(this[_0x378772(0x25b)]*(_0x4a83fe-0x1)+this[_0x378772(0x2af)])/_0x4a83fe;this['_opacityDuration']--;if(this[_0x378772(0x1b1)]<=0x0)this[_0x378772(0xb74)]();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0xb74)]=function(){const _0x5d1ab3=_0x553167;this['opacity']=this[_0x5d1ab3(0x2af)];},Sprite_Battler['prototype']['isChangingOpacity']=function(){const _0x45a0a2=_0x553167;return this[_0x45a0a2(0x1b1)]>0x0;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x971)]=function(){const _0x8fd07b=_0x553167;this['_shadowSprite'][_0x8fd07b(0x743)]=this[_0x8fd07b(0x928)][_0x8fd07b(0x661)](),this[_0x8fd07b(0x150)]();},Sprite_Battler['prototype'][_0x553167(0x150)]=function(){const _0xa0cd32=_0x553167;if(!this[_0xa0cd32(0x85f)])return;this[_0xa0cd32(0x85f)]['y']=this[_0xa0cd32(0x756)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x553167(0x3d1)]=function(){const _0x8813f2=_0x553167;if(!this[_0x8813f2(0x928)])return;this[_0x8813f2(0x548)]=this[_0x8813f2(0x928)][_0x8813f2(0x3c1)](),this[_0x8813f2(0x327)]=this['_battler'][_0x8813f2(0x45b)]();},Game_BattlerBase['prototype'][_0x553167(0x3c1)]=function(){const _0x4f5b14=_0x553167,_0x1d4311=this[_0x4f5b14(0x8fb)]()?this['actor']():this[_0x4f5b14(0xb8f)]();if(_0x1d4311){const _0x3c89c2=_0x1d4311['note'];if(_0x3c89c2[_0x4f5b14(0x750)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x3c89c2[_0x4f5b14(0x750)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x45b)]=function(){const _0x4fc20e=_0x553167,_0x5799e3=this[_0x4fc20e(0x8fb)]()?this[_0x4fc20e(0xaa9)]():this[_0x4fc20e(0xb8f)]();if(_0x5799e3){const _0x84900c=_0x5799e3[_0x4fc20e(0x645)];if(_0x84900c[_0x4fc20e(0x750)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x84900c['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x6fc)]=function(){const _0x4c341d=_0x553167;if(this[_0x4c341d(0x589)]===Sprite_SvEnemy)return;this['updateGrow'](),this['finalizeScale']();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x49d)]=function(){const _0x2c9626=_0x553167,_0x46bc5b=this['_distortionSprite'];_0x46bc5b&&(_0x46bc5b[_0x2c9626(0xb03)]['x']=this[_0x2c9626(0x479)](),_0x46bc5b['scale']['y']=this[_0x2c9626(0x930)]());},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x479)]=function(){const _0x32aa71=_0x553167;let _0x1eed7e=0x1;return _0x1eed7e*=this[_0x32aa71(0xa1b)],_0x1eed7e*=this['_growX'],_0x1eed7e;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x930)]=function(){const _0x21a114=_0x553167;return 0x1*this[_0x21a114(0x4cb)];},Sprite_Battler['prototype'][_0x553167(0x1ca)]=function(){const _0x1abfc1=_0x553167;return this[_0x1abfc1(0x9ce)]*this[_0x1abfc1(0x479)]();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x9ad)]=function(){const _0x1a08d5=_0x553167;return this[_0x1a08d5(0x908)]*this['mainSpriteScaleY']();},Sprite_Battler['prototype'][_0x553167(0x2ac)]=function(_0x251a94,_0x2ea827,_0x2d72d9,_0xe17f46){const _0x34377f=_0x553167;if(!this[_0x34377f(0x230)]())return;if(!this[_0x34377f(0x753)])return;if(this[_0x34377f(0x4cf)]===_0x251a94&&this['_targetGrowY']===_0x2ea827)return;this['_targetGrowX']=_0x251a94,this[_0x34377f(0x30d)]=_0x2ea827,this[_0x34377f(0x9a4)]=_0x2d72d9,this[_0x34377f(0x863)]=_0x2d72d9,this['_growEasing']=_0xe17f46||_0x34377f(0x9fe),_0x2d72d9<=0x0&&(this[_0x34377f(0x64d)]=this[_0x34377f(0x4cf)],this[_0x34377f(0x4cb)]=this[_0x34377f(0x30d)]);},Sprite_Battler[_0x553167(0x22b)]['updateGrow']=function(){const _0x5e5bdc=_0x553167;if(this[_0x5e5bdc(0x9a4)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x5cd325=this[_0x5e5bdc(0x9a4)],_0x4239fb=this[_0x5e5bdc(0x863)],_0x309be0=this[_0x5e5bdc(0xb7c)];Imported[_0x5e5bdc(0x28b)]?(this[_0x5e5bdc(0x64d)]=this[_0x5e5bdc(0x7c5)](this[_0x5e5bdc(0x64d)],this[_0x5e5bdc(0x4cf)],_0x5cd325,_0x4239fb,_0x309be0),this[_0x5e5bdc(0x4cb)]=this['applyEasing'](this[_0x5e5bdc(0x4cb)],this[_0x5e5bdc(0x30d)],_0x5cd325,_0x4239fb,_0x309be0)):(this['_growX']=(this[_0x5e5bdc(0x64d)]*(_0x5cd325-0x1)+this[_0x5e5bdc(0x4cf)])/_0x5cd325,this[_0x5e5bdc(0x4cb)]=(this['_growY']*(_0x5cd325-0x1)+this[_0x5e5bdc(0x30d)])/_0x5cd325);this[_0x5e5bdc(0x9a4)]--;if(this[_0x5e5bdc(0x9a4)]<=0x0)this[_0x5e5bdc(0x541)]();},Sprite_Battler['prototype'][_0x553167(0x541)]=function(){const _0x4a4a04=_0x553167;this[_0x4a4a04(0x64d)]=this[_0x4a4a04(0x4cf)],this[_0x4a4a04(0x4cb)]=this[_0x4a4a04(0x30d)];},Sprite_Battler[_0x553167(0x22b)]['isGrowing']=function(){const _0x2fbf6a=_0x553167;return this[_0x2fbf6a(0x9a4)]>0x0;},Sprite_Battler['prototype'][_0x553167(0x38b)]=function(_0x3af20c,_0x182882,_0x29476b,_0x4d0097){const _0x20e84a=_0x553167;if(!this[_0x20e84a(0x230)]())return;if(!this[_0x20e84a(0x753)])return;if(this[_0x20e84a(0x790)]===_0x3af20c&&this[_0x20e84a(0xa89)]===_0x182882)return;this[_0x20e84a(0x790)]=_0x3af20c,this[_0x20e84a(0xa89)]=_0x182882,this[_0x20e84a(0x843)]=_0x29476b,this[_0x20e84a(0x808)]=_0x29476b,this[_0x20e84a(0xaf0)]=_0x4d0097||'Linear',_0x29476b<=0x0&&(this[_0x20e84a(0x753)][_0x20e84a(0xa31)]['x']=this['_targetSkewX'],this[_0x20e84a(0x753)][_0x20e84a(0xa31)]['y']=this[_0x20e84a(0xa89)]);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x552)]=function(){const _0x518e5f=_0x553167;if(this['_skewDuration']<=0x0)return;if(!this[_0x518e5f(0x753)])return;const _0x1ddd1c=this[_0x518e5f(0x843)],_0x4b0707=this[_0x518e5f(0x808)],_0x17e197=this[_0x518e5f(0xaf0)],_0x417c03=this['_distortionSprite'];Imported[_0x518e5f(0x28b)]?(_0x417c03[_0x518e5f(0xa31)]['x']=this[_0x518e5f(0x7c5)](_0x417c03[_0x518e5f(0xa31)]['x'],this[_0x518e5f(0x790)],_0x1ddd1c,_0x4b0707,_0x17e197),_0x417c03[_0x518e5f(0xa31)]['y']=this[_0x518e5f(0x7c5)](_0x417c03[_0x518e5f(0xa31)]['y'],this['_targetSkewY'],_0x1ddd1c,_0x4b0707,_0x17e197)):(_0x417c03[_0x518e5f(0xa31)]['x']=(_0x417c03[_0x518e5f(0xa31)]['x']*(_0x1ddd1c-0x1)+this[_0x518e5f(0x790)])/_0x1ddd1c,_0x417c03[_0x518e5f(0xa31)]['y']=(_0x417c03[_0x518e5f(0xa31)]['y']*(_0x1ddd1c-0x1)+this[_0x518e5f(0xa89)])/_0x1ddd1c);this['_skewDuration']--;if(this[_0x518e5f(0x843)]<=0x0)this[_0x518e5f(0x226)]();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x226)]=function(){const _0x332535=_0x553167;this[_0x332535(0x753)][_0x332535(0xa31)]['x']=this[_0x332535(0x790)],this[_0x332535(0x753)][_0x332535(0xa31)]['y']=this[_0x332535(0xa89)];},Sprite_Battler[_0x553167(0x22b)]['isSkewing']=function(){const _0x7ce41=_0x553167;return this[_0x7ce41(0x843)]>0x0;},Sprite_Battler['prototype'][_0x553167(0x171)]=function(_0x511ccc,_0x4f5f3b,_0x1f2c47,_0x3cc1fd){const _0x8818b=_0x553167;if(!this['canMove']())return;if(!this[_0x8818b(0x753)])return;if(this['_targetAngle']===_0x511ccc)return;this['_targetAngle']=_0x511ccc,this['_angleDuration']=_0x4f5f3b,this[_0x8818b(0x969)]=_0x4f5f3b,this[_0x8818b(0xa18)]=_0x1f2c47||_0x8818b(0x9fe),this[_0x8818b(0x8cd)]=_0x3cc1fd,this['_angleRevertOnFinish']===undefined&&(this[_0x8818b(0x8cd)]=!![]),_0x4f5f3b<=0x0&&(this[_0x8818b(0x1e8)]=_0x511ccc,this[_0x8818b(0x8cd)]&&(this['_targetAngle']=0x0,this[_0x8818b(0x1e8)]=0x0));},Sprite_Battler[_0x553167(0x22b)]['updateSpin']=function(){const _0xf4d47=_0x553167;this['updateAngleCalculations'](),this[_0xf4d47(0x239)]();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x7ea)]=function(){const _0x4f52c3=_0x553167;if(this[_0x4f52c3(0x818)]<=0x0)return;const _0x74d4f1=this[_0x4f52c3(0x818)],_0x1f5e14=this[_0x4f52c3(0x969)],_0x46d8ca=this[_0x4f52c3(0xa18)];Imported[_0x4f52c3(0x28b)]?this['_currentAngle']=this[_0x4f52c3(0x7c5)](this[_0x4f52c3(0x1e8)],this[_0x4f52c3(0x4ac)],_0x74d4f1,_0x1f5e14,_0x46d8ca):this[_0x4f52c3(0x1e8)]=(this[_0x4f52c3(0x1e8)]*(_0x74d4f1-0x1)+this[_0x4f52c3(0x4ac)])/_0x74d4f1;this[_0x4f52c3(0x818)]--;if(this[_0x4f52c3(0x818)]<=0x0)this[_0x4f52c3(0x8c9)]();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x8c9)]=function(){const _0x265697=_0x553167;this[_0x265697(0x1e8)]=this[_0x265697(0x4ac)],this[_0x265697(0x8cd)]&&(this[_0x265697(0x4ac)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler['prototype'][_0x553167(0xab3)]=function(){const _0x1f3ea5=_0x553167;return this[_0x1f3ea5(0x818)]>0x0;},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x239)]=function(){const _0x33055c=_0x553167;if(!this[_0x33055c(0x753)])return;const _0x15ba92=this['_currentAngle'],_0x2244a0=this['scale']['x'],_0x433461=this[_0x33055c(0x928)]['isActor']()?-0x1:0x1;this[_0x33055c(0x753)]['angle']=_0x15ba92*_0x2244a0*_0x433461;const _0x41ce7f=this['_distortionSprite']['scale']['y'];this[_0x33055c(0x753)]['y']=this[_0x33055c(0x908)]*-0.5*(0x2-_0x41ce7f),this[_0x33055c(0x753)]['y']=Math[_0x33055c(0xbe1)](this['_distortionSprite']['y']);const _0x5e15e5=[this[_0x33055c(0x1d5)],this[_0x33055c(0x3f4)],this[_0x33055c(0x632)]];for(const _0x495175 of _0x5e15e5){if(!_0x495175)continue;_0x495175['y']=this['height']*0.5;}this[_0x33055c(0x85f)]&&(this['_shadowScaleX']=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this[_0x33055c(0x327)]??0x1,this[_0x33055c(0x85f)][_0x33055c(0xb03)]['x']=this[_0x33055c(0x753)][_0x33055c(0xb03)]['x']*this[_0x33055c(0x548)],this[_0x33055c(0x85f)][_0x33055c(0xb03)]['y']=this[_0x33055c(0x753)][_0x33055c(0xb03)]['y']*this[_0x33055c(0x327)]);},VisuMZ[_0x553167(0x841)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x553167(0x22b)][_0x553167(0x43f)],Sprite_Actor[_0x553167(0x22b)][_0x553167(0x43f)]=function(){const _0x29889f=_0x553167;VisuMZ[_0x29889f(0x841)][_0x29889f(0x366)]['call'](this),VisuMZ['BattleCore'][_0x29889f(0x309)][_0x29889f(0x24c)][_0x29889f(0x4a6)]&&this[_0x29889f(0xb99)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x9a6)]=Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x7dc)],Sprite_Enemy['prototype'][_0x553167(0x7dc)]=function(){const _0xe9c6=_0x553167;VisuMZ[_0xe9c6(0x841)]['Settings'][_0xe9c6(0x24c)]['ShowEnemyGauge']&&this['createHpGaugeSprite'](),VisuMZ[_0xe9c6(0x841)][_0xe9c6(0x9a6)][_0xe9c6(0x7f7)](this);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0xb99)]=function(){const _0x1e14cd=_0x553167;if(!ConfigManager['visualHpGauge'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x254a99=VisuMZ[_0x1e14cd(0x841)]['Settings'][_0x1e14cd(0x24c)],_0xc263d7=new Sprite_HpGauge();_0xc263d7[_0x1e14cd(0x9f3)]['x']=_0x254a99[_0x1e14cd(0xa80)],_0xc263d7[_0x1e14cd(0x9f3)]['y']=_0x254a99[_0x1e14cd(0x6d3)],_0xc263d7[_0x1e14cd(0xb03)]['x']=_0xc263d7['scale']['y']=_0x254a99[_0x1e14cd(0x151)],this[_0x1e14cd(0x52a)]=_0xc263d7,this[_0x1e14cd(0xbd9)](this[_0x1e14cd(0x52a)]),Spriteset_Battle[_0x1e14cd(0x245)]&&BattleManager['addChildToUiContainer'](this[_0x1e14cd(0x52a)]);},VisuMZ[_0x553167(0x841)][_0x553167(0x42f)]=Sprite_Battler[_0x553167(0x22b)]['setBattler'],Sprite_Battler[_0x553167(0x22b)][_0x553167(0x4e5)]=function(_0x5d3d6c){const _0x1c7e51=_0x553167,_0x512935=this[_0x1c7e51(0x928)];VisuMZ['BattleCore'][_0x1c7e51(0x42f)][_0x1c7e51(0x7f7)](this,_0x5d3d6c),this[_0x1c7e51(0xb9d)](_0x5d3d6c);if(_0x512935!==_0x5d3d6c)this[_0x1c7e51(0x3d1)]();},Sprite_Battler[_0x553167(0x22b)]['setupHpGaugeSprite']=function(_0x24adb2){const _0x16f709=_0x553167;if(!_0x24adb2)return;if(!this[_0x16f709(0x52a)])return;if(_0x24adb2[_0x16f709(0x8fb)]()){}else{if(_0x24adb2[_0x16f709(0x602)]()){if(this[_0x16f709(0x589)]===Sprite_SvEnemy&&!_0x24adb2[_0x16f709(0x661)]())return;}}this['_hpGaugeSprite'][_0x16f709(0x303)](_0x24adb2,'hp');},Sprite_Battler['prototype'][_0x553167(0x329)]=function(){const _0x3ce8b2=_0x553167;return this['_battler']&&this[_0x3ce8b2(0x928)][_0x3ce8b2(0x329)]();},Sprite_Battler[_0x553167(0x22b)]['updateStaticSvBattlerFrames']=function(){const _0xc9908b=_0x553167,_0x768eab=this['_mainSprite'][_0xc9908b(0xa3a)];if(!_0x768eab)return;const _0x563ff0=_0x768eab['width'];let _0x221b91=_0x768eab[_0xc9908b(0x908)];if(this[_0xc9908b(0x928)][_0xc9908b(0x82f)]()){if(this['_frame'])_0x221b91=Math['max'](0x0,this['_frame'][_0xc9908b(0x908)]-0x4);}this[_0xc9908b(0x1d5)][_0xc9908b(0x51e)](0x0,0x0,_0x563ff0,_0x221b91),this[_0xc9908b(0x51e)](0x0,0x0,_0x563ff0,_0x221b91);},Sprite_Battler['prototype'][_0x553167(0x390)]=function(){const _0x18379e=_0x553167;if(!this[_0x18379e(0x928)])return;if(!this[_0x18379e(0x52a)])return;const _0x2ccf2b=VisuMZ[_0x18379e(0x841)]['Settings'][_0x18379e(0x24c)],_0x5b687f=this[_0x18379e(0x52a)];_0x5b687f[_0x18379e(0x743)]=this[_0x18379e(0x9d0)]();const _0x1a0b36=_0x2ccf2b[_0x18379e(0x9d1)],_0x3a66f5=_0x2ccf2b[_0x18379e(0xb21)];_0x5b687f['x']=_0x1a0b36,_0x5b687f['x']+=this[_0x18379e(0x928)][_0x18379e(0xbb8)](),_0x5b687f['y']=-this[_0x18379e(0x908)]+_0x3a66f5,_0x5b687f['y']+=this[_0x18379e(0x928)][_0x18379e(0xab6)](),Spriteset_Battle[_0x18379e(0x245)]&&SceneManager[_0x18379e(0xa7f)][_0x18379e(0x306)]&&(_0x5b687f['x']+=this['x'],_0x5b687f['y']+=this['y']);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x9d0)]=function(){const _0x10375a=_0x553167;if(!this['_battler'])return![];if(this[_0x10375a(0x928)][_0x10375a(0x8fb)]())return!![];if(this['_battler']['isHidden']())return![];if(this[_0x10375a(0x25b)]<=0x0)return![];const _0x192fb3=this[_0x10375a(0x928)][_0x10375a(0xb8f)]()[_0x10375a(0x645)];if(_0x192fb3[_0x10375a(0x750)](/<SHOW HP GAUGE>/i))return!![];if(_0x192fb3[_0x10375a(0x750)](/<HIDE HP GAUGE>/i))return![];const _0x56b46c=VisuMZ[_0x10375a(0x841)][_0x10375a(0x309)][_0x10375a(0x24c)];if(_0x56b46c[_0x10375a(0xb51)]){if(_0x56b46c[_0x10375a(0x6a5)]&&BattleManager[_0x10375a(0xf0)]())return!![];if(this['_battler']['_visualHpGauge_JustDied'])return![];return this[_0x10375a(0x928)][_0x10375a(0x50c)]();}return!![];},VisuMZ['BattleCore']['Sprite_Battler_isMoving']=Sprite_Battler[_0x553167(0x22b)][_0x553167(0x13b)],Sprite_Battler['prototype'][_0x553167(0x13b)]=function(){const _0x1eda46=_0x553167;if(!this[_0x1eda46(0x928)])return![];if(this[_0x1eda46(0x498)]>0x0)return!![];return VisuMZ['BattleCore'][_0x1eda46(0x664)][_0x1eda46(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x333)]=Sprite_Battler[_0x553167(0x22b)]['startMove'],Sprite_Battler[_0x553167(0x22b)]['startMove']=function(_0x2c15bb,_0x2e24c1,_0x4bbf83){const _0xb0a271=_0x553167;this[_0xb0a271(0x230)]()&&VisuMZ[_0xb0a271(0x841)][_0xb0a271(0x333)][_0xb0a271(0x7f7)](this,_0x2c15bb,_0x2e24c1,_0x4bbf83);},Sprite_Battler[_0x553167(0x22b)]['canMove']=function(){const _0x1e9139=_0x553167;if(this[_0x1e9139(0x928)]&&this[_0x1e9139(0x928)][_0x1e9139(0x82f)]())return![];if(this[_0x1e9139(0x928)]&&!this[_0x1e9139(0x928)][_0x1e9139(0xbd4)]())return![];return $gameSystem[_0x1e9139(0x196)]();},Sprite_Battler[_0x553167(0x22b)][_0x553167(0xbb4)]=function(){},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x861)]=function(){const _0x151278=_0x553167;this[_0x151278(0xbe5)](0x0,0x0,0xc);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x9bc)]=function(){},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x39a)]=function(){const _0x58887a=_0x553167,_0x4e32ef=VisuMZ['BattleCore'][_0x58887a(0x309)][_0x58887a(0x5d0)],_0x31ae5e=this[_0x58887a(0x928)]&&this['_battler'][_0x58887a(0x8fb)]()?0x1:-0x1,_0x360235=this[_0x58887a(0x649)]-this[_0x58887a(0x173)]+_0x31ae5e*_0x4e32ef[_0x58887a(0x5a8)],_0x408453=this[_0x58887a(0x756)]-this[_0x58887a(0x6ea)]+_0x31ae5e*_0x4e32ef[_0x58887a(0xb85)],_0x1cd398=_0x4e32ef[_0x58887a(0x24e)];this['startMove'](_0x360235,_0x408453,_0x1cd398);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0x13e)]=function(_0x16ac1c,_0x4dbad9){const _0x917593=_0x553167,_0x1a7c91=VisuMZ[_0x917593(0x841)][_0x917593(0x309)][_0x917593(0x5d0)];this[_0x917593(0x793)]=Math[_0x917593(0xbe1)]((_0x1a7c91[_0x917593(0xba6)]??0x18)*_0x4dbad9),this[_0x917593(0x599)]=Math[_0x917593(0x4c1)](this[_0x917593(0x599)],_0x16ac1c);},Sprite_Battler[_0x553167(0x22b)][_0x553167(0xa3f)]=function(){const _0x504450=_0x553167,_0x54b9ee=VisuMZ[_0x504450(0x841)][_0x504450(0x309)][_0x504450(0x5d0)];if(!(_0x54b9ee[_0x504450(0x1f9)]??![]))return;if(this[_0x504450(0x793)]>0x0){const _0x57e148=this[_0x504450(0x793)];this[_0x504450(0x599)]=this['_shakeFlinchPower']*(_0x57e148-0x1)/_0x57e148,this[_0x504450(0x793)]--,this[_0x504450(0x793)]<=0x0&&(this[_0x504450(0x599)]=0x0);}this[_0x504450(0x599)]>0x0?(this['_mainSprite']['x']=Math[_0x504450(0x852)](this[_0x504450(0x599)])*(Math[_0x504450(0x3e5)]()<0.5?-0x1:0x1),this[_0x504450(0x756)]!==this['y']&&(this['_mainSprite']['y']=this[_0x504450(0x908)]*0.5,this[_0x504450(0x1d5)]['y']+=Math[_0x504450(0x852)](this['_shakeFlinchPower'])*(Math[_0x504450(0x3e5)]()<0.5?-0x1:0x1))):(this[_0x504450(0x1d5)]['x']=0x0,this[_0x504450(0x1d5)]['y']=this[_0x504450(0x908)]*0.5);},VisuMZ['BattleCore'][_0x553167(0xad2)]=Sprite_Actor[_0x553167(0x22b)]['initMembers'],Sprite_Actor['prototype'][_0x553167(0x23a)]=function(){const _0x3950ab=_0x553167;VisuMZ[_0x3950ab(0x841)][_0x3950ab(0xad2)][_0x3950ab(0x7f7)](this),this[_0x3950ab(0x684)]();},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x1d8)]=function(){const _0x3821c4=_0x553167;return this[_0x3821c4(0x753)]||this['_mainSprite']||this;},VisuMZ['BattleCore'][_0x553167(0x6a7)]=Sprite_Actor['prototype']['moveToStartPosition'],Sprite_Actor[_0x553167(0x22b)][_0x553167(0x2cd)]=function(){},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x85d)]=function(_0x4dc42b){const _0x1286ba=_0x553167;if(SceneManager[_0x1286ba(0x783)]())return;if(!_0x4dc42b)return;if(!_0x4dc42b[_0x1286ba(0x230)]())return;VisuMZ[_0x1286ba(0x841)][_0x1286ba(0x6a7)][_0x1286ba(0x7f7)](this);},VisuMZ['BattleCore']['Sprite_Actor_setActorHome']=Sprite_Actor['prototype'][_0x553167(0x544)],Sprite_Actor[_0x553167(0x22b)][_0x553167(0x544)]=function(_0x3ef26f){const _0x37821a=_0x553167;VisuMZ[_0x37821a(0x841)]['Settings']['Actor'][_0x37821a(0x31c)]?VisuMZ['BattleCore'][_0x37821a(0x309)][_0x37821a(0x5d0)][_0x37821a(0x31c)]['call'](this,_0x3ef26f):VisuMZ['BattleCore'][_0x37821a(0x115)][_0x37821a(0x7f7)](this,_0x3ef26f);},VisuMZ[_0x553167(0x841)][_0x553167(0x8a6)]=Sprite_Actor[_0x553167(0x22b)][_0x553167(0x4e5)],Sprite_Actor[_0x553167(0x22b)][_0x553167(0x4e5)]=function(_0x6c5e01){const _0x4eb88c=_0x553167;VisuMZ['BattleCore'][_0x4eb88c(0x8a6)][_0x4eb88c(0x7f7)](this,_0x6c5e01),this[_0x4eb88c(0x88a)](_0x6c5e01);},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x88a)]=function(_0x191c2d){const _0x25b90a=_0x553167;if(!_0x191c2d)return;if(!this['_mainSprite'])return;this[_0x25b90a(0x1d5)][_0x25b90a(0x9f3)]['x']=this['_actor']['svBattlerAnchorX'](),this['_mainSprite'][_0x25b90a(0x9f3)]['y']=this['_actor'][_0x25b90a(0x264)](),this[_0x25b90a(0x6a9)]();},VisuMZ['BattleCore'][_0x553167(0x220)]=Sprite_Actor[_0x553167(0x22b)][_0x553167(0xbcd)],Sprite_Actor[_0x553167(0x22b)][_0x553167(0xbcd)]=function(){const _0x548939=_0x553167;VisuMZ['BattleCore'][_0x548939(0x220)][_0x548939(0x7f7)](this),this['_actor']&&(this[_0x548939(0x328)](),this[_0x548939(0xc02)]());},VisuMZ[_0x553167(0x841)][_0x553167(0xbed)]=Sprite_Actor[_0x553167(0x22b)][_0x553167(0x1fb)],Sprite_Actor[_0x553167(0x22b)][_0x553167(0x1fb)]=function(){const _0x2570ea=_0x553167;VisuMZ['BattleCore'][_0x2570ea(0xbed)][_0x2570ea(0x7f7)](this),this[_0x2570ea(0x1d5)]&&this[_0x2570ea(0x1d5)][_0x2570ea(0xa3a)]&&this[_0x2570ea(0x928)]&&(this['_mainSprite'][_0x2570ea(0xa3a)]['smooth']!==this[_0x2570ea(0x928)][_0x2570ea(0x9b8)]()&&(this[_0x2570ea(0x1d5)][_0x2570ea(0xa3a)][_0x2570ea(0x14f)]=this[_0x2570ea(0x928)][_0x2570ea(0x9b8)]()));},VisuMZ[_0x553167(0x841)][_0x553167(0x556)]=Sprite_Actor[_0x553167(0x22b)]['updateShadow'],Sprite_Actor[_0x553167(0x22b)][_0x553167(0x971)]=function(){const _0x5f2e7f=_0x553167;VisuMZ[_0x5f2e7f(0x841)][_0x5f2e7f(0x556)][_0x5f2e7f(0x7f7)](this),this[_0x5f2e7f(0xb13)]();},Sprite_Actor['prototype']['updateShadowBattleCore']=function(){const _0x5f05ad=_0x553167;if(!this[_0x5f05ad(0x1d5)])return;if(!this[_0x5f05ad(0x85f)])return;this['updateShadowVisibility'](),this[_0x5f05ad(0x150)]();},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x328)]=function(){const _0x50e17f=_0x553167;{this[_0x50e17f(0x36c)][_0x50e17f(0xb03)]['x']=0x1/(this[_0x50e17f(0xb03)]['x']||0.001),this[_0x50e17f(0x36c)][_0x50e17f(0xb03)]['y']=0x1/(this[_0x50e17f(0xb03)]['y']||0.001);}{this['_stateSprite']['x']=0x0,this[_0x50e17f(0x36c)]['y']=-this[_0x50e17f(0x908)]-0x20+0x60;const _0x4ea0be=VisuMZ[_0x50e17f(0x841)][_0x50e17f(0x309)]['Actor'];this[_0x50e17f(0x36c)]['x']+=_0x4ea0be[_0x50e17f(0x5ab)]??0x0,this['_stateSprite']['y']+=_0x4ea0be['StateOverlayOffsetY']??0x0;}},Sprite_Actor['prototype'][_0x553167(0xc02)]=function(){const _0x5e1fcb=_0x553167;if(!$gameSystem[_0x5e1fcb(0x196)]()&&this[_0x5e1fcb(0x589)]===Sprite_Actor){const _0xb38307=Scene_Battle[_0x5e1fcb(0x22b)]['battleLayoutStyle']();['default',_0x5e1fcb(0x5d3),_0x5e1fcb(0x7cf),'border'][_0x5e1fcb(0xb5d)](_0xb38307)&&(this[_0x5e1fcb(0x25b)]=0x0);}},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x1e7)]=function(){const _0x121bd3=_0x553167,_0x5ed560=this[_0x121bd3(0x3d0)];if(_0x5ed560){if(_0x5ed560[_0x121bd3(0x393)])return;const _0x5e1b9d=_0x5ed560['stateMotionIndex']();if(_0x5ed560[_0x121bd3(0x70d)]()||_0x5ed560[_0x121bd3(0xbdd)]())this['startMotion']('walk');else{if(_0x5e1b9d===0x3)this[_0x121bd3(0x5ce)](_0x121bd3(0x3ea));else{if(_0x5e1b9d===0x2)this['startMotion'](_0x121bd3(0xa4f));else{if(this[_0x121bd3(0x16d)])this[_0x121bd3(0x5ce)](_0x121bd3(0x9dc));else{if(_0x5ed560[_0x121bd3(0x654)]())this[_0x121bd3(0x5ce)](_0x121bd3(0xb72));else{if(_0x5ed560[_0x121bd3(0x6ec)]())this['startMotion'](_0x121bd3(0x940));else{if(_0x5ed560[_0x121bd3(0x452)]()||_0x5ed560[_0x121bd3(0xb5e)]())this['startMotion'](_0x121bd3(0x6fd));else{if(_0x5e1b9d===0x1)this[_0x121bd3(0x5ce)](_0x121bd3(0x798));else{if(_0x5ed560[_0x121bd3(0x15f)]())this['startMotion'](_0x121bd3(0x81b));else{if(_0x5ed560[_0x121bd3(0x2e5)]())this[_0x121bd3(0x5ce)](_0x121bd3(0x57d));else _0x5ed560[_0x121bd3(0xa59)]()?this[_0x121bd3(0x5ce)](_0x121bd3(0xb72)):this[_0x121bd3(0x5ce)](_0x121bd3(0x57d));}}}}}}}}}}},Sprite_Actor[_0x553167(0x22b)]['retreat']=function(){const _0x5ad52d=_0x553167,_0x35d3b5=0xa,_0x440801=0x12c*_0x35d3b5,_0x36954d=0x1e*_0x35d3b5;this[_0x5ad52d(0xbe5)](_0x440801,0x0,_0x36954d);},Sprite_Actor['prototype'][_0x553167(0x3a8)]=function(){const _0x496667=_0x553167;Sprite_Battler['prototype'][_0x496667(0x3a8)][_0x496667(0x7f7)](this);},Sprite_Actor['prototype'][_0x553167(0x84a)]=function(){const _0x2b09f4=_0x553167;return Sprite_Battler[_0x2b09f4(0x914)];},Sprite_Weapon[_0x553167(0x22b)][_0x553167(0x8f5)]=function(){const _0x1605e1=_0x553167;return Sprite_Battler[_0x1605e1(0x914)];},Sprite_Actor['prototype'][_0x553167(0x361)]=function(){},Sprite_Actor[_0x553167(0x22b)]['setupWeaponAnimation']=function(){},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x29d)]=function(){const _0x488a2e=_0x553167;if(this['_motion']&&++this['_motionCount']>=this[_0x488a2e(0x84a)]()){if(this[_0x488a2e(0x131)]['loop'])this[_0x488a2e(0x482)]=(this[_0x488a2e(0x482)]+0x1)%0x4;else{if(this['_pattern']<0x2)this[_0x488a2e(0x482)]++;else{const _0xb3fe2a=this['_actor'];if(_0xb3fe2a)_0xb3fe2a[_0x488a2e(0x393)]=undefined;this[_0x488a2e(0x1e7)]();}}this[_0x488a2e(0x157)]=0x0;}},Sprite_Actor[_0x553167(0x22b)]['forceMotion']=function(_0x41448c){const _0x45e55d=_0x553167;if(this[_0x45e55d(0x928)]&&this['_battler'][_0x45e55d(0x82f)]()){this['_motion']=Sprite_Actor[_0x45e55d(0x221)]['dead'];return;}const _0xf5bd7b=Sprite_Actor['MOTIONS'][_0x41448c];this['_motion']=_0xf5bd7b,this[_0x45e55d(0x157)]=0x0,this[_0x45e55d(0x482)]=0x0;},Sprite_Actor['prototype'][_0x553167(0x9e8)]=function(_0x5910d7){const _0x18128c=_0x553167;if(this[_0x18128c(0x329)]())return;this['adjustWeaponSpriteOffset'](),this[_0x18128c(0x751)][_0x18128c(0x303)](_0x5910d7),this['_actor'][_0x18128c(0x704)]();},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x13f)]=function(){const _0x1d8f36=_0x553167;let _0x437638=-0x10,_0x139e35=this[_0x1d8f36(0x908)]*0.5;const _0x4dddf1=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x178235=this[_0x1d8f36(0x928)][_0x1d8f36(0x446)]()[_0x1d8f36(0x5c6)](_0x62568f=>_0x62568f&&_0x62568f['note'][_0x1d8f36(0x750)](_0x4dddf1)?Number(RegExp['$1']):0x0),_0x58b0b1=this['_battler'][_0x1d8f36(0x446)]()[_0x1d8f36(0x5c6)](_0x1a87b4=>_0x1a87b4&&_0x1a87b4[_0x1d8f36(0x645)][_0x1d8f36(0x750)](_0x4dddf1)?Number(RegExp['$2']):0x0);_0x437638=_0x178235[_0x1d8f36(0x4da)]((_0x47310d,_0x4e927e)=>_0x47310d+_0x4e927e,_0x437638),_0x139e35=_0x58b0b1[_0x1d8f36(0x4da)]((_0x5db816,_0x491d4d)=>_0x5db816+_0x491d4d,_0x139e35),this[_0x1d8f36(0x751)]['x']=_0x437638,this['_weaponSprite']['y']=_0x139e35,this[_0x1d8f36(0x751)][_0x1d8f36(0xbcd)]();},Sprite_Weapon['prototype'][_0x553167(0x303)]=function(_0x178e3c){const _0x1e5971=_0x553167;this[_0x1e5971(0x7cc)]=_0x178e3c,this[_0x1e5971(0x2fb)]=-0x1,this[_0x1e5971(0x482)]=0x0,this[_0x1e5971(0x29e)](),this['updateFrame']();},Sprite_Actor[_0x553167(0x22b)][_0x553167(0x77b)]=function(){},Sprite_Actor[_0x553167(0x22b)][_0x553167(0xbb4)]=function(){const _0x1510e4=_0x553167,_0x5d79c8=VisuMZ[_0x1510e4(0x841)][_0x1510e4(0x309)][_0x1510e4(0x740)],_0x498685=_0x5d79c8[_0x1510e4(0x5e6)],_0x5885e5=_0x5d79c8[_0x1510e4(0x41d)],_0x5f1a3b=_0x5d79c8['StepDuration'];this[_0x1510e4(0xbe5)](-_0x498685,-_0x5885e5,_0x5f1a3b);},VisuMZ[_0x553167(0x841)][_0x553167(0x98a)]=Sprite_Actor[_0x553167(0x22b)][_0x553167(0x9b9)],Sprite_Actor['prototype'][_0x553167(0x9b9)]=function(){const _0x57d138=_0x553167;this[_0x57d138(0x329)]()?this['updateStaticSvBattlerFrames']():(this[_0x57d138(0x21b)](),VisuMZ[_0x57d138(0x841)][_0x57d138(0x98a)]['call'](this));},Sprite_Actor['prototype']['applyFreezeMotionFrames']=function(){const _0x21daa9=_0x553167;if(this['_battler']&&this['_battler'][_0x21daa9(0x4b2)]){const _0x52616b=this[_0x21daa9(0x928)][_0x21daa9(0x4b2)];this[_0x21daa9(0x131)]=Sprite_Actor[_0x21daa9(0x221)][_0x52616b[_0x21daa9(0x418)]],this['_pattern']=_0x52616b[_0x21daa9(0x1dd)];const _0x34b451=this[_0x21daa9(0x751)];_0x34b451[_0x21daa9(0x37c)](_0x52616b['weaponImageId'],_0x52616b[_0x21daa9(0x1dd)]),this[_0x21daa9(0x13f)]();}},Sprite_Weapon[_0x553167(0x22b)][_0x553167(0x37c)]=function(_0x2c024c,_0x2ae97d){const _0x2415bf=_0x553167;this['_weaponImageId']=_0x2c024c,this[_0x2415bf(0x2fb)]=-Infinity,this[_0x2415bf(0x482)]=_0x2ae97d,this['loadBitmap'](),this[_0x2415bf(0x9b9)]();},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x23a)]=function(){const _0x43dcfa=_0x553167;Sprite_Battler['prototype'][_0x43dcfa(0x23a)][_0x43dcfa(0x7f7)](this),this['_enemy']=null,this[_0x43dcfa(0x15e)]=![],this[_0x43dcfa(0x40f)]='',this['_battlerHue']=0x0,this['_effectType']=null,this[_0x43dcfa(0x44b)]=0x0,this['_shake']=0x0,this['createMainSprite'](),this['createStateIconSprite']();},VisuMZ[_0x553167(0x841)][_0x553167(0x9e0)]=Sprite_Enemy[_0x553167(0x22b)][_0x553167(0xbcd)],Sprite_Enemy[_0x553167(0x22b)][_0x553167(0xbcd)]=function(){const _0x35c3a0=_0x553167;VisuMZ[_0x35c3a0(0x841)][_0x35c3a0(0x9e0)][_0x35c3a0(0x7f7)](this),this[_0x35c3a0(0x6a9)](),this[_0x35c3a0(0x347)]();},Sprite_Enemy[_0x553167(0x22b)]['createMainSprite']=function(){const _0x318bc=_0x553167;this[_0x318bc(0x1d5)]=new Sprite(),this[_0x318bc(0x1d5)]['anchor']['x']=0.5,this['_mainSprite'][_0x318bc(0x9f3)]['y']=0x1,this['addChild'](this[_0x318bc(0x1d5)]),this[_0x318bc(0x684)]();},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x1d8)]=function(){const _0x5d43ef=_0x553167;return this['_distortionSprite']||this[_0x5d43ef(0x1d5)]||this;},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x29e)]=function(_0x13f16c){const _0x10ad14=_0x553167;this[_0x10ad14(0xa3a)]=new Bitmap(0x1,0x1);if(this[_0x10ad14(0x661)]()){const _0x5bf7a0=this['_enemy'][_0x10ad14(0x3a3)]();this['bitmap']=new Bitmap(_0x5bf7a0['width'],_0x5bf7a0[_0x10ad14(0x908)]),this['_mainSprite'][_0x10ad14(0xa3a)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x10ad14(0x196)]()){const _0x2dc823=ImageManager[_0x10ad14(0x64a)](_0x13f16c);_0x2dc823[_0x10ad14(0x411)](this['onStaticEnemyBitmapLoad']['bind'](this,_0x2dc823));}else{const _0xb64ab7=ImageManager[_0x10ad14(0x6fa)](_0x13f16c);_0xb64ab7[_0x10ad14(0x411)](this[_0x10ad14(0x62d)][_0x10ad14(0x161)](this,_0xb64ab7));}}},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x62d)]=function(_0x4dc41a){const _0x18f9cd=_0x553167;this[_0x18f9cd(0x1d5)][_0x18f9cd(0xa3a)]=_0x4dc41a,this['bitmap']=new Bitmap(_0x4dc41a[_0x18f9cd(0x9ce)],_0x4dc41a[_0x18f9cd(0x908)]);},VisuMZ[_0x553167(0x841)][_0x553167(0x2fe)]=Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x889)],Sprite_Enemy[_0x553167(0x22b)]['setHue']=function(_0x4b76a5){const _0x26009b=_0x553167;this['_mainSprite']&&this[_0x26009b(0x1d5)][_0x26009b(0x889)](_0x4b76a5);},VisuMZ[_0x553167(0x841)][_0x553167(0x1f3)]=Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x216)],Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x216)]=function(){const _0x24d2d4=_0x553167;this[_0x24d2d4(0x92c)]()?VisuMZ[_0x24d2d4(0x841)][_0x24d2d4(0x1f3)][_0x24d2d4(0x7f7)](this):(this['_appeared']=!this[_0x24d2d4(0xb81)][_0x24d2d4(0x4f4)](),!this[_0x24d2d4(0x15e)]&&(this[_0x24d2d4(0x25b)]=0x0));},VisuMZ[_0x553167(0x841)][_0x553167(0x6e4)]=Sprite_Enemy['prototype'][_0x553167(0x475)],Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x475)]=function(){const _0x2d6f34=_0x553167;if(this[_0x2d6f34(0x92c)]())VisuMZ[_0x2d6f34(0x841)][_0x2d6f34(0x6e4)][_0x2d6f34(0x7f7)](this);},Sprite_Enemy['prototype'][_0x553167(0x9b9)]=function(){const _0x488434=_0x553167;Sprite_Battler[_0x488434(0x22b)][_0x488434(0x9b9)]['call'](this);const _0x421861=this[_0x488434(0x1d8)]()||this;if(!_0x421861)return;!_0x421861['bitmap']&&(_0x421861['bitmap']=new Bitmap(this[_0x488434(0x9ce)]||0x1,this[_0x488434(0x908)]||0x1));if(this['_effectType']==='bossCollapse')this[_0x488434(0x1d5)][_0x488434(0x51e)](0x0,0x0,this[_0x488434(0x1d5)][_0x488434(0x9ce)]||0x1,this[_0x488434(0x44b)]);else{let _0x6e25d4=0x1;if(_0x421861&&_0x421861[_0x488434(0xa3a)])_0x6e25d4=_0x421861[_0x488434(0xa3a)][_0x488434(0x9ce)];let _0x616661=0x1;if(this['bitmap'])_0x616661=this[_0x488434(0xa3a)][_0x488434(0x908)];_0x421861[_0x488434(0x51e)](0x0,0x0,_0x6e25d4,_0x616661);}},VisuMZ['BattleCore']['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x585)],Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x585)]=function(){const _0x25ea6f=_0x553167;if(this[_0x25ea6f(0x92c)]())VisuMZ[_0x25ea6f(0x841)][_0x25ea6f(0x9ff)]['call'](this);},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x13b)]=function(){const _0x241ef6=_0x553167;return Sprite_Battler[_0x241ef6(0x22b)][_0x241ef6(0x13b)][_0x241ef6(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x69f)]=Sprite_Enemy[_0x553167(0x22b)]['updateStateSprite'],Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x328)]=function(){const _0x1d14d7=_0x553167;VisuMZ['BattleCore'][_0x1d14d7(0x69f)]['call'](this),this[_0x1d14d7(0x3a2)]();},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x3a2)]=function(){const _0x411d9f=_0x553167,_0x173aef=VisuMZ[_0x411d9f(0x841)]['Settings'][_0x411d9f(0x194)];if(_0x173aef[_0x411d9f(0x3d8)]&&!_0x173aef[_0x411d9f(0x8c5)]){this[_0x411d9f(0x1bb)]['opacity']=0x0;return;}this[_0x411d9f(0x1bb)]['x']=0x0,this[_0x411d9f(0x1bb)]['x']+=this[_0x411d9f(0x928)][_0x411d9f(0xbb8)]();let _0x5e823c=0x1;if(this[_0x411d9f(0xa3a)])_0x5e823c=this[_0x411d9f(0xa3a)][_0x411d9f(0x908)];this[_0x411d9f(0x1bb)]['y']=-_0x5e823c-this['_stateIconSprite'][_0x411d9f(0x908)]-0x4,this[_0x411d9f(0x1bb)]['y']+=this[_0x411d9f(0x928)][_0x411d9f(0xab6)](),this[_0x411d9f(0x1bb)][_0x411d9f(0xb03)]['x']=0x1/(this[_0x411d9f(0xb03)]['x']||0.001),this['_stateIconSprite'][_0x411d9f(0xb03)]['y']=0x1/(this[_0x411d9f(0xb03)]['y']||0.001),this[_0x411d9f(0x661)]()&&(this['_svBattlerSprite']['_stateSprite'][_0x411d9f(0xb03)]['x']=-0x1/(this[_0x411d9f(0xb03)]['x']||0.001),this[_0x411d9f(0x3f4)][_0x411d9f(0x36c)]['scale']['y']=0x1/(this['scale']['y']||0.001));},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x347)]=function(){const _0x579412=_0x553167;this[_0x579412(0x928)]&&this[_0x579412(0x928)]['updateNameTempVisibility']();},VisuMZ[_0x553167(0x841)][_0x553167(0xb98)]=Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x4e5)],Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x4e5)]=function(_0x445c3d){const _0x2b628b=_0x553167;VisuMZ[_0x2b628b(0x841)][_0x2b628b(0xb98)][_0x2b628b(0x7f7)](this,_0x445c3d),this[_0x2b628b(0x7f1)](_0x445c3d);},Sprite_Enemy[_0x553167(0x22b)]['setSvBattlerSprite']=function(_0x310206){const _0x2f1f36=_0x553167;!this['_svBattlerSprite']&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x310206),this[_0x2f1f36(0x684)]()),this[_0x2f1f36(0x3f4)][_0x2f1f36(0x4e5)](_0x310206);},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0x661)]=function(){const _0x45fb60=_0x553167;return this[_0x45fb60(0xb81)]&&this[_0x45fb60(0xb81)][_0x45fb60(0x661)]();},Sprite_Enemy['prototype']['allowCollapse']=function(){const _0x1df824=_0x553167;return this[_0x1df824(0x661)]()?this['_enemy'][_0x1df824(0x92c)]():!![];},Sprite_Enemy['prototype'][_0x553167(0x1e7)]=function(){const _0x478f87=_0x553167;this[_0x478f87(0x661)]()&&this[_0x478f87(0x3f4)][_0x478f87(0x1e7)]();},Sprite_Enemy['prototype'][_0x553167(0xb75)]=function(_0x57a17b){const _0x1a5873=_0x553167;if(this[_0x1a5873(0x661)]())this[_0x1a5873(0x3f4)][_0x1a5873(0xb75)](_0x57a17b);},Sprite_Enemy[_0x553167(0x22b)]['forceWeaponAnimation']=function(_0x3ea14f){const _0x41eecc=_0x553167;if(this[_0x41eecc(0x661)]())this[_0x41eecc(0x3f4)][_0x41eecc(0x9e8)](_0x3ea14f);},Sprite_Enemy[_0x553167(0x22b)][_0x553167(0xbb4)]=function(){const _0x46fd9a=_0x553167,_0x19b8da=VisuMZ['BattleCore'][_0x46fd9a(0x309)][_0x46fd9a(0x740)],_0x1126d5=_0x19b8da[_0x46fd9a(0x5e6)],_0x2cf7f8=_0x19b8da[_0x46fd9a(0x41d)],_0x2e9c6a=_0x19b8da[_0x46fd9a(0xaf5)];this[_0x46fd9a(0xbe5)](_0x1126d5,_0x2cf7f8,_0x2e9c6a);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x553167(0x22b)]=Object['create'](Sprite_Actor[_0x553167(0x22b)]),Sprite_SvEnemy['prototype'][_0x553167(0x589)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype']['initialize']=function(_0x29848e){const _0x3f8bbf=_0x553167;Sprite_Actor[_0x3f8bbf(0x22b)][_0x3f8bbf(0x7a1)][_0x3f8bbf(0x7f7)](this,_0x29848e),this[_0x3f8bbf(0xb03)]['x']=-0x1,this[_0x3f8bbf(0x36c)][_0x3f8bbf(0xb03)]['x']=-0x1;},Sprite_SvEnemy[_0x553167(0x22b)][_0x553167(0x563)]=function(){},Sprite_SvEnemy['prototype'][_0x553167(0x2cd)]=function(){},Sprite_SvEnemy[_0x553167(0x22b)][_0x553167(0x544)]=function(_0x3b7370){},Sprite_SvEnemy[_0x553167(0x22b)]['updateShadow']=function(){},Sprite_SvEnemy[_0x553167(0x22b)][_0x553167(0x150)]=function(){},Sprite_SvEnemy[_0x553167(0x22b)][_0x553167(0x328)]=function(){const _0x2a5201=_0x553167;this[_0x2a5201(0x36c)][_0x2a5201(0x743)]=![];},Sprite_SvEnemy[_0x553167(0x22b)][_0x553167(0x1fb)]=function(){const _0x4087b8=_0x553167;Sprite_Battler[_0x4087b8(0x22b)][_0x4087b8(0x1fb)][_0x4087b8(0x7f7)](this);const _0xc979b5=this[_0x4087b8(0x3d0)][_0x4087b8(0x2b0)]();this['_battlerName']!==_0xc979b5&&(this[_0x4087b8(0x40f)]=_0xc979b5,this[_0x4087b8(0x1d5)][_0x4087b8(0xa3a)]=ImageManager[_0x4087b8(0x530)](_0xc979b5)),this['_mainSprite']&&this[_0x4087b8(0x1d5)][_0x4087b8(0xa3a)]&&this[_0x4087b8(0x928)]&&(this['_mainSprite'][_0x4087b8(0xa3a)][_0x4087b8(0x14f)]!==this[_0x4087b8(0x928)]['battlerSmoothImage']()&&(this[_0x4087b8(0x1d5)][_0x4087b8(0xa3a)][_0x4087b8(0x14f)]=this[_0x4087b8(0x928)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x553167(0x22b)]['retreat']=function(){},Sprite_SvEnemy[_0x553167(0x22b)][_0x553167(0xbe5)]=function(_0x4220ae,_0x4d77e9,_0xf21337){const _0x36a38a=_0x553167;if(this[_0x36a38a(0x73e)])this['parent'][_0x36a38a(0xbe5)](_0x4220ae,_0x4d77e9,_0xf21337);},Sprite_SvEnemy[_0x553167(0x22b)][_0x553167(0x1e7)]=function(){const _0x346704=_0x553167,_0x1f000c=this[_0x346704(0x3d0)];if(_0x1f000c){const _0x4e3379=_0x1f000c['stateMotionIndex']();if(_0x1f000c['isInputting']()||_0x1f000c[_0x346704(0xbdd)]())this[_0x346704(0x5ce)](_0x346704(0x57d));else{if(_0x4e3379===0x3)this[_0x346704(0x5ce)]('dead');else{if(_0x4e3379===0x2)this['startMotion'](_0x346704(0xa4f));else{if(_0x1f000c['isChanting']())this[_0x346704(0x5ce)](_0x346704(0x940));else{if(_0x1f000c[_0x346704(0x452)]()||_0x1f000c[_0x346704(0xb5e)]())this[_0x346704(0x5ce)](_0x346704(0x6fd));else{if(_0x4e3379===0x1)this[_0x346704(0x5ce)](_0x346704(0x798));else{if(_0x1f000c[_0x346704(0x15f)]())this[_0x346704(0x5ce)](_0x346704(0x81b));else _0x1f000c[_0x346704(0x2e5)]()?this[_0x346704(0x5ce)](_0x346704(0x57d)):this[_0x346704(0x5ce)](_0x1f000c[_0x346704(0x3a3)]()[_0x346704(0x20f)]||_0x346704(0x57d));}}}}}}}},Sprite_SvEnemy['prototype'][_0x553167(0x710)]=function(){const _0x25d3d5=_0x553167;return this[_0x25d3d5(0x73e)]?this['parent'][_0x25d3d5(0x8ac)]===0x0&&this[_0x25d3d5(0x73e)][_0x25d3d5(0x9e4)]===0x0:!![];},Sprite_SvEnemy[_0x553167(0x22b)]['updateFlip']=function(){},VisuMZ[_0x553167(0x841)][_0x553167(0xa79)]=Sprite_Animation[_0x553167(0x22b)][_0x553167(0xa71)],Sprite_Animation[_0x553167(0x22b)][_0x553167(0xa71)]=function(_0x2cbb0e){const _0x426010=_0x553167;return _0x2cbb0e[_0x426010(0x753)]?this[_0x426010(0x8b9)](_0x2cbb0e):VisuMZ[_0x426010(0x841)][_0x426010(0xa79)][_0x426010(0x7f7)](this,_0x2cbb0e);},Sprite_Animation[_0x553167(0x22b)][_0x553167(0x8b9)]=function(_0x101d0a){const _0xb3185d=_0x553167;let _0x3892df=_0x101d0a['x'],_0x449769=_0x101d0a['y'],_0x2864f5=_0x101d0a['height'],_0x563b3a=_0x101d0a['_distortionSprite'][_0xb3185d(0xb03)]['y'];_0x101d0a['x']=_0x101d0a[_0xb3185d(0x649)]+_0x101d0a[_0xb3185d(0x53a)](),_0x101d0a['y']=_0x101d0a[_0xb3185d(0x756)]+_0x101d0a[_0xb3185d(0x3a9)](),_0x101d0a[_0xb3185d(0x908)]*=_0x563b3a;let _0x4bff3f=VisuMZ[_0xb3185d(0x841)][_0xb3185d(0xa79)][_0xb3185d(0x7f7)](this,_0x101d0a);return _0x101d0a['x']=_0x3892df,_0x101d0a['y']=_0x449769,_0x101d0a[_0xb3185d(0x908)]=_0x2864f5,_0x4bff3f;},VisuMZ[_0x553167(0x841)][_0x553167(0xb33)]=Sprite_AnimationMV['prototype']['updatePosition'],Sprite_AnimationMV[_0x553167(0x22b)]['updatePosition']=function(){const _0xbf2b54=_0x553167;VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition'][_0xbf2b54(0x7f7)](this);if(!SceneManager[_0xbf2b54(0x2c2)]())return;if(this[_0xbf2b54(0x21f)][_0xbf2b54(0x5f1)]===0x3)this['x']=Math[_0xbf2b54(0x462)](Graphics[_0xbf2b54(0x5f7)]/0x2),this['y']=Math[_0xbf2b54(0x462)](Graphics[_0xbf2b54(0xbcf)]/0x2);else{if(this[_0xbf2b54(0x8be)])return;}},Sprite_Damage[_0x553167(0x22b)][_0x553167(0xa8f)]=function(_0x273281){const _0x2c0c5a=_0x553167,_0x3a614c=_0x273281[_0x2c0c5a(0x5f0)]()||_0x273281[_0x2c0c5a(0x961)]();if(_0x3a614c['missed']||_0x3a614c[_0x2c0c5a(0x57e)])this['_colorType']=0x0,this[_0x2c0c5a(0x70b)]();else{if(_0x3a614c[_0x2c0c5a(0xff)])this[_0x2c0c5a(0x4d6)]=_0x3a614c[_0x2c0c5a(0x523)]>=0x0?0x0:0x1,this[_0x2c0c5a(0x246)](_0x3a614c[_0x2c0c5a(0x523)]);else _0x273281['isAlive']()&&_0x3a614c[_0x2c0c5a(0x3ae)]!==0x0&&(this[_0x2c0c5a(0x4d6)]=_0x3a614c[_0x2c0c5a(0x3ae)]>=0x0?0x2:0x3,this[_0x2c0c5a(0x246)](_0x3a614c[_0x2c0c5a(0x3ae)]));}_0x3a614c[_0x2c0c5a(0x3b3)]&&this[_0x2c0c5a(0x489)]();},Sprite_Damage[_0x553167(0x22b)]['setup']=function(_0x388f0b){},Sprite_Damage[_0x553167(0x22b)][_0x553167(0x246)]=function(_0x4b0ef4){const _0x118c28=_0x553167;let _0x2a922a=this[_0x118c28(0x481)](_0x4b0ef4);const _0x9d49f1=this['fontSize'](),_0x2348d5=Math[_0x118c28(0x66d)](_0x9d49f1*0.75);for(let _0xf9248d=0x0;_0xf9248d<_0x2a922a[_0x118c28(0x635)];_0xf9248d++){const _0x5b1920=this[_0x118c28(0x640)](_0x2348d5,_0x9d49f1);_0x5b1920[_0x118c28(0xa3a)][_0x118c28(0x4b5)](_0x2a922a[_0xf9248d],0x0,0x0,_0x2348d5,_0x9d49f1,_0x118c28(0xa2f)),_0x5b1920['x']=(_0xf9248d-(_0x2a922a[_0x118c28(0x635)]-0x1)/0x2)*_0x2348d5,_0x5b1920['dy']=-_0xf9248d;}},Sprite_Damage[_0x553167(0x22b)][_0x553167(0x481)]=function(_0xd755fe){const _0x41849c=_0x553167;let _0x51513d=Math[_0x41849c(0x1a5)](_0xd755fe)[_0x41849c(0x169)]();this[_0x41849c(0x888)]()&&(_0x51513d=VisuMZ['GroupDigits'](_0x51513d));const _0x17277e=VisuMZ[_0x41849c(0x841)][_0x41849c(0x309)]['Damage'];let _0x41c7c5='',_0x5ad786='';switch(this['_colorType']){case 0x0:_0x41c7c5=_0x17277e[_0x41849c(0x6f3)]||'-%1',_0x5ad786=TextManager['hp'];if(_0xd755fe===0x0)_0x41c7c5='%1';break;case 0x1:_0x41c7c5=_0x17277e[_0x41849c(0x86f)]||_0x41849c(0x7d2),_0x5ad786=TextManager['hp'];break;case 0x2:_0x41c7c5=_0x17277e['mpDamageFmt']||'-%1\x20MP',_0x5ad786=TextManager['mp'];break;case 0x3:_0x41c7c5=_0x17277e[_0x41849c(0xb78)]||_0x41849c(0x50e),_0x5ad786=TextManager['mp'];break;}return _0x41c7c5[_0x41849c(0x47d)](_0x51513d,_0x5ad786)[_0x41849c(0x976)]();},Sprite_Damage[_0x553167(0x22b)][_0x553167(0x888)]=function(){const _0x3ee931=_0x553167;return Imported[_0x3ee931(0x28b)]?VisuMZ[_0x3ee931(0x826)][_0x3ee931(0x309)][_0x3ee931(0x22a)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x553167(0x22b)]['setupCriticalEffect']=function(){const _0x350030=_0x553167,_0x3c940a=VisuMZ[_0x350030(0x841)]['Settings']['Damage'];_0x3c940a[_0x350030(0x23c)]=_0x3c940a['CriticalColor']||[0x0,0x0,0x0,0x0],this[_0x350030(0x61d)]=_0x3c940a[_0x350030(0x23c)]['slice'](0x0),this[_0x350030(0x26c)]=_0x3c940a[_0x350030(0x3d9)]||0x1;},Sprite_Damage[_0x553167(0x22b)]['setupTextPopup']=function(_0x2dda1c,_0x49afc0){const _0x4ebf38=_0x553167;this[_0x4ebf38(0x61d)]=_0x49afc0[_0x4ebf38(0x4e1)]||[0x0,0x0,0x0,0x0],this[_0x4ebf38(0x61d)]=JsonEx[_0x4ebf38(0x323)](this[_0x4ebf38(0x61d)]),this[_0x4ebf38(0x26c)]=_0x49afc0[_0x4ebf38(0xb15)]||0x0;const _0x2cf8a4=this[_0x4ebf38(0x326)](),_0x257a88=Math[_0x4ebf38(0x66d)](_0x2cf8a4*0x1e),_0x2075c1=this[_0x4ebf38(0x640)](_0x257a88,_0x2cf8a4);_0x2075c1[_0x4ebf38(0xa3a)][_0x4ebf38(0x3be)]=ColorManager[_0x4ebf38(0x30b)](_0x49afc0[_0x4ebf38(0x3be)]),_0x2075c1[_0x4ebf38(0xa3a)][_0x4ebf38(0x4b5)](_0x2dda1c,0x0,0x0,_0x257a88,_0x2cf8a4,_0x4ebf38(0xa2f)),_0x2075c1['dy']=0x0;},Sprite_Damage[_0x553167(0x22b)][_0x553167(0x5bb)]=function(_0x3dbc6f,_0x5aa849,_0x2d9202){const _0x23fbb4=_0x553167,_0x25717a=Math['max'](this[_0x23fbb4(0x326)](),ImageManager[_0x23fbb4(0x837)]),_0x52d4bf=Math[_0x23fbb4(0x66d)](_0x25717a*0x1e),_0x1a0b8b=this[_0x23fbb4(0x640)](_0x52d4bf,_0x25717a),_0x4e86c0=ImageManager[_0x23fbb4(0x5e3)]/0x2,_0x4241cd=_0x1a0b8b[_0x23fbb4(0xa3a)]['measureTextWidth'](_0x5aa849+'\x20');_0x1a0b8b[_0x23fbb4(0xa3a)][_0x23fbb4(0x3be)]=ColorManager[_0x23fbb4(0x30b)](_0x2d9202[_0x23fbb4(0x3be)]),_0x1a0b8b[_0x23fbb4(0xa3a)][_0x23fbb4(0x4b5)](_0x5aa849,_0x4e86c0,0x0,_0x52d4bf-_0x4e86c0,_0x25717a,'center');const _0x2dbb72=Math['round']((_0x25717a-ImageManager[_0x23fbb4(0x837)])/0x2),_0x4adced=_0x52d4bf/0x2-ImageManager[_0x23fbb4(0x5e3)]-_0x4241cd/0x2+_0x4e86c0/0x2,_0x439d96=ImageManager[_0x23fbb4(0x373)](_0x23fbb4(0x1d1)),_0x25020c=ImageManager['iconWidth'],_0x47b3d4=ImageManager[_0x23fbb4(0x837)],_0x54fc29=_0x3dbc6f%0x10*_0x25020c,_0x5c40fd=Math[_0x23fbb4(0x66d)](_0x3dbc6f/0x10)*_0x47b3d4;_0x1a0b8b[_0x23fbb4(0xa3a)]['blt'](_0x439d96,_0x54fc29,_0x5c40fd,_0x25020c,_0x47b3d4,_0x4adced,_0x2dbb72),this[_0x23fbb4(0x61d)]=_0x2d9202[_0x23fbb4(0x4e1)]||[0x0,0x0,0x0,0x0],this[_0x23fbb4(0x61d)]=JsonEx['makeDeepCopy'](this[_0x23fbb4(0x61d)]),this['_flashDuration']=_0x2d9202[_0x23fbb4(0xb15)]||0x0,_0x1a0b8b['dy']=0x0,_0x2d9202[_0x23fbb4(0x56b)]&&(_0x1a0b8b['x']+=_0x2d9202[_0x23fbb4(0x56b)]),_0x2d9202[_0x23fbb4(0xa95)]&&(_0x1a0b8b['dy']+=_0x2d9202['offsetY']);},VisuMZ[_0x553167(0x841)][_0x553167(0x51c)]=Sprite_Damage[_0x553167(0x22b)][_0x553167(0x640)],Sprite_Damage[_0x553167(0x22b)][_0x553167(0x640)]=function(_0x6c5d8a,_0x51b0b6){const _0x1c5f84=_0x553167;return _0x51b0b6=Math['round'](_0x51b0b6*1.2),VisuMZ[_0x1c5f84(0x841)][_0x1c5f84(0x51c)][_0x1c5f84(0x7f7)](this,_0x6c5d8a,_0x51b0b6);},VisuMZ[_0x553167(0x841)][_0x553167(0x89b)]=Sprite_StateIcon[_0x553167(0x22b)][_0x553167(0x9b9)],Sprite_StateIcon[_0x553167(0x22b)]['updateFrame']=function(){const _0x41c1cf=_0x553167;VisuMZ[_0x41c1cf(0x841)][_0x41c1cf(0x89b)]['call'](this),this[_0x41c1cf(0x25b)]=this[_0x41c1cf(0x19b)]>0x0?0xff:0x0;},VisuMZ[_0x553167(0x841)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x553167(0x22b)][_0x553167(0x29e)],Sprite_Weapon[_0x553167(0x22b)]['loadBitmap']=function(){const _0x4869fe=_0x553167;VisuMZ[_0x4869fe(0x841)][_0x4869fe(0x238)][_0x4869fe(0x7f7)](this),this[_0x4869fe(0xa3a)]&&(this['bitmap'][_0x4869fe(0x14f)]=VisuMZ[_0x4869fe(0x841)][_0x4869fe(0x309)][_0x4869fe(0x5d0)]['SmoothImage']);},VisuMZ['BattleCore'][_0x553167(0xaed)]=Sprite_Gauge[_0x553167(0x22b)][_0x553167(0x80d)],Sprite_Gauge['prototype'][_0x553167(0x80d)]=function(){const _0x242915=_0x553167;return this['_statusType']!==_0x242915(0x7b2)?VisuMZ[_0x242915(0x841)]['Settings'][_0x242915(0x24c)][_0x242915(0xbcc)]??0x14:VisuMZ['BattleCore'][_0x242915(0xaed)][_0x242915(0x7f7)](this);};function Sprite_GaugeRate(){const _0x29ff13=_0x553167;this[_0x29ff13(0x7a1)](...arguments);}Sprite_GaugeRate[_0x553167(0x22b)]=Object[_0x553167(0x595)](Sprite_Gauge[_0x553167(0x22b)]),Sprite_GaugeRate[_0x553167(0x22b)][_0x553167(0x589)]=Sprite_GaugeRate,Sprite_GaugeRate['prototype'][_0x553167(0x7a1)]=function(){const _0x23be21=_0x553167;Sprite_Gauge[_0x23be21(0x22b)][_0x23be21(0x7a1)]['call'](this),this[_0x23be21(0x839)]=![];},Sprite_GaugeRate[_0x553167(0x22b)][_0x553167(0x190)]=function(_0x3418c0,_0x40ec0f){const _0x23e9d5=_0x553167;this['_updateTargetValue']=!![],Sprite_Gauge['prototype'][_0x23e9d5(0x190)]['call'](this,_0x3418c0,_0x40ec0f),this[_0x23e9d5(0x839)]=![];},Sprite_GaugeRate[_0x553167(0x22b)][_0x553167(0xb6f)]=function(){const _0x3ae29a=_0x553167;if(this[_0x3ae29a(0x839)]){const _0x300844=Sprite_Gauge[_0x3ae29a(0x22b)][_0x3ae29a(0xb6f)]['call'](this),_0x26aac0=this['currentMaxValue']();if(_0x26aac0<=0x0)return _0x3ae29a(0x824);return Math[_0x3ae29a(0x66d)](_0x300844/_0x26aac0*0x64)+'%';}else return Sprite_Gauge[_0x3ae29a(0x22b)]['currentValue'][_0x3ae29a(0x7f7)](this);},Sprite_GaugeRate[_0x553167(0x22b)]['currentDisplayedValue']=function(){const _0x2a8d17=_0x553167,_0x23469c=Sprite_Gauge[_0x2a8d17(0x22b)]['currentValue'][_0x2a8d17(0x7f7)](this),_0x5c7432=this[_0x2a8d17(0x1a0)]();if(_0x5c7432<=0x0)return'100%';return Math[_0x2a8d17(0x66d)](_0x23469c/_0x5c7432*0x64)+'%';},Sprite_GaugeRate[_0x553167(0x22b)]['gaugeRate']=function(){const _0x311da2=_0x553167;if(this[_0x311da2(0x1a0)]()<=0x0)return 0x1;return Sprite_Gauge[_0x311da2(0x22b)][_0x311da2(0x44c)][_0x311da2(0x7f7)](this);},Sprite_GaugeRate['prototype'][_0x553167(0xb6d)]=function(){const _0x1d2387=_0x553167;if(this['currentMaxValue']()<=0x0)return ColorManager['normalColor']();return Sprite_Gauge[_0x1d2387(0x22b)][_0x1d2387(0xb6d)]['call'](this);},Sprite_GaugeRate['prototype'][_0x553167(0x7ed)]=function(){const _0x24757d=_0x553167;this[_0x24757d(0x9eb)]==='mp'&&this[_0x24757d(0x1a0)]()<=0x0&&($gameTemp['redrawForGaugeRate']=!![]),Sprite_Gauge['prototype'][_0x24757d(0x7ed)][_0x24757d(0x7f7)](this),$gameTemp[_0x24757d(0xfa)]=undefined;},VisuMZ[_0x553167(0x841)]['ColorManager_mpColor']=ColorManager['mpColor'],ColorManager[_0x553167(0x165)]=function(_0x3c7b12){const _0x90042c=_0x553167;if($gameTemp[_0x90042c(0xfa)])return ColorManager[_0x90042c(0x5da)]();return VisuMZ[_0x90042c(0x841)][_0x90042c(0xaf1)][_0x90042c(0x7f7)](this,_0x3c7b12);};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0x553167(0x22b)]=Object[_0x553167(0x595)](Sprite_Gauge[_0x553167(0x22b)]),Sprite_HpGauge['prototype'][_0x553167(0x589)]=Sprite_HpGauge,Sprite_HpGauge[_0x553167(0x22b)]['initialize']=function(){const _0x5cb9a2=_0x553167;Sprite_Gauge['prototype'][_0x5cb9a2(0x7a1)][_0x5cb9a2(0x7f7)](this);},Sprite_HpGauge[_0x553167(0x22b)][_0x553167(0x8a5)]=function(){return 0x0;},Sprite_HpGauge[_0x553167(0x22b)][_0x553167(0x7ed)]=function(){const _0x4d8bac=_0x553167;this['bitmap']['clear']();const _0x4a3770=this[_0x4d8bac(0xb6f)]();!isNaN(_0x4a3770)&&this[_0x4d8bac(0x19f)]();};function Sprite_EnemyName(){const _0x51c030=_0x553167;this[_0x51c030(0x7a1)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x553167(0x595)](Sprite_Name[_0x553167(0x22b)]),Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x589)]=Sprite_EnemyName,Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x7a1)]=function(){const _0x25dfe4=_0x553167;Sprite_Name[_0x25dfe4(0x22b)][_0x25dfe4(0x7a1)][_0x25dfe4(0x7f7)](this),this[_0x25dfe4(0x29a)]();},Sprite_EnemyName['prototype']['initMembers']=function(){const _0xe5a019=_0x553167;Sprite_Name[_0xe5a019(0x22b)][_0xe5a019(0x23a)][_0xe5a019(0x7f7)](this),this[_0xe5a019(0x25b)]=0x0,this['_linkedSprite']=null,this[_0xe5a019(0x9f3)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x553167(0x22b)]['createAttachedSprites']=function(){const _0x49eb9f=_0x553167;VisuMZ['BattleCore'][_0x49eb9f(0x309)][_0x49eb9f(0x194)][_0x49eb9f(0x3d8)]&&(this[_0x49eb9f(0x1bb)]=new Sprite_StateIcon(),this[_0x49eb9f(0xbd9)](this['_stateIconSprite']));},Sprite_EnemyName[_0x553167(0x22b)]['bitmapWidth']=function(){const _0x4e7ddc=_0x553167;return Graphics[_0x4e7ddc(0x5f7)];},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0xb06)]=function(){const _0x28d89f=_0x553167;return this[_0x28d89f(0x66e)]=this[_0x28d89f(0x66e)]||Window_Base[_0x28d89f(0x22b)][_0x28d89f(0x97b)]()||0x24,this[_0x28d89f(0x66e)]*0x4;},Sprite_EnemyName[_0x553167(0x22b)]['fontSize']=function(){const _0x44eeee=_0x553167;return VisuMZ[_0x44eeee(0x841)][_0x44eeee(0x309)]['Enemy']['NameFontSize']||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x553167(0x22b)]['linkSprite']=function(_0x86e942){const _0x1a2ed9=_0x553167;this[_0x1a2ed9(0x87c)]=_0x86e942;},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0xbcd)]=function(){const _0x460bfd=_0x553167;Sprite_Name[_0x460bfd(0x22b)][_0x460bfd(0xbcd)][_0x460bfd(0x7f7)](this),this[_0x460bfd(0x944)](),this[_0x460bfd(0x1c8)](),this[_0x460bfd(0x1a8)](),this['updateOpacity']();},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x7ed)]=function(){const _0x3b471d=_0x553167;this[_0x3b471d(0x6c3)]=undefined;const _0x4cdf79=this[_0x3b471d(0xc04)](),_0x21a70e=this['bitmapWidth'](),_0x26ee43=Window_Base[_0x3b471d(0x22b)][_0x3b471d(0x97b)]();this[_0x3b471d(0x48f)](),this[_0x3b471d(0xa3a)][_0x3b471d(0xa25)](),this[_0x3b471d(0xa3a)][_0x3b471d(0x4b5)](_0x4cdf79,0x0,0x0,_0x21a70e,_0x26ee43,_0x3b471d(0xa2f));},Sprite_EnemyName['prototype'][_0x553167(0x944)]=function(){const _0x43bf0c=_0x553167;if(!this[_0x43bf0c(0x87c)])return;this[_0x43bf0c(0x928)]!==this[_0x43bf0c(0x87c)][_0x43bf0c(0x928)]&&this[_0x43bf0c(0x303)](this[_0x43bf0c(0x87c)][_0x43bf0c(0x928)]);},Sprite_EnemyName[_0x553167(0x22b)]['updatePosition']=function(){const _0x120adf=_0x553167;if(!this[_0x120adf(0x87c)])return;this[_0x120adf(0x66e)]=this[_0x120adf(0x66e)]||Window_Base[_0x120adf(0x22b)][_0x120adf(0x97b)](),this['x']=Math[_0x120adf(0x462)](this[_0x120adf(0x87c)][_0x120adf(0x649)]),this['y']=Math[_0x120adf(0x462)](this[_0x120adf(0x87c)][_0x120adf(0x756)]-this[_0x120adf(0x66e)]*0.5);const _0xe9f99c=VisuMZ[_0x120adf(0x841)]['Settings'][_0x120adf(0x194)];this['x']+=Math[_0x120adf(0x462)](_0xe9f99c['NameOffsetX']||0x0),this['y']+=Math[_0x120adf(0x462)](_0xe9f99c[_0x120adf(0x305)]||0x0);},Sprite_EnemyName[_0x553167(0x22b)]['updateAttachedSprites']=function(){const _0x4a7287=_0x553167;this[_0x4a7287(0x99a)]();},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x99a)]=function(){const _0x4e9490=_0x553167;if(!this[_0x4e9490(0x1bb)])return;this[_0x4e9490(0x928)]!==this[_0x4e9490(0x1bb)][_0x4e9490(0x928)]&&this['_stateIconSprite'][_0x4e9490(0x303)](this[_0x4e9490(0x928)]);const _0x416acd=this[_0x4e9490(0x480)]();this[_0x4e9490(0x66e)]=this[_0x4e9490(0x66e)]||Window_Base[_0x4e9490(0x22b)][_0x4e9490(0x97b)](),this['_stateIconSprite']['x']=Math['round']((_0x416acd+ImageManager['iconWidth'])/0x2)+0x8,this[_0x4e9490(0x1bb)]['y']=this[_0x4e9490(0x66e)]/0x2;const _0x32e433=VisuMZ[_0x4e9490(0x841)]['Settings'][_0x4e9490(0x194)];this[_0x4e9490(0x1bb)]['x']+=_0x32e433[_0x4e9490(0x16f)]||0x0,this['_stateIconSprite']['y']+=_0x32e433[_0x4e9490(0x64e)]||0x0;},Sprite_EnemyName[_0x553167(0x22b)]['updateOpacity']=function(){const _0xbc642a=_0x553167,_0x3fac09=this[_0xbc642a(0xb7f)]();if(_0x3fac09&&this[_0xbc642a(0x25b)]<0xff)this['opacity']+=0x10;else!_0x3fac09&&this[_0xbc642a(0x25b)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0xb7f)]=function(){const _0x494fc7=_0x553167;if(this[_0x494fc7(0x533)]())return![];else{if(!this[_0x494fc7(0x928)])return![];else{if(!this[_0x494fc7(0x928)][_0x494fc7(0x254)]())return![];else{if(this['temporaryVisibile']())return!![];else{if(this[_0x494fc7(0x928)][_0x494fc7(0x82f)]())return![];else{if(this['isBattlerTargeted']())return!![];else{if(this[_0x494fc7(0x9a2)]())return!![];else{if(this[_0x494fc7(0x44d)]())return!![];else{if(this[_0x494fc7(0x1cc)]())return!![];else{if(this[_0x494fc7(0x25b)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x524)]=function(){const _0x19d9d3=_0x553167;return this[_0x19d9d3(0x928)]&&this[_0x19d9d3(0x928)][_0x19d9d3(0x207)]();},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x533)]=function(){const _0x531339=_0x553167;return VisuMZ['BattleCore'][_0x531339(0x309)][_0x531339(0x194)][_0x531339(0x432)];},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x629)]=function(){const _0x3ad673=_0x553167;return this[_0x3ad673(0x928)]&&BattleManager[_0x3ad673(0x1ef)]&&BattleManager[_0x3ad673(0x9ca)]['includes'](this[_0x3ad673(0x928)]);},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x9a2)]=function(){return![];},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x44d)]=function(){const _0x42a80b=_0x553167;return VisuMZ['BattleCore'][_0x42a80b(0x309)][_0x42a80b(0x194)][_0x42a80b(0xaef)];},Sprite_EnemyName[_0x553167(0x22b)][_0x553167(0x1cc)]=function(){const _0xa879ab=_0x553167;return VisuMZ[_0xa879ab(0x841)][_0xa879ab(0x309)][_0xa879ab(0x194)][_0xa879ab(0x2c3)]?this[_0xa879ab(0x928)][_0xa879ab(0xb1c)]():SceneManager[_0xa879ab(0xa7f)]['_enemyWindow']&&SceneManager[_0xa879ab(0xa7f)]['_enemyWindow'][_0xa879ab(0x9c3)]&&SceneManager[_0xa879ab(0xa7f)]['_enemyWindow'][_0xa879ab(0x18e)][_0xa879ab(0xb5d)](this['_battler']);},Sprite_EnemyName['prototype']['textWidth']=function(){const _0x76ccde=_0x553167;if(!this['_battler'])return 0x0;if(this[_0x76ccde(0x6c3)])return this[_0x76ccde(0x6c3)];const _0x532705=this[_0x76ccde(0xc04)]();return this['setupFont'](),this[_0x76ccde(0x6c3)]=this[_0x76ccde(0xa3a)][_0x76ccde(0xa90)](_0x532705)||0x1,this[_0x76ccde(0x6c3)];},VisuMZ[_0x553167(0x841)][_0x553167(0x683)]=Sprite_Battleback['prototype'][_0x553167(0x192)],Sprite_Battleback[_0x553167(0x22b)][_0x553167(0x192)]=function(){const _0x9d58b3=_0x553167,_0xb8bd8f=VisuMZ[_0x9d58b3(0x841)]['Settings'][_0x9d58b3(0x2ce)];if(!_0xb8bd8f)return VisuMZ['BattleCore'][_0x9d58b3(0x683)][_0x9d58b3(0x7f7)](this);const _0x213ab9=String(_0xb8bd8f[_0x9d58b3(0x5c0)])||'MZ';switch(_0x213ab9){case'MZ':VisuMZ[_0x9d58b3(0x841)]['Sprite_Battleback_adjustPosition'][_0x9d58b3(0x7f7)](this);break;case _0x9d58b3(0x116):this[_0x9d58b3(0xa5d)]();break;case _0x9d58b3(0xacb):this[_0x9d58b3(0x397)]();break;case'ScaleDown':this[_0x9d58b3(0x4c8)]();break;case'ScaleUp':this[_0x9d58b3(0x321)]();break;}},Sprite_Battleback['prototype'][_0x553167(0xa5d)]=function(){const _0x16c0cf=_0x553167,_0x36cd17=VisuMZ['BattleCore'][_0x16c0cf(0x309)][_0x16c0cf(0x2ce)];if(_0x36cd17&&_0x36cd17['jsOneForOne'])return _0x36cd17['jsOneForOne'][_0x16c0cf(0x7f7)](this);this['width']=Graphics['width'],this['height']=Graphics[_0x16c0cf(0x908)];const _0x24f2c1=0x1;this['scale']['x']=_0x24f2c1,this[_0x16c0cf(0xb03)]['y']=_0x24f2c1,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x553167(0x22b)]['adjustPosition_ScaleToFit']=function(){const _0x14f325=_0x553167,_0x5e986b=VisuMZ['BattleCore']['Settings']['BattlebackScale'];if(_0x5e986b&&_0x5e986b[_0x14f325(0x126)])return _0x5e986b['jsScaleToFit'][_0x14f325(0x7f7)](this);this[_0x14f325(0x9ce)]=Graphics[_0x14f325(0x9ce)],this[_0x14f325(0x908)]=Graphics[_0x14f325(0x908)];const _0x686126=this[_0x14f325(0x9ce)]/this[_0x14f325(0xa3a)][_0x14f325(0x9ce)],_0x43a604=this[_0x14f325(0x908)]/this[_0x14f325(0xa3a)][_0x14f325(0x908)],_0x45b532=Math[_0x14f325(0x4c1)](_0x686126,_0x43a604);this[_0x14f325(0xb03)]['x']=_0x45b532,this[_0x14f325(0xb03)]['y']=_0x45b532,this['x']=(Graphics[_0x14f325(0x9ce)]-this['width'])/0x2,this['y']=Graphics[_0x14f325(0x908)]-this['height'];},Sprite_Battleback['prototype'][_0x553167(0x4c8)]=function(){const _0x2eb438=_0x553167,_0x3395bb=VisuMZ[_0x2eb438(0x841)][_0x2eb438(0x309)][_0x2eb438(0x2ce)];if(_0x3395bb&&_0x3395bb['jsScaleDown'])return _0x3395bb[_0x2eb438(0x90b)][_0x2eb438(0x7f7)](this);this[_0x2eb438(0x9ce)]=Graphics[_0x2eb438(0x9ce)],this['height']=Graphics[_0x2eb438(0x908)];const _0x2cd8ee=Math[_0x2eb438(0x6b0)](0x1,this['width']/this[_0x2eb438(0xa3a)][_0x2eb438(0x9ce)]),_0x8f5c9=Math[_0x2eb438(0x6b0)](0x1,this[_0x2eb438(0x908)]/this[_0x2eb438(0xa3a)][_0x2eb438(0x908)]),_0xd99e50=Math[_0x2eb438(0x4c1)](_0x2cd8ee,_0x8f5c9);this[_0x2eb438(0xb03)]['x']=_0xd99e50,this[_0x2eb438(0xb03)]['y']=_0xd99e50,this['x']=(Graphics['width']-this[_0x2eb438(0x9ce)])/0x2,this['y']=Graphics[_0x2eb438(0x908)]-this[_0x2eb438(0x908)];},Sprite_Battleback[_0x553167(0x22b)][_0x553167(0x321)]=function(){const _0x4133c8=_0x553167,_0x1a63c5=VisuMZ['BattleCore'][_0x4133c8(0x309)][_0x4133c8(0x2ce)];if(_0x1a63c5&&_0x1a63c5[_0x4133c8(0x825)])return _0x1a63c5[_0x4133c8(0x825)][_0x4133c8(0x7f7)](this);this['width']=Graphics[_0x4133c8(0x9ce)],this['height']=Graphics[_0x4133c8(0x908)];const _0x2deec0=Math[_0x4133c8(0x4c1)](0x1,this[_0x4133c8(0x9ce)]/this['bitmap'][_0x4133c8(0x9ce)]),_0x2ca734=Math[_0x4133c8(0x4c1)](0x1,this[_0x4133c8(0x908)]/this['bitmap'][_0x4133c8(0x908)]),_0x3b7aad=Math[_0x4133c8(0x4c1)](_0x2deec0,_0x2ca734);this[_0x4133c8(0xb03)]['x']=_0x3b7aad,this[_0x4133c8(0xb03)]['y']=_0x3b7aad,this['x']=(Graphics[_0x4133c8(0x9ce)]-this[_0x4133c8(0x9ce)])/0x2,this['y']=Graphics[_0x4133c8(0x908)]-this['height'];},Spriteset_Battle[_0x553167(0x245)]=VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x4a7)][_0x553167(0x38d)]??!![],Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x497)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x893)]=function(){return 0x0;},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x913)]=function(){return 0x0;},VisuMZ[_0x553167(0x841)][_0x553167(0x5a0)]=Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x83f)],Spriteset_Battle[_0x553167(0x22b)]['createLowerLayer']=function(){const _0x49b298=_0x553167;VisuMZ[_0x49b298(0x841)]['Spriteset_Battle_createLowerLayer']['call'](this),this[_0x49b298(0x3fe)](),this[_0x49b298(0x592)]();},VisuMZ['BattleCore'][_0x553167(0x1e9)]=Spriteset_Battle[_0x553167(0x22b)]['update'],Spriteset_Battle[_0x553167(0x22b)]['update']=function(){const _0xba3ac6=_0x553167;VisuMZ['BattleCore'][_0xba3ac6(0x1e9)][_0xba3ac6(0x7f7)](this),this[_0xba3ac6(0x3e7)](),this[_0xba3ac6(0x5a3)](),this['updateWeather'](),this[_0xba3ac6(0x2c4)]();},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x3fe)]=function(){const _0x16c108=_0x553167;this[_0x16c108(0x5a2)]=new Weather(),this[_0x16c108(0x7f3)][_0x16c108(0xbd9)](this[_0x16c108(0x5a2)]);},Spriteset_Battle['prototype'][_0x553167(0xa9c)]=function(){const _0x5dbd0f=_0x553167;this[_0x5dbd0f(0x5a2)]['type']=$gameScreen[_0x5dbd0f(0xa97)](),this['_weather'][_0x5dbd0f(0x3e0)]=$gameScreen['weatherPower']();},Game_Interpreter[_0x553167(0x22b)][_0x553167(0x518)]=function(_0xe8f6fc){const _0x1d65c6=_0x553167;$gameScreen[_0x1d65c6(0xb46)](_0xe8f6fc[0x0],_0xe8f6fc[0x1],_0xe8f6fc[0x2]);if(_0xe8f6fc[0x3])this[_0x1d65c6(0xb72)](_0xe8f6fc[0x2]);return!![];},VisuMZ[_0x553167(0x841)][_0x553167(0xa96)]=Game_Interpreter[_0x553167(0x22b)][_0x553167(0x5fe)],Game_Interpreter[_0x553167(0x22b)]['command283']=function(_0x27c843){const _0x3d07a1=_0x553167;return SceneManager[_0x3d07a1(0x2c2)]()?(SceneManager['_scene']['_spriteset'][_0x3d07a1(0x581)](_0x27c843[0x0],_0x27c843[0x1]),!![]):VisuMZ[_0x3d07a1(0x841)][_0x3d07a1(0xa96)]['call'](this,_0x27c843);},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x959)]=function(_0x1dee66,_0x2b509f){const _0x4444ca=_0x553167;_0x1dee66[_0x4444ca(0xa3a)]=_0x2b509f;},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x581)]=function(_0x356dc0,_0x454223){const _0x5c4a23=_0x553167;_0x356dc0=_0x356dc0||'',_0x454223=_0x454223||'';_0x356dc0===''&&_0x454223===''&&(_0x356dc0=this['_back1Sprite'][_0x5c4a23(0xb64)](),_0x454223=this[_0x5c4a23(0x496)][_0x5c4a23(0x3f5)]());const _0x507904=ImageManager[_0x5c4a23(0x332)](_0x356dc0),_0x4faade=ImageManager[_0x5c4a23(0x109)](_0x454223);_0x507904[_0x5c4a23(0x411)](this[_0x5c4a23(0x665)][_0x5c4a23(0x161)](this,this['_back1Sprite'],this['_back2Sprite'],_0x507904,_0x4faade));},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x665)]=function(_0x3e82d6,_0x189fc6,_0x281b89,_0xf527c2){const _0x3271a8=_0x553167;_0xf527c2['addLoadListener'](this[_0x3271a8(0x90e)][_0x3271a8(0x161)](this,_0x3e82d6,_0x189fc6,_0x281b89,_0xf527c2));},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x90e)]=function(_0xad2c12,_0x4964c6,_0x3c5e68,_0x55dbdf){const _0x195096=_0x553167;_0xad2c12[_0x195096(0xa3a)]=_0x3c5e68,_0x4964c6[_0x195096(0xa3a)]=_0x55dbdf,_0xad2c12[_0x195096(0x192)](),_0x4964c6[_0x195096(0x192)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x691)]=Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x529)],Spriteset_Battle[_0x553167(0x22b)]['createBattleField']=function(){const _0x26e82e=_0x553167;VisuMZ[_0x26e82e(0x841)][_0x26e82e(0x691)]['call'](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x553167(0x22b)]['createBattleFieldBattleCore']=function(){const _0x368da2=_0x553167;this[_0x368da2(0x6d8)](),this[_0x368da2(0xf1)](),this[_0x368da2(0x77d)](),this[_0x368da2(0x7f8)](),this['adjustFlippedBattlefield']();},Spriteset_Battle['prototype'][_0x553167(0x6d8)]=function(){const _0x2685d2=_0x553167;this['_battlerContainer']=new Sprite(),this[_0x2685d2(0x7f3)]['addChild'](this['_battlerContainer']);},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x77d)]=function(){const _0x270ff1=_0x553167;this['_animationContainer']=new Sprite(),Spriteset_Battle[_0x270ff1(0x245)]?this['addChild'](this[_0x270ff1(0x111)]):this[_0x270ff1(0x7f3)][_0x270ff1(0xbd9)](this['_animationContainer']);},Spriteset_Battle[_0x553167(0x22b)]['createDamageContainer']=function(){const _0x113929=_0x553167;this[_0x113929(0x2c5)]=new Sprite(),this[_0x113929(0x2c5)]['x']=this[_0x113929(0x7f3)]['x'],this[_0x113929(0x2c5)]['y']=this[_0x113929(0x7f3)]['y'],this[_0x113929(0xbd9)](this[_0x113929(0x2c5)]);},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x970)]=function(){const _0x2e2b57=_0x553167;if(!this['isFlipped']())return;this[_0x2e2b57(0xa62)][_0x2e2b57(0xb03)]['x']=-0x1,this[_0x2e2b57(0xa62)]['x']=this[_0x2e2b57(0x7f3)][_0x2e2b57(0x9ce)],this[_0x2e2b57(0x676)][_0x2e2b57(0xb03)]['x']=-0x1,this['_uiContainer']['x']=this[_0x2e2b57(0x7f3)][_0x2e2b57(0x9ce)],this[_0x2e2b57(0x111)][_0x2e2b57(0xb03)]['x']=-0x1,this[_0x2e2b57(0x111)]['x']=this[_0x2e2b57(0x7f3)][_0x2e2b57(0x9ce)],this['_damageContainer'][_0x2e2b57(0xb03)]['x']=-0x1,this[_0x2e2b57(0x2c5)]['x']=this[_0x2e2b57(0x7f3)]['x']+this[_0x2e2b57(0x7f3)][_0x2e2b57(0x9ce)];},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x7db)]=function(){const _0xe6ebd=_0x553167;Imported[_0xe6ebd(0x28b)]&&this[_0xe6ebd(0x13a)]()&&this[_0xe6ebd(0x534)]();const _0x198515=$gameTroop['members'](),_0x50c520=[];for(const _0x480264 of _0x198515){_0x50c520[_0xe6ebd(0x9d2)](new Sprite_Enemy(_0x480264));}_0x50c520[_0xe6ebd(0x797)](this[_0xe6ebd(0x7f4)][_0xe6ebd(0x161)](this));for(const _0x2b1fd5 of _0x50c520){this[_0xe6ebd(0xa62)]['addChild'](_0x2b1fd5);}this[_0xe6ebd(0xaa0)]=_0x50c520;},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x65f)]=function(){const _0x390493=_0x553167;this[_0x390493(0x6b1)]=[];for(let _0x146c73=0x0;_0x146c73<$gameParty['maxBattleMembers']();_0x146c73++){const _0xe019d0=$gameParty['battleMembers']()[_0x146c73],_0x169b48=new Sprite_Actor();_0x169b48[_0x390493(0x85d)](_0xe019d0),_0x169b48['setBattler'](_0xe019d0),_0x169b48[_0x390493(0xbcd)](),this[_0x390493(0x6b1)][_0x390493(0x9d2)](_0x169b48),this['_battlerContainer'][_0x390493(0xbd9)](_0x169b48);}},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x6ca)]=function(_0x10e7e1,_0x4ff6da,_0x16b16b,_0x530492){const _0x36864d=_0x553167,_0x9af842=this[_0x36864d(0x4f2)](_0x4ff6da),_0x4867c1=new(_0x9af842?Sprite_AnimationMV:Sprite_Animation)(),_0x3fd61b=this[_0x36864d(0x162)](_0x10e7e1);this[_0x36864d(0x30f)](_0x10e7e1[0x0])&&(_0x16b16b=!_0x16b16b),_0x4867c1[_0x36864d(0x3b1)]=_0x10e7e1,_0x4867c1[_0x36864d(0x303)](_0x3fd61b,_0x4ff6da,_0x16b16b,_0x530492),this[_0x36864d(0x4dd)](_0x4867c1);},Spriteset_Battle[_0x553167(0x22b)]['addAnimationSpriteToContainer']=function(_0x13887a){const _0x5a9efa=_0x553167;this[_0x5a9efa(0x372)](_0x13887a)?(this[_0x5a9efa(0xaa2)]()[_0x5a9efa(0xbd9)](_0x13887a),_0x13887a[_0x5a9efa(0x8be)]=!![]):(this[_0x5a9efa(0x111)][_0x5a9efa(0xbd9)](_0x13887a),Spriteset_Battle[_0x5a9efa(0x245)]&&(this[_0x5a9efa(0x111)]['x']=this[_0x5a9efa(0x2a4)]['x'],this[_0x5a9efa(0x111)]['y']=this['_effectsContainer']['y'])),this[_0x5a9efa(0x146)][_0x5a9efa(0x9d2)](_0x13887a);},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x372)]=function(_0x45dcdb){const _0x4406a8=_0x553167;if(!_0x45dcdb)return![];if(!_0x45dcdb[_0x4406a8(0x21f)])return![];if(!_0x45dcdb['targetObjects'][0x0])return![];if(_0x45dcdb['targetObjects'][0x0][_0x4406a8(0x8fb)]&&!_0x45dcdb[_0x4406a8(0x3b1)][0x0][_0x4406a8(0x8fb)]())return![];if($gameSystem[_0x4406a8(0x196)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x45dcdb[_0x4406a8(0x589)]===Sprite_Animation){if(_0x45dcdb['_animation']['displayType']!==0x0)return![];}else{if(_0x45dcdb[_0x4406a8(0x589)]===Sprite_AnimationMV){if(_0x45dcdb[_0x4406a8(0x21f)][_0x4406a8(0x5f1)]===0x3)return![];}}return!![];const _0xb1da98=Window_BattleStatus[_0x4406a8(0x22b)][_0x4406a8(0x297)]();return['xp',_0x4406a8(0x7cf)][_0x4406a8(0x58d)](_0xb1da98);},Spriteset_Battle[_0x553167(0x22b)]['battleStatusWindowAnimationContainer']=function(){const _0x24e17a=_0x553167;if(!SceneManager[_0x24e17a(0xa7f)])return null;if(!SceneManager[_0x24e17a(0xa7f)][_0x24e17a(0xa6f)])return null;if(!SceneManager[_0x24e17a(0xa7f)][_0x24e17a(0xa6f)][_0x24e17a(0x2a4)])return null;return SceneManager[_0x24e17a(0xa7f)]['_statusWindow']['_effectsContainer'];},Spriteset_Battle[_0x553167(0x22b)]['removeAnimation']=function(_0x56f291){const _0x4da470=_0x553167;this[_0x4da470(0x114)](_0x56f291);for(const _0x2d5064 of _0x56f291[_0x4da470(0x3b1)]){_0x2d5064[_0x4da470(0x132)]&&_0x2d5064['endAnimation']();}_0x56f291[_0x4da470(0x444)]();},Spriteset_Battle['prototype'][_0x553167(0x114)]=function(_0xb8298e){const _0x5c3634=_0x553167;this[_0x5c3634(0x372)](_0xb8298e)?this[_0x5c3634(0xaa2)]()[_0x5c3634(0x588)](_0xb8298e):this[_0x5c3634(0x111)][_0x5c3634(0x588)](_0xb8298e);this[_0x5c3634(0x2a4)][_0x5c3634(0x588)](_0xb8298e),this[_0x5c3634(0x111)]['removeChild'](_0xb8298e),this[_0x5c3634(0x146)][_0x5c3634(0x4c0)](_0xb8298e);if(this[_0x5c3634(0x276)])this[_0x5c3634(0x276)][_0x5c3634(0x4c0)](_0xb8298e);},VisuMZ[_0x553167(0x841)]['Spriteset_Battle_updateActors']=Spriteset_Battle['prototype'][_0x553167(0x2a6)],Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x2a6)]=function(){const _0x165dbd=_0x553167;VisuMZ[_0x165dbd(0x841)][_0x165dbd(0x519)][_0x165dbd(0x7f7)](this),this[_0x165dbd(0x3e7)]();},Spriteset_Battle['prototype'][_0x553167(0x3e7)]=function(){const _0x4cd79c=_0x553167;this['_battlerContainer'][_0x4cd79c(0xa39)]['sort'](this[_0x4cd79c(0x8a8)]['bind'](this)),this[_0x4cd79c(0x379)]();if(!this[_0x4cd79c(0xa62)])return;this[_0x4cd79c(0xa62)][_0x4cd79c(0x25b)]=this[_0x4cd79c(0x34c)]();},Spriteset_Battle[_0x553167(0x22b)]['compareBattlerSprites']=function(_0x8a6fc4,_0x113329){const _0x23007c=_0x553167;if(VisuMZ[_0x23007c(0x841)][_0x23007c(0x309)][_0x23007c(0x5d0)]['PrioritySortActors']){if(_0x8a6fc4[_0x23007c(0x928)]&&_0x113329['_battler']){if(_0x8a6fc4[_0x23007c(0x928)]['isActor']()&&_0x113329[_0x23007c(0x928)]['isEnemy']())return 0x1;else{if(_0x113329[_0x23007c(0x928)][_0x23007c(0x8fb)]()&&_0x8a6fc4['_battler'][_0x23007c(0x602)]())return-0x1;}}}return _0x8a6fc4['_baseY']!==_0x113329[_0x23007c(0x756)]?_0x8a6fc4[_0x23007c(0x756)]-_0x113329[_0x23007c(0x756)]:_0x113329[_0x23007c(0x621)]-_0x8a6fc4[_0x23007c(0x621)];},Spriteset_Battle[_0x553167(0x22b)]['putActiveBattlerOnTop']=function(){const _0x13cc7d=_0x553167;if(!VisuMZ['BattleCore'][_0x13cc7d(0x309)]['Actor'][_0x13cc7d(0x1c1)])return;const _0x1ffb95=BattleManager[_0x13cc7d(0x1ef)];if(_0x1ffb95){if(_0x1ffb95['isActor']()&&!$gameSystem[_0x13cc7d(0x196)]())return;if(_0x1ffb95===BattleManager[_0x13cc7d(0xaa9)]())return;const _0x45d081=_0x1ffb95['battler']();if(_0x45d081&&_0x1ffb95[_0x13cc7d(0x8fb)]())this[_0x13cc7d(0xa62)][_0x13cc7d(0xbd9)](_0x45d081);}},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x6aa)]=function(){const _0x1c7d7c=_0x553167;for(const _0x1050ec of $gameParty[_0x1c7d7c(0x58e)]()){if(!_0x1050ec)continue;if(!_0x1050ec[_0x1c7d7c(0x8d6)]())continue;_0x1050ec['battler']()[_0x1c7d7c(0x16d)]=!![],_0x1050ec[_0x1c7d7c(0x8d6)]()[_0x1c7d7c(0x9bc)]();}},Spriteset_Battle[_0x553167(0x22b)]['createUIContainer']=function(){const _0x116e36=_0x553167;this[_0x116e36(0x676)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x116e36(0xbd9)](this[_0x116e36(0x676)]):this['_battleField']['addChild'](this[_0x116e36(0x676)]),SceneManager[_0x116e36(0xa7f)]['_uiContainer']=this[_0x116e36(0x676)];},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x592)]=function(){const _0x39867c=_0x553167;if(VisuMZ['BattleCore'][_0x39867c(0x309)][_0x39867c(0x194)][_0x39867c(0x8c5)])return;this[_0x39867c(0x8fa)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x39867c(0x8fa)]);for(const _0x6b9616 of this['_enemySprites']){const _0x1972c2=new Sprite_EnemyName();this['_enemyNameContainer'][_0x39867c(0xbd9)](_0x1972c2),_0x1972c2[_0x39867c(0x441)](_0x6b9616);}},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x5a3)]=function(){const _0x4ad40=_0x553167;if(!this[_0x4ad40(0x2c5)])return;if(!this['_uiContainer'])return;const _0x222022=Spriteset_Battle[_0x4ad40(0x245)]?this[_0x4ad40(0x2c5)]['x']:0x0,_0x6f6f9e=Spriteset_Battle[_0x4ad40(0x245)]?this[_0x4ad40(0x2c5)]['y']:0x0,_0x47b4fd=Imported[_0x4ad40(0x1cf)]?this[_0x4ad40(0x7f3)]['x']:0x0,_0x2e69a9=Imported[_0x4ad40(0x1cf)]?this[_0x4ad40(0x7f3)]['y']:0x0;this[_0x4ad40(0x676)]['x']=_0x222022+_0x47b4fd,this['_uiContainer']['y']=_0x6f6f9e+_0x2e69a9;},BattleManager['addChildToUiContainer']=function(_0x1d95ad){const _0x5a41d4=_0x553167;if(!SceneManager[_0x5a41d4(0xa7f)][_0x5a41d4(0x676)])return;SceneManager[_0x5a41d4(0xa7f)]['_uiContainer']['addChild'](_0x1d95ad);},BattleManager['removeChildFromUiContainer']=function(_0x1ce4dc){const _0x487b57=_0x553167;if(!SceneManager['_scene'][_0x487b57(0x676)])return;SceneManager[_0x487b57(0xa7f)][_0x487b57(0x676)][_0x487b57(0x588)](_0x1ce4dc);},Spriteset_Battle['prototype'][_0x553167(0x34c)]=function(){return 0xff;},Spriteset_Battle[_0x553167(0x22b)]['isBusy']=function(){return![];},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0xa65)]=function(){const _0x2c23a2=_0x553167;return this[_0x2c23a2(0x382)]()[_0x2c23a2(0x67b)](_0x5ec20b=>_0x5ec20b[_0x2c23a2(0x4ef)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x4d353d=_0x553167;return this[_0x4d353d(0x382)]()[_0x4d353d(0x67b)](_0x27b640=>_0x27b640[_0x4d353d(0xa8e)]());},Spriteset_Battle[_0x553167(0x22b)][_0x553167(0x60b)]=function(){const _0x286e3c=_0x553167;return this['battlerSprites']()[_0x286e3c(0x67b)](_0x2a5841=>_0x2a5841[_0x286e3c(0x33a)]());},Spriteset_Battle['prototype']['isAnyoneSkewing']=function(){const _0x170cff=_0x553167;return this['battlerSprites']()[_0x170cff(0x67b)](_0x487140=>_0x487140['isSkewing']());},Spriteset_Battle[_0x553167(0x22b)]['isAnyoneSpinning']=function(){const _0x4152f9=_0x553167;return this[_0x4152f9(0x382)]()[_0x4152f9(0x67b)](_0x2e17f5=>_0x2e17f5['isSpinning']());},Spriteset_Battle['prototype'][_0x553167(0x49e)]=function(){const _0x217f26=_0x553167;return this['battlerSprites']()[_0x217f26(0x67b)](_0x3f7d9a=>_0x3f7d9a[_0x217f26(0x5d4)]());},VisuMZ[_0x553167(0x841)][_0x553167(0x224)]=Window_ItemList['prototype'][_0x553167(0x590)],Window_ItemList[_0x553167(0x22b)][_0x553167(0x590)]=function(){const _0xfc7bd3=_0x553167;return SceneManager[_0xfc7bd3(0x2c2)]()?SceneManager[_0xfc7bd3(0xa7f)]['battleLayoutStyle']()===_0xfc7bd3(0xb17)?VisuMZ['BattleCore'][_0xfc7bd3(0x309)]['BattleLayout'][_0xfc7bd3(0x7e6)]:VisuMZ['BattleCore']['Settings'][_0xfc7bd3(0x4a7)][_0xfc7bd3(0x617)]:VisuMZ[_0xfc7bd3(0x841)][_0xfc7bd3(0x224)][_0xfc7bd3(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x43c)]=Window_SkillList[_0x553167(0x22b)]['maxCols'],Window_SkillList[_0x553167(0x22b)]['maxCols']=function(){const _0x17fc5c=_0x553167;return SceneManager[_0x17fc5c(0x2c2)]()?SceneManager[_0x17fc5c(0xa7f)][_0x17fc5c(0x297)]()==='border'?VisuMZ['BattleCore']['Settings'][_0x17fc5c(0x4a7)][_0x17fc5c(0x7e6)]:VisuMZ[_0x17fc5c(0x841)][_0x17fc5c(0x309)][_0x17fc5c(0x4a7)][_0x17fc5c(0x617)]:VisuMZ[_0x17fc5c(0x841)][_0x17fc5c(0x43c)][_0x17fc5c(0x7f7)](this);},VisuMZ['BattleCore'][_0x553167(0x26e)]=Window_Options[_0x553167(0x22b)]['addGeneralOptions'],Window_Options[_0x553167(0x22b)][_0x553167(0xac4)]=function(){const _0x5befd6=_0x553167;VisuMZ[_0x5befd6(0x841)][_0x5befd6(0x26e)]['call'](this),this[_0x5befd6(0x3dd)](),this['addShowHpGaugeCommand']();},Window_Options[_0x553167(0x22b)][_0x553167(0x3dd)]=function(){const _0x2c5d89=_0x553167;VisuMZ[_0x2c5d89(0x841)]['Settings'][_0x2c5d89(0x898)][_0x2c5d89(0xb94)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x2c5d89(0x77f)]());},Window_Options['prototype'][_0x553167(0x911)]=function(){const _0x238387=_0x553167;if(!VisuMZ['BattleCore'][_0x238387(0x309)][_0x238387(0x24c)][_0x238387(0x859)])return;const _0x39ba63=TextManager[_0x238387(0x953)],_0xbd40aa='visualHpGauge';this['addCommand'](_0x39ba63,_0xbd40aa);},Window_Options['prototype'][_0x553167(0x56d)]=function(){const _0x17fafe=_0x553167,_0x23ca8f=TextManager[_0x17fafe(0xa27)],_0x53ad36=_0x17fafe(0x991);this[_0x17fafe(0xaf6)](_0x23ca8f,_0x53ad36);},Window_Options[_0x553167(0x22b)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x5f1fcd=_0x553167,_0x4115eb=TextManager[_0x5f1fcd(0xb44)],_0x5eada8=_0x5f1fcd(0x2b3);this[_0x5f1fcd(0xaf6)](_0x4115eb,_0x5eada8);},VisuMZ['BattleCore'][_0x553167(0x97c)]=Window_Options['prototype'][_0x553167(0xa12)],Window_Options[_0x553167(0x22b)][_0x553167(0xa12)]=function(_0x108e26){const _0x4e18cc=_0x553167,_0x1e2d54=this['commandSymbol'](_0x108e26);return _0x1e2d54===_0x4e18cc(0x2b3)?this['statusTextAutoBattleStyle']():VisuMZ[_0x4e18cc(0x841)]['Window_Options_statusText']['call'](this,_0x108e26);},Window_Options[_0x553167(0x22b)][_0x553167(0x8d4)]=function(){const _0x2049d1=_0x553167,_0x49ce3a=VisuMZ[_0x2049d1(0x841)][_0x2049d1(0x309)]['AutoBattle'],_0x19b6ab=this['getConfigValue'](_0x2049d1(0x2b3));return _0x19b6ab?_0x49ce3a['StyleON']:_0x49ce3a[_0x2049d1(0xa8c)];},Window_ShopStatus[_0x553167(0x22b)][_0x553167(0x211)]=function(){const _0x5c882a=_0x553167,_0x1f85a8=DataManager[_0x5c882a(0x7ca)](this[_0x5c882a(0x8de)]),_0x39fdd6=VisuMZ[_0x5c882a(0x9ef)][_0x1f85a8];if(!_0x39fdd6)return this[_0x5c882a(0x431)]();const _0x4ffc5b=_0x5c882a(0x433)[_0x5c882a(0x47d)](this['_item'][_0x5c882a(0x2c7)][_0x5c882a(0x484)]),_0x5ec36e=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x5c882a(0x8de)][_0x5c882a(0x2c7)][_0x5c882a(0x484)]];return _0x39fdd6[_0x4ffc5b][_0x5c882a(0x47d)](_0x5ec36e);},Window_ShopStatus[_0x553167(0x22b)][_0x553167(0xa92)]=function(){const _0x43fc7f=_0x553167,_0xf5180f=DataManager[_0x43fc7f(0x7ca)](this[_0x43fc7f(0x8de)]),_0x28cd8e=VisuMZ[_0x43fc7f(0x9ef)][_0xf5180f];if(!_0x28cd8e)return this[_0x43fc7f(0x550)]();return _0x28cd8e[_0x43fc7f(0xaba)][_0x43fc7f(0x7f7)](this);},VisuMZ[_0x553167(0x841)][_0x553167(0x53c)]=Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x7a1)],Window_PartyCommand['prototype'][_0x553167(0x7a1)]=function(_0xcaef14){const _0x549b39=_0x553167;VisuMZ[_0x549b39(0x841)][_0x549b39(0x53c)][_0x549b39(0x7f7)](this,_0xcaef14),this['createCommandNameWindow'](_0xcaef14);},Window_PartyCommand['prototype'][_0x553167(0x685)]=function(_0x21a82b){const _0x3fe4ee=_0x553167,_0x272a50=new Rectangle(0x0,0x0,_0x21a82b[_0x3fe4ee(0x9ce)],_0x21a82b[_0x3fe4ee(0x908)]);this['_commandNameWindow']=new Window_Base(_0x272a50),this[_0x3fe4ee(0x8ea)]['opacity']=0x0,this[_0x3fe4ee(0xbd9)](this['_commandNameWindow']),this[_0x3fe4ee(0x5cb)]();},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x752)]=function(){const _0x5d0608=_0x553167;Window_Command['prototype'][_0x5d0608(0x752)]['call'](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_PartyCommand['prototype']['updateCommandNameWindow']=function(){const _0x4211b1=_0x553167,_0x5a3092=this['_commandNameWindow'];_0x5a3092[_0x4211b1(0x5cf)][_0x4211b1(0xa25)]();const _0x209b3f=this[_0x4211b1(0x98f)](this[_0x4211b1(0x8ab)]());if(_0x209b3f===_0x4211b1(0x5f2)&&this[_0x4211b1(0xb19)]()>0x0){const _0x52bf22=this[_0x4211b1(0x9cd)](this['index']());let _0x1523af=this[_0x4211b1(0x33c)](this[_0x4211b1(0x8ab)]());_0x1523af=_0x1523af[_0x4211b1(0xa4a)](/\\I\[(\d+)\]/gi,''),_0x5a3092[_0x4211b1(0x739)](),this[_0x4211b1(0x962)](_0x1523af,_0x52bf22),this[_0x4211b1(0x72a)](_0x1523af,_0x52bf22),this[_0x4211b1(0x522)](_0x1523af,_0x52bf22);}},Window_PartyCommand['prototype'][_0x553167(0x962)]=function(_0x6f210c,_0x4573a3){},Window_PartyCommand['prototype'][_0x553167(0x72a)]=function(_0xe3193b,_0x2a9e74){const _0x4ab762=_0x553167,_0x338f5b=this[_0x4ab762(0x8ea)];_0x338f5b[_0x4ab762(0x4b5)](_0xe3193b,0x0,_0x2a9e74['y'],_0x338f5b[_0x4ab762(0x5f5)],_0x4ab762(0xa2f));},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x522)]=function(_0x3870f3,_0x28f4e2){const _0x21b38e=_0x553167,_0x42803e=this[_0x21b38e(0x8ea)],_0x4d1cad=$gameSystem['windowPadding'](),_0x37021e=_0x28f4e2['x']+Math[_0x21b38e(0x66d)](_0x28f4e2[_0x21b38e(0x9ce)]/0x2)+_0x4d1cad;_0x42803e['x']=_0x42803e[_0x21b38e(0x9ce)]/-0x2+_0x37021e,_0x42803e['y']=Math[_0x21b38e(0x66d)](_0x28f4e2['height']/0x2);},Window_PartyCommand['prototype']['makeCommandList']=function(){const _0x36cb6=_0x553167;this[_0x36cb6(0x52f)](),this[_0x36cb6(0x61b)](),this[_0x36cb6(0x794)](),this[_0x36cb6(0xa21)](),this[_0x36cb6(0x2e4)](),this[_0x36cb6(0x62f)]();},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x52f)]=function(){const _0x131c84=_0x553167,_0x3051f7=this[_0x131c84(0xab9)](),_0x149122=VisuMZ[_0x131c84(0x841)]['Settings'][_0x131c84(0xb2b)][_0x131c84(0x4fe)],_0x19f60c=_0x3051f7===_0x131c84(0x6fb)?TextManager[_0x131c84(0x657)]:'\x5cI[%1]%2'[_0x131c84(0x47d)](_0x149122,TextManager[_0x131c84(0x657)]),_0x42a052=this[_0x131c84(0x77c)]();this[_0x131c84(0xaf6)](_0x19f60c,_0x131c84(0x657),_0x42a052);},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x77c)]=function(){return!![];},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x61b)]=function(){const _0x3ca092=_0x553167;if(!this[_0x3ca092(0x9b3)]())return;const _0x59357a=this[_0x3ca092(0xab9)](),_0x4128b9=VisuMZ[_0x3ca092(0x841)][_0x3ca092(0x309)][_0x3ca092(0xb2b)][_0x3ca092(0x2cf)],_0x4ca1b6=_0x59357a===_0x3ca092(0x6fb)?TextManager[_0x3ca092(0x998)]:_0x3ca092(0x236)[_0x3ca092(0x47d)](_0x4128b9,TextManager['autoBattle']),_0x4e5e8d=this[_0x3ca092(0x8b7)]();this[_0x3ca092(0xaf6)](_0x4ca1b6,_0x3ca092(0x998),_0x4e5e8d);},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x9b3)]=function(){const _0xcd9142=_0x553167;return VisuMZ[_0xcd9142(0x841)]['Settings']['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x8b7)]=function(){return!![];},Window_PartyCommand['prototype'][_0x553167(0x794)]=function(){},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0xa21)]=function(){const _0x1af809=_0x553167,_0x2533a4=VisuMZ[_0x1af809(0x841)][_0x1af809(0x309)][_0x1af809(0xb2b)][_0x1af809(0x16a)]??!![];if(!_0x2533a4)return;const _0x265ca6=this[_0x1af809(0xab9)](),_0x381298=VisuMZ[_0x1af809(0x841)][_0x1af809(0x309)][_0x1af809(0x907)]['CmdIconStatus']??0x57,_0x3f1e39=_0x265ca6===_0x1af809(0x6fb)?TextManager[_0x1af809(0x786)]:'\x5cI[%1]%2'[_0x1af809(0x47d)](_0x381298,TextManager[_0x1af809(0x786)]),_0x5b310e=!![];this[_0x1af809(0xaf6)](_0x3f1e39,_0x1af809(0x786),_0x5b310e);},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x2e4)]=function(){const _0x15395c=_0x553167;if(!this[_0x15395c(0x2fa)]())return;const _0x4c0299=this['commandStyle'](),_0x343c1c=VisuMZ[_0x15395c(0x841)]['Settings']['PartyCmd'][_0x15395c(0x21d)],_0x2e18be=_0x4c0299===_0x15395c(0x6fb)?TextManager[_0x15395c(0x641)]:'\x5cI[%1]%2'[_0x15395c(0x47d)](_0x343c1c,TextManager['options']),_0xee6eb0=this[_0x15395c(0x1b7)]();this['addCommand'](_0x2e18be,'options',_0xee6eb0);},Window_PartyCommand[_0x553167(0x22b)]['isOptionsCommandAdded']=function(){const _0x275e6f=_0x553167;return VisuMZ['BattleCore'][_0x275e6f(0x309)][_0x275e6f(0xb2b)][_0x275e6f(0x7e7)];},Window_PartyCommand[_0x553167(0x22b)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x553167(0x62f)]=function(){const _0x293439=_0x553167,_0x6da23e=this['commandStyle'](),_0xe81521=VisuMZ[_0x293439(0x841)]['Settings'][_0x293439(0xb2b)][_0x293439(0x125)],_0x5e19ee=_0x6da23e===_0x293439(0x6fb)?TextManager['escape']:'\x5cI[%1]%2'[_0x293439(0x47d)](_0xe81521,TextManager[_0x293439(0x9dc)]),_0x3a6cc4=this[_0x293439(0x31a)]();this['addCommand'](_0x5e19ee,_0x293439(0x9dc),_0x3a6cc4);},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x31a)]=function(){const _0x2612ca=_0x553167;return BattleManager[_0x2612ca(0x9a7)]();},Window_PartyCommand[_0x553167(0x22b)]['itemTextAlign']=function(){const _0x472cd9=_0x553167;return VisuMZ[_0x472cd9(0x841)][_0x472cd9(0x309)][_0x472cd9(0xb2b)]['CmdTextAlign'];},Window_PartyCommand['prototype']['drawItem']=function(_0x3ae4a0){const _0x5c7744=_0x553167,_0x3c0288=this[_0x5c7744(0x98f)](_0x3ae4a0);if(_0x3c0288===_0x5c7744(0x80e))this[_0x5c7744(0x9c1)](_0x3ae4a0);else _0x3c0288===_0x5c7744(0x5f2)?this[_0x5c7744(0xaff)](_0x3ae4a0):Window_Command[_0x5c7744(0x22b)][_0x5c7744(0x2f2)][_0x5c7744(0x7f7)](this,_0x3ae4a0);},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0xab9)]=function(){const _0x11c12a=_0x553167;return VisuMZ[_0x11c12a(0x841)][_0x11c12a(0x309)]['PartyCmd'][_0x11c12a(0xabf)];},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x98f)]=function(_0x5b31c9){const _0x4736bf=_0x553167;if(_0x5b31c9<0x0)return _0x4736bf(0x6fb);const _0x1b3493=this[_0x4736bf(0xab9)]();if(_0x1b3493!==_0x4736bf(0x7b1))return _0x1b3493;else{if(this[_0x4736bf(0xb19)]()>0x0){const _0x4ef5b4=this['commandName'](_0x5b31c9);if(_0x4ef5b4[_0x4736bf(0x750)](/\\I\[(\d+)\]/i)){const _0x4a6a6b=this[_0x4736bf(0x9cd)](_0x5b31c9),_0x4ffc5a=this[_0x4736bf(0x39c)](_0x4ef5b4)[_0x4736bf(0x9ce)];return _0x4ffc5a<=_0x4a6a6b[_0x4736bf(0x9ce)]?_0x4736bf(0x80e):'icon';}}}return _0x4736bf(0x6fb);},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x9c1)]=function(_0x2bed18){const _0x36628c=_0x553167,_0x5d9084=this[_0x36628c(0x9cd)](_0x2bed18),_0x33d157=this[_0x36628c(0x33c)](_0x2bed18),_0x1bb418=this[_0x36628c(0x39c)](_0x33d157)['width'];this[_0x36628c(0x319)](this['isCommandEnabled'](_0x2bed18));const _0x2079ff=this[_0x36628c(0x709)]();if(_0x2079ff===_0x36628c(0x7a2))this[_0x36628c(0x3cf)](_0x33d157,_0x5d9084['x']+_0x5d9084[_0x36628c(0x9ce)]-_0x1bb418,_0x5d9084['y'],_0x1bb418);else{if(_0x2079ff===_0x36628c(0xa2f)){const _0x35d910=_0x5d9084['x']+Math[_0x36628c(0x66d)]((_0x5d9084[_0x36628c(0x9ce)]-_0x1bb418)/0x2);this['drawTextEx'](_0x33d157,_0x35d910,_0x5d9084['y'],_0x1bb418);}else this[_0x36628c(0x3cf)](_0x33d157,_0x5d9084['x'],_0x5d9084['y'],_0x1bb418);}},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0xaff)]=function(_0xcc1994){const _0x16233f=_0x553167;this[_0x16233f(0x33c)](_0xcc1994)['match'](/\\I\[(\d+)\]/i);const _0x5c1d30=Number(RegExp['$1'])||0x0,_0x32910c=this[_0x16233f(0x9cd)](_0xcc1994),_0x444dc7=_0x32910c['x']+Math[_0x16233f(0x66d)]((_0x32910c['width']-ImageManager['iconWidth'])/0x2),_0x1f737b=_0x32910c['y']+(_0x32910c[_0x16233f(0x908)]-ImageManager[_0x16233f(0x837)])/0x2;this['drawIcon'](_0x5c1d30,_0x444dc7,_0x1f737b);},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x447)]=function(){},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x706)]=function(){const _0x5aaa4a=_0x553167;Window_Command['prototype'][_0x5aaa4a(0x706)]['call'](this);const _0x271ce1=this[_0x5aaa4a(0x297)]();_0x271ce1==='border'&&this[_0x5aaa4a(0x258)]();},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x297)]=function(){const _0x13b56a=_0x553167;if(this['_battleLayoutStyle'])return this[_0x13b56a(0xb59)];return this['_battleLayoutStyle']=SceneManager['_scene']['battleLayoutStyle'](),this[_0x13b56a(0xb59)];},Window_PartyCommand[_0x553167(0x22b)][_0x553167(0x402)]=function(){const _0x1e60b9=_0x553167,_0x322d6c=VisuMZ['BattleCore'][_0x1e60b9(0x309)][_0x1e60b9(0xb2b)],_0x282188=this[_0x1e60b9(0x294)]();switch(_0x282188){case _0x1e60b9(0x657):this[_0x1e60b9(0x2c1)][_0x1e60b9(0x608)](_0x322d6c[_0x1e60b9(0x87b)]);break;case _0x1e60b9(0x998):this[_0x1e60b9(0x2c1)][_0x1e60b9(0x608)](_0x322d6c[_0x1e60b9(0xa35)]);break;case'options':this[_0x1e60b9(0x2c1)][_0x1e60b9(0x608)](_0x322d6c[_0x1e60b9(0x923)]);break;case _0x1e60b9(0x9dc):this[_0x1e60b9(0x2c1)]['setText'](_0x322d6c[_0x1e60b9(0x95f)]);break;case'status':this[_0x1e60b9(0x2c1)][_0x1e60b9(0x608)](Window_InBattleStatus[_0x1e60b9(0x511)][_0x1e60b9(0xbf4)]);break;default:this[_0x1e60b9(0x2c1)]['setText']('');break;}},VisuMZ[_0x553167(0x841)][_0x553167(0x2f0)]=Window_ActorCommand[_0x553167(0x22b)]['initialize'],Window_ActorCommand['prototype'][_0x553167(0x7a1)]=function(_0x33cb8e){const _0x176a54=_0x553167;VisuMZ[_0x176a54(0x841)][_0x176a54(0x2f0)][_0x176a54(0x7f7)](this,_0x33cb8e),this[_0x176a54(0x685)](_0x33cb8e);},Window_ActorCommand['prototype'][_0x553167(0x685)]=function(_0x38fd63){const _0x5e88d8=_0x553167,_0x571fec=new Rectangle(0x0,0x0,_0x38fd63['width'],_0x38fd63[_0x5e88d8(0x908)]);this['_commandNameWindow']=new Window_Base(_0x571fec),this[_0x5e88d8(0x8ea)]['opacity']=0x0,this[_0x5e88d8(0xbd9)](this['_commandNameWindow']),this[_0x5e88d8(0x5cb)]();},Window_ActorCommand['prototype']['callUpdateHelp']=function(){const _0x283fb0=_0x553167;Window_Command[_0x283fb0(0x22b)][_0x283fb0(0x752)][_0x283fb0(0x7f7)](this);if(this[_0x283fb0(0x8ea)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x5cb)]=function(){const _0x284a9d=_0x553167,_0x4f94f7=this[_0x284a9d(0x8ea)];_0x4f94f7[_0x284a9d(0x5cf)]['clear']();const _0x4bd1fa=this[_0x284a9d(0x98f)](this[_0x284a9d(0x8ab)]());if(_0x4bd1fa===_0x284a9d(0x5f2)&&this[_0x284a9d(0xb19)]()>0x0){const _0x367364=this['itemLineRect'](this[_0x284a9d(0x8ab)]());let _0x17730c=this[_0x284a9d(0x33c)](this[_0x284a9d(0x8ab)]());_0x17730c=_0x17730c[_0x284a9d(0xa4a)](/\\I\[(\d+)\]/gi,''),_0x4f94f7[_0x284a9d(0x739)](),this['commandNameWindowDrawBackground'](_0x17730c,_0x367364),this[_0x284a9d(0x72a)](_0x17730c,_0x367364),this[_0x284a9d(0x522)](_0x17730c,_0x367364);}},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x962)]=function(_0xbd37f8,_0x491612){},Window_ActorCommand['prototype'][_0x553167(0x72a)]=function(_0xd0724,_0x1b2288){const _0x2c8c4d=_0x553167,_0x4d8d15=this[_0x2c8c4d(0x8ea)];_0x4d8d15['drawText'](_0xd0724,0x0,_0x1b2288['y'],_0x4d8d15['innerWidth'],'center');},Window_ActorCommand[_0x553167(0x22b)]['commandNameWindowCenter']=function(_0x3a780e,_0xf78745){const _0x4c1a13=_0x553167,_0x13870d=this[_0x4c1a13(0x8ea)],_0x288614=$gameSystem[_0x4c1a13(0x64c)](),_0xac256c=_0xf78745['x']+Math[_0x4c1a13(0x66d)](_0xf78745['width']/0x2)+_0x288614;_0x13870d['x']=_0x13870d[_0x4c1a13(0x9ce)]/-0x2+_0xac256c,_0x13870d['y']=Math[_0x4c1a13(0x66d)](_0xf78745[_0x4c1a13(0x908)]/0x2);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x999)]=function(){const _0x4cb2e8=_0x553167;if(!this[_0x4cb2e8(0x3d0)])return;const _0x3be190=this[_0x4cb2e8(0x3d0)][_0x4cb2e8(0x1de)]();for(const _0x395ddb of _0x3be190){this[_0x4cb2e8(0x2df)](_0x395ddb[_0x4cb2e8(0x512)]()[_0x4cb2e8(0x976)]());}},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x2df)]=function(_0x12ffdb){const _0xec558b=_0x553167;_0x12ffdb===_0xec558b(0xb01)&&this[_0xec558b(0xb6e)]();[_0xec558b(0xa72),_0xec558b(0xac9)][_0xec558b(0xb5d)](_0x12ffdb)&&this[_0xec558b(0x894)]();_0x12ffdb===_0xec558b(0x844)&&this[_0xec558b(0x895)]();_0x12ffdb===_0xec558b(0xaf4)&&this[_0xec558b(0x33e)]();_0x12ffdb===_0xec558b(0xab0)&&this[_0xec558b(0xa21)]();_0x12ffdb===_0xec558b(0x7e2)&&this[_0xec558b(0x62f)]();_0x12ffdb===_0xec558b(0x947)&&this[_0xec558b(0x61b)]();if(_0x12ffdb[_0xec558b(0x750)](/STYPE: (\d+)/i)){const _0x239f7b=Number(RegExp['$1']);this[_0xec558b(0x310)](_0x239f7b);}else{if(_0x12ffdb[_0xec558b(0x750)](/STYPE: (.*)/i)){const _0x211840=DataManager[_0xec558b(0x958)](RegExp['$1']);this[_0xec558b(0x310)](_0x211840);}}_0x12ffdb===_0xec558b(0x658)&&this[_0xec558b(0xa05)]();if(_0x12ffdb[_0xec558b(0x750)](/SKILL: (\d+)/i)){const _0x4de084=Number(RegExp['$1']);this[_0xec558b(0x886)]($dataSkills[_0x4de084]);}else{if(_0x12ffdb['match'](/SKILL: (.*)/i)){const _0x422d5d=DataManager[_0xec558b(0x474)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x422d5d]);}}_0x12ffdb==='PARTY'&&Imported[_0xec558b(0x68d)]&&this[_0xec558b(0x78f)](),[_0xec558b(0x5eb),_0xec558b(0x2bd)][_0xec558b(0xb5d)](_0x12ffdb)&&Imported[_0xec558b(0x243)]&&this['addCombatLogCommand'](),_0x12ffdb===_0xec558b(0x6d0)&&Imported[_0xec558b(0x1c6)]&&this[_0xec558b(0x801)](!![]),_0x12ffdb===_0xec558b(0x87d)&&Imported[_0xec558b(0xb3f)]&&this[_0xec558b(0x3d7)]();},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xb6e)]=function(){const _0x130b4b=_0x553167,_0x4ac7e6=$dataSkills[this[_0x130b4b(0x3d0)][_0x130b4b(0xb2e)]()];if(!_0x4ac7e6)return;if(!this['canAddSkillCommand'](_0x4ac7e6))return;const _0xca00ab=this['commandStyle'](),_0x5737b6=DataManager[_0x130b4b(0x565)](_0x4ac7e6),_0x5685cd=DataManager[_0x130b4b(0xae4)](_0x4ac7e6),_0x139ec8=_0xca00ab===_0x130b4b(0x6fb)?_0x5737b6:'\x5cI[%1]%2'['format'](_0x5685cd,_0x5737b6);this[_0x130b4b(0xaf6)](_0x139ec8,_0x130b4b(0xa94),this[_0x130b4b(0x3d0)][_0x130b4b(0x4bb)]());},Window_ActorCommand['prototype']['addGuardCommand']=function(){const _0x167d5a=_0x553167,_0xf672c0=$dataSkills[this['_actor']['guardSkillId']()];if(!_0xf672c0)return;if(!this[_0x167d5a(0x570)](_0xf672c0))return;const _0x201f5f=this[_0x167d5a(0xab9)](),_0x50e33f=DataManager['battleCommandName'](_0xf672c0),_0x4eca94=DataManager[_0x167d5a(0xae4)](_0xf672c0),_0x469c75=_0x201f5f===_0x167d5a(0x6fb)?_0x50e33f:'\x5cI[%1]%2'[_0x167d5a(0x47d)](_0x4eca94,_0x50e33f);this[_0x167d5a(0xaf6)](_0x469c75,_0x167d5a(0x6fd),this['_actor']['canGuard']());},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x33e)]=function(){const _0x2f1909=_0x553167,_0xf9877a=this['commandStyle'](),_0x239f36=VisuMZ['BattleCore'][_0x2f1909(0x309)][_0x2f1909(0xae7)][_0x2f1909(0x2ae)],_0x283751=_0xf9877a===_0x2f1909(0x6fb)?TextManager['item']:_0x2f1909(0x236)['format'](_0x239f36,TextManager[_0x2f1909(0x58c)]),_0x4d58ee=this[_0x2f1909(0x876)]();this[_0x2f1909(0xaf6)](_0x283751,_0x2f1909(0x58c),_0x4d58ee);},Window_ActorCommand['prototype'][_0x553167(0x876)]=function(){const _0x3fc3eb=_0x553167;return this[_0x3fc3eb(0x3d0)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x894)]=function(){const _0x416af7=_0x553167,_0x2b91d6=this[_0x416af7(0x3d0)][_0x416af7(0xbca)]();for(const _0x572f18 of _0x2b91d6){this[_0x416af7(0x310)](_0x572f18);}},Window_ActorCommand['prototype'][_0x553167(0x310)]=function(_0x449f75){const _0x3cbe2e=_0x553167;let _0x99688f=$dataSystem[_0x3cbe2e(0xbca)][_0x449f75];if(!_0x99688f)return;let _0x45aae5=_0x99688f;const _0x4a009c=this[_0x3cbe2e(0xab9)]();if(_0x4a009c===_0x3cbe2e(0x6fb))_0x45aae5=_0x45aae5[_0x3cbe2e(0xa4a)](/\x1I\[(\d+)\]/gi,''),_0x45aae5=_0x45aae5['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x99688f[_0x3cbe2e(0x750)](/\\I\[(\d+)\]/i)){const _0x17b056=Imported[_0x3cbe2e(0x14e)]?VisuMZ[_0x3cbe2e(0x2f1)]['Settings']['Skills']:VisuMZ[_0x3cbe2e(0x841)][_0x3cbe2e(0x309)]['ActorCmd'],_0x463f48=$dataSystem[_0x3cbe2e(0xa2c)]['includes'](_0x449f75),_0x2ff5e8=_0x463f48?_0x17b056[_0x3cbe2e(0x467)]:_0x17b056[_0x3cbe2e(0xb39)];_0x45aae5=_0x3cbe2e(0x236)[_0x3cbe2e(0x47d)](_0x2ff5e8,_0x99688f);}}this[_0x3cbe2e(0xaf6)](_0x45aae5,'skill',!![],_0x449f75);},Window_ActorCommand[_0x553167(0x22b)]['addSingleSkillCommands']=function(){const _0x47febb=_0x553167,_0x2828eb=this['_actor'][_0x47febb(0xbca)](),_0x276e80=this['_actor'][_0x47febb(0x638)]();for(const _0x47231d of _0x276e80){if(!_0x47231d)continue;if(Imported[_0x47febb(0x14e)]){if(this['noSimilarSTypes'](_0x47231d))continue;if(this[_0x47febb(0xb8c)](_0x47231d))continue;}else{if(!_0x2828eb[_0x47febb(0xb5d)](_0x47231d[_0x47febb(0xa7e)]))continue;}this[_0x47febb(0x886)](_0x47231d);}},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xaa1)]=function(_0x142529){const _0x426723=_0x553167,_0x1e5d0a=this['_actor'][_0x426723(0xbca)](),_0x4b375b=_0x1e5d0a['filter'](_0x2d00db=>DataManager[_0x426723(0x1f4)](_0x142529)[_0x426723(0xb5d)](_0x2d00db));return _0x4b375b[_0x426723(0x635)]<=0x0;},Window_ActorCommand['prototype'][_0x553167(0xb8c)]=function(_0x49b977){const _0x52c582=_0x553167;if(Imported[_0x52c582(0x14e)]){if(VisuMZ[_0x52c582(0x2f1)][_0x52c582(0x932)]>=1.24){if(this[_0x52c582(0x3d0)]){if(!VisuMZ[_0x52c582(0x2f1)]['CheckVisibleBattleNotetags'](this['_actor'],_0x49b977))return!![];if(!VisuMZ[_0x52c582(0x2f1)][_0x52c582(0x4b6)](this[_0x52c582(0x3d0)],_0x49b977))return!![];if(!VisuMZ[_0x52c582(0x2f1)][_0x52c582(0x2e8)](this[_0x52c582(0x3d0)],_0x49b977))return!![];}}else{if(!Window_SkillList[_0x52c582(0x22b)][_0x52c582(0x8d3)][_0x52c582(0x7f7)](this,_0x49b977))return!![];if(!Window_SkillList['prototype'][_0x52c582(0xa9d)]['call'](this,_0x49b977))return!![];if(!Window_SkillList['prototype'][_0x52c582(0x7c2)][_0x52c582(0x7f7)](this,_0x49b977))return!![];}}return![];},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x886)]=function(_0x4a0a89){const _0x40b5c6=_0x553167;if(!_0x4a0a89)return;if(!this[_0x40b5c6(0x570)](_0x4a0a89))return;const _0x5ccbb3=this['commandStyle'](),_0x23db06=DataManager['battleCommandName'](_0x4a0a89),_0x199817=DataManager[_0x40b5c6(0xae4)](_0x4a0a89),_0x37c569=_0x5ccbb3===_0x40b5c6(0x6fb)?_0x23db06:_0x40b5c6(0x236)[_0x40b5c6(0x47d)](_0x199817,_0x23db06),_0x1c7b84=this[_0x40b5c6(0x3d0)][_0x40b5c6(0xa1f)](_0x4a0a89);this[_0x40b5c6(0xaf6)](_0x37c569,_0x40b5c6(0x359),_0x1c7b84,_0x4a0a89['id']);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x570)]=function(_0x26f00b){const _0x56c30b=_0x553167,_0x17b06f=_0x26f00b[_0x56c30b(0x645)];if(_0x17b06f[_0x56c30b(0x750)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x56c30b(0x3d0)][_0x56c30b(0x735)](_0x26f00b['id']))return![];}if(_0x17b06f[_0x56c30b(0x750)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x56c30b(0x3d0)][_0x56c30b(0x1bd)](_0x26f00b['id']))return![];}const _0x181074=VisuMZ[_0x56c30b(0x841)][_0x56c30b(0x8f7)](_0x26f00b,_0x56c30b(0xb62));if(VisuMZ[_0x56c30b(0x841)]['JS'][_0x181074]){if(!VisuMZ['BattleCore']['JS'][_0x181074][_0x56c30b(0x7f7)](this,this[_0x56c30b(0x3d0)],_0x26f00b))return![];}return VisuMZ[_0x56c30b(0x841)][_0x56c30b(0x17e)](_0x26f00b);},VisuMZ[_0x553167(0x841)][_0x553167(0x17e)]=function(_0x544052){const _0x43cd1e=_0x553167,_0x19d0e1=_0x544052[_0x43cd1e(0x645)];if(_0x19d0e1[_0x43cd1e(0x750)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x28b4a7=JSON[_0x43cd1e(0x4a1)]('['+RegExp['$1'][_0x43cd1e(0x750)](/\d+/g)+']');for(const _0x4c0d8e of _0x28b4a7){if(!$gameSwitches[_0x43cd1e(0x1d4)](_0x4c0d8e))return![];}return!![];}if(_0x19d0e1[_0x43cd1e(0x750)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x170cbd=JSON[_0x43cd1e(0x4a1)]('['+RegExp['$1'][_0x43cd1e(0x750)](/\d+/g)+']');for(const _0x3d900e of _0x170cbd){if(!$gameSwitches[_0x43cd1e(0x1d4)](_0x3d900e))return![];}return!![];}if(_0x19d0e1['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2061b0=JSON[_0x43cd1e(0x4a1)]('['+RegExp['$1'][_0x43cd1e(0x750)](/\d+/g)+']');for(const _0x4ce26f of _0x2061b0){if($gameSwitches[_0x43cd1e(0x1d4)](_0x4ce26f))return!![];}return![];}if(_0x19d0e1['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2c2adc=JSON[_0x43cd1e(0x4a1)]('['+RegExp['$1'][_0x43cd1e(0x750)](/\d+/g)+']');for(const _0x23b7b4 of _0x2c2adc){if(!$gameSwitches[_0x43cd1e(0x1d4)](_0x23b7b4))return!![];}return![];}if(_0x19d0e1[_0x43cd1e(0x750)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1d7345=JSON[_0x43cd1e(0x4a1)]('['+RegExp['$1'][_0x43cd1e(0x750)](/\d+/g)+']');for(const _0x383e33 of _0x1d7345){if(!$gameSwitches[_0x43cd1e(0x1d4)](_0x383e33))return!![];}return![];}if(_0x19d0e1['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5afe29=JSON[_0x43cd1e(0x4a1)]('['+RegExp['$1'][_0x43cd1e(0x750)](/\d+/g)+']');for(const _0x4458dd of _0x5afe29){if($gameSwitches[_0x43cd1e(0x1d4)](_0x4458dd))return![];}return!![];}return!![];},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xa21)]=function(){const _0x30792c=_0x553167,_0x27d5a4=this[_0x30792c(0xab9)](),_0x2be986=VisuMZ[_0x30792c(0x841)]['Settings'][_0x30792c(0x907)]['CmdIconStatus']??0x57,_0xc9cc70=_0x27d5a4===_0x30792c(0x6fb)?TextManager['status']:_0x30792c(0x236)[_0x30792c(0x47d)](_0x2be986,TextManager[_0x30792c(0x786)]),_0x58243a=!![];this['addCommand'](_0xc9cc70,'status',_0x58243a);},Window_ActorCommand['prototype'][_0x553167(0x62f)]=function(){const _0x479a8e=_0x553167,_0x103153=this[_0x479a8e(0xab9)](),_0x14c519=VisuMZ[_0x479a8e(0x841)][_0x479a8e(0x309)][_0x479a8e(0xb2b)][_0x479a8e(0x125)],_0x583e66=_0x103153==='text'?TextManager[_0x479a8e(0x9dc)]:_0x479a8e(0x236)[_0x479a8e(0x47d)](_0x14c519,TextManager[_0x479a8e(0x9dc)]),_0x139133=this['isEscapeCommandEnabled']();this[_0x479a8e(0xaf6)](_0x583e66,_0x479a8e(0x9dc),_0x139133);},Window_ActorCommand[_0x553167(0x22b)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x61b)]=function(){const _0x6b9fb8=_0x553167,_0x14b6cc=this[_0x6b9fb8(0xab9)](),_0x32ccb5=VisuMZ[_0x6b9fb8(0x841)]['Settings'][_0x6b9fb8(0xb2b)][_0x6b9fb8(0x2cf)],_0x555e8a=_0x14b6cc==='text'?TextManager[_0x6b9fb8(0x998)]:_0x6b9fb8(0x236)[_0x6b9fb8(0x47d)](_0x32ccb5,TextManager['autoBattle']),_0x144498=this[_0x6b9fb8(0x8b7)]();this[_0x6b9fb8(0xaf6)](_0x555e8a,'autoBattle',_0x144498);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x8b7)]=function(){return!![];},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x709)]=function(){const _0xcb843f=_0x553167;return VisuMZ[_0xcb843f(0x841)][_0xcb843f(0x309)]['ActorCmd'][_0xcb843f(0x896)];},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x2f2)]=function(_0xa74205){const _0x25b0ac=_0x553167,_0x5b0912=this['commandStyleCheck'](_0xa74205);if(_0x5b0912==='iconText')this['drawItemStyleIconText'](_0xa74205);else _0x5b0912==='icon'?this[_0x25b0ac(0xaff)](_0xa74205):Window_Command['prototype']['drawItem'][_0x25b0ac(0x7f7)](this,_0xa74205);this[_0x25b0ac(0x7d8)](_0xa74205);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xab9)]=function(){const _0x653ab9=_0x553167;return VisuMZ[_0x653ab9(0x841)][_0x653ab9(0x309)][_0x653ab9(0xae7)][_0x653ab9(0xabf)];},Window_ActorCommand['prototype'][_0x553167(0x98f)]=function(_0x562964){const _0x3bfb2f=_0x553167;if(_0x562964<0x0)return _0x3bfb2f(0x6fb);const _0x43f764=this[_0x3bfb2f(0xab9)]();if(_0x43f764!==_0x3bfb2f(0x7b1))return _0x43f764;else{if(this[_0x3bfb2f(0xb19)]()>0x0){const _0x4a21f3=this[_0x3bfb2f(0x33c)](_0x562964);if(_0x4a21f3[_0x3bfb2f(0x750)](/\\I\[(\d+)\]/i)){const _0x2c522f=this['itemLineRect'](_0x562964),_0x2ead65=this[_0x3bfb2f(0x39c)](_0x4a21f3)[_0x3bfb2f(0x9ce)];return _0x2ead65<=_0x2c522f['width']?_0x3bfb2f(0x80e):_0x3bfb2f(0x5f2);}}}return _0x3bfb2f(0x6fb);},Window_ActorCommand['prototype'][_0x553167(0x9c1)]=function(_0x31a5b0){const _0x186073=_0x553167,_0x53660b=this[_0x186073(0x9cd)](_0x31a5b0),_0x5e3775=this[_0x186073(0x33c)](_0x31a5b0),_0x5cbae7=this[_0x186073(0x39c)](_0x5e3775)[_0x186073(0x9ce)];this['changePaintOpacity'](this[_0x186073(0x9d9)](_0x31a5b0));const _0x416acf=this[_0x186073(0x709)]();if(_0x416acf===_0x186073(0x7a2))this[_0x186073(0x3cf)](_0x5e3775,_0x53660b['x']+_0x53660b[_0x186073(0x9ce)]-_0x5cbae7,_0x53660b['y'],_0x5cbae7);else{if(_0x416acf===_0x186073(0xa2f)){const _0x449813=_0x53660b['x']+Math[_0x186073(0x66d)]((_0x53660b[_0x186073(0x9ce)]-_0x5cbae7)/0x2);this['drawTextEx'](_0x5e3775,_0x449813,_0x53660b['y'],_0x5cbae7);}else this[_0x186073(0x3cf)](_0x5e3775,_0x53660b['x'],_0x53660b['y'],_0x5cbae7);}},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xaff)]=function(_0x3b0e15){const _0x4b9da9=_0x553167;this[_0x4b9da9(0x33c)](_0x3b0e15)[_0x4b9da9(0x750)](/\\I\[(\d+)\]/i);const _0x277e64=Number(RegExp['$1'])||0x0,_0x472b10=this[_0x4b9da9(0x9cd)](_0x3b0e15),_0x2bf2e9=_0x472b10['x']+Math[_0x4b9da9(0x66d)]((_0x472b10[_0x4b9da9(0x9ce)]-ImageManager['iconWidth'])/0x2),_0xda994=_0x472b10['y']+(_0x472b10['height']-ImageManager['iconHeight'])/0x2;this[_0x4b9da9(0x5ec)](_0x277e64,_0x2bf2e9,_0xda994);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x7d8)]=function(_0x1809e9){const _0x36d974=_0x553167;if(!(VisuMZ['BattleCore'][_0x36d974(0x309)]['ActorCmd'][_0x36d974(0x69b)]??!![]))return;const _0x56c716=this['commandSymbol'](_0x1809e9);if(![_0x36d974(0xa94),_0x36d974(0x6fd),'singleSkill'][_0x36d974(0xb5d)](_0x56c716))return;const _0x491e6c=this[_0x36d974(0x9cd)](_0x1809e9);let _0x43b3b0=null;if(_0x56c716===_0x36d974(0xa94))_0x43b3b0=$dataSkills[this[_0x36d974(0x3d0)]['attackSkillId']()];else _0x56c716===_0x36d974(0x6fd)?_0x43b3b0=$dataSkills[this[_0x36d974(0x3d0)][_0x36d974(0xbf8)]()]:_0x43b3b0=$dataSkills[this[_0x36d974(0x179)][_0x1809e9][_0x36d974(0x871)]];this[_0x36d974(0x2db)](this[_0x36d974(0x3d0)],_0x43b3b0,_0x491e6c['x'],_0x491e6c['y'],_0x491e6c['width']);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x2db)]=function(_0xf8410f,_0x142da5,_0x29a5af,_0x2cfb3b,_0x9d09a7){const _0x46cd22=_0x553167;if(!_0x142da5)return;Imported[_0x46cd22(0x14e)]?Window_Command['prototype']['drawSkillCost'][_0x46cd22(0x7f7)](this,_0xf8410f,_0x142da5,_0x29a5af,_0x2cfb3b,_0x9d09a7):Window_SkillList['prototype'][_0x46cd22(0x2db)][_0x46cd22(0x7f7)](this,_0x142da5,_0x29a5af,_0x2cfb3b,_0x9d09a7);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x447)]=function(){},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x706)]=function(){const _0x102cbb=_0x553167;Window_Command['prototype'][_0x102cbb(0x706)][_0x102cbb(0x7f7)](this);const _0x5949ac=this[_0x102cbb(0x297)]();_0x5949ac===_0x102cbb(0xb17)&&this[_0x102cbb(0x258)]();},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x297)]=function(){const _0x20337f=_0x553167;if(this[_0x20337f(0xb59)])return this[_0x20337f(0xb59)];return this[_0x20337f(0xb59)]=SceneManager[_0x20337f(0xa7f)][_0x20337f(0x297)](),this[_0x20337f(0xb59)];},VisuMZ['BattleCore'][_0x553167(0x149)]=Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x303)],Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x303)]=function(_0x2708d5){const _0x40941d=_0x553167,_0x414c59=this[_0x40941d(0x297)]();if(_0x2708d5&&['xp',_0x40941d(0x7cf)][_0x40941d(0xb5d)](_0x414c59))this['resizeWindowXPStyle'](_0x2708d5);else _0x2708d5&&[_0x40941d(0xb17)][_0x40941d(0xb5d)](_0x414c59)&&(this[_0x40941d(0xa11)](_0x2708d5),this['showHelpWindow']());VisuMZ['BattleCore'][_0x40941d(0x149)][_0x40941d(0x7f7)](this,_0x2708d5),_0x2708d5&&$gameTroop[_0x40941d(0x58e)]()[_0x40941d(0x635)]>0x0&&_0x2708d5[_0x40941d(0x8d6)]()&&_0x2708d5[_0x40941d(0x8d6)]()[_0x40941d(0xbb4)]();},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xb77)]=function(_0x10bcd6){const _0x3f7aa7=_0x553167,_0x4a3219=VisuMZ[_0x3f7aa7(0x841)][_0x3f7aa7(0x309)][_0x3f7aa7(0x4a7)][_0x3f7aa7(0xae8)],_0x5620db=Math[_0x3f7aa7(0x462)](Graphics[_0x3f7aa7(0x5f7)]/0x3),_0x377066=Math['round'](Graphics[_0x3f7aa7(0x5f7)]/$gameParty[_0x3f7aa7(0x22d)]()['length']),_0x22947b=Math[_0x3f7aa7(0x4c1)](Math[_0x3f7aa7(0x6b0)](_0x5620db,_0x377066),_0x4a3219),_0x45661e=this[_0x3f7aa7(0x8b6)](VisuMZ['BattleCore'][_0x3f7aa7(0x309)]['BattleLayout'][_0x3f7aa7(0x124)]),_0x58b20b=Math[_0x3f7aa7(0x66d)]((Graphics['boxWidth']-Graphics[_0x3f7aa7(0x9ce)])/0x2),_0x4b011a=Graphics[_0x3f7aa7(0x5f7)]-_0x58b20b,_0x3fc886=(Math['round'](_0x377066*_0x10bcd6[_0x3f7aa7(0x8ab)]())+Math[_0x3f7aa7(0x462)]((_0x377066-_0x22947b)/0x2))[_0x3f7aa7(0xabe)](_0x58b20b,_0x4b011a-_0x22947b),_0x571872=Math['round'](SceneManager['_scene'][_0x3f7aa7(0xa6f)]['y']-_0x45661e);this[_0x3f7aa7(0x65e)](_0x3fc886,_0x571872,_0x22947b,_0x45661e),this['createContents'](),this[_0x3f7aa7(0x785)](0x1);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xa11)]=function(_0x7cfd61){const _0x368638=_0x553167,_0x2a1afb=SceneManager[_0x368638(0xa7f)][_0x368638(0xa85)]();this[_0x368638(0x65e)](_0x2a1afb['x'],_0x2a1afb['y'],_0x2a1afb[_0x368638(0x9ce)],_0x2a1afb['height']),this['createContents'](),this[_0x368638(0x785)](0x0);},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0xb68)]=function(){const _0x2642bc=_0x553167;if(this[_0x2642bc(0x7d5)]){const _0x3bd74f=this[_0x2642bc(0x7d5)][_0x2642bc(0xa3a)],_0x33a3ff=this[_0x2642bc(0x9ce)]-0x8,_0x5c9299=this[_0x2642bc(0x908)],_0x40d152=this['padding'],_0x2a9736=ColorManager[_0x2642bc(0x37f)](),_0x35c1de=ColorManager['dimColor2']();this['_dimmerSprite']['x']=0x4,_0x3bd74f[_0x2642bc(0x83d)](_0x33a3ff,_0x5c9299),_0x3bd74f[_0x2642bc(0x118)](0x0,0x0,_0x33a3ff,_0x40d152,_0x35c1de,_0x2a9736,!![]),_0x3bd74f[_0x2642bc(0x5ee)](0x0,_0x40d152,_0x33a3ff,_0x5c9299-_0x40d152*0x2,_0x2a9736),_0x3bd74f[_0x2642bc(0x118)](0x0,_0x5c9299-_0x40d152,_0x33a3ff,_0x40d152,_0x2a9736,_0x35c1de,!![]),this[_0x2642bc(0x7d5)][_0x2642bc(0x51e)](0x0,0x0,_0x33a3ff,_0x5c9299);}},Window_ActorCommand[_0x553167(0x22b)]['updateHelp']=function(){const _0x4eba5b=_0x553167;if(!this[_0x4eba5b(0x3d0)])return;const _0x3393c5=VisuMZ[_0x4eba5b(0x841)][_0x4eba5b(0x309)][_0x4eba5b(0xae7)],_0x4dfba8=this[_0x4eba5b(0x294)]();switch(_0x4dfba8){case _0x4eba5b(0xa94):this[_0x4eba5b(0x6df)]($dataSkills[this[_0x4eba5b(0x3d0)][_0x4eba5b(0xb2e)]()]);break;case _0x4eba5b(0x6fd):this[_0x4eba5b(0x6df)]($dataSkills[this[_0x4eba5b(0x3d0)][_0x4eba5b(0xbf8)]()]);break;case _0x4eba5b(0x8b0):const _0x30ad94=_0x3393c5[_0x4eba5b(0x45d)],_0x59cdbc=_0x30ad94['format']($dataSystem[_0x4eba5b(0xbca)][this['currentExt']()]);this[_0x4eba5b(0x2c1)]['setText'](_0x59cdbc);break;case _0x4eba5b(0x359):this['setHelpWindowItem']($dataSkills[this[_0x4eba5b(0x5dd)]()]);break;case _0x4eba5b(0x58c):this['_helpWindow'][_0x4eba5b(0x608)](_0x3393c5['HelpItem']);break;case _0x4eba5b(0x9dc):this[_0x4eba5b(0x2c1)][_0x4eba5b(0x608)](_0x3393c5['HelpEscape']);break;case _0x4eba5b(0x998):this[_0x4eba5b(0x2c1)][_0x4eba5b(0x608)](_0x3393c5[_0x4eba5b(0xa35)]);break;case _0x4eba5b(0x786):this['_helpWindow'][_0x4eba5b(0x608)](Window_InBattleStatus[_0x4eba5b(0x511)][_0x4eba5b(0xbf4)]);break;default:this['_helpWindow']['setText']('');break;}},Window_ActorCommand[_0x553167(0x22b)][_0x553167(0x71e)]=function(){const _0x296852=_0x553167;this[_0x296852(0xbb6)](0x0);if(this[_0x296852(0x3d0)]&&ConfigManager['commandRemember']){const _0x23bad8=this[_0x296852(0x3d0)][_0x296852(0x7f6)]();this[_0x296852(0x8a3)](_0x23bad8);if(_0x23bad8===_0x296852(0x8b0)){const _0x185a43=this[_0x296852(0x3d0)]['lastBattleSkill']();if(_0x185a43){const _0x577a76=this['findSymbolExt'](_0x296852(0x8b0),_0x185a43[_0x296852(0xa7e)]);this[_0x296852(0x677)](_0x577a76||0x0);}}else{if(_0x23bad8==='singleSkill'){const _0x2a40f9=this[_0x296852(0x3d0)]['lastBattleSkill']();if(_0x2a40f9){const _0x22021d=this['findSymbolExt'](_0x296852(0x359),_0x2a40f9['id']);this[_0x296852(0x677)](_0x22021d||0x0);}}}}},Window_ActorCommand['prototype'][_0x553167(0x74c)]=function(_0x51d347,_0x4c3814){const _0x487f43=_0x553167;return this[_0x487f43(0x179)][_0x487f43(0x318)](_0x47b707=>_0x47b707['symbol']===_0x51d347&&_0x47b707[_0x487f43(0x871)]===_0x4c3814);},VisuMZ['BattleCore'][_0x553167(0x4f9)]=Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x7a1)],Window_BattleStatus['prototype'][_0x553167(0x7a1)]=function(_0x496a2f){const _0x1628ea=_0x553167;VisuMZ[_0x1628ea(0x841)][_0x1628ea(0x4f9)][_0x1628ea(0x7f7)](this,_0x496a2f),this[_0x1628ea(0x8e8)](),this['createAttachmentSprites']();},Window_BattleStatus['prototype'][_0x553167(0x297)]=function(){const _0x308acc=_0x553167;if(this['_battleLayoutStyle'])return this[_0x308acc(0xb59)];return this[_0x308acc(0xb59)]=SceneManager[_0x308acc(0xa7f)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x515fe7=_0x553167;this['frameVisible']=this[_0x515fe7(0x510)]();const _0x51c3b9=VisuMZ[_0x515fe7(0x841)]['Settings'][_0x515fe7(0x4a7)];_0x51c3b9[_0x515fe7(0x9cc)]&&(this[_0x515fe7(0x25b)]=0x0);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x510)]=function(){const _0x3f8348=_0x553167,_0x5aa84e=VisuMZ[_0x3f8348(0x841)][_0x3f8348(0x309)]['BattleLayout'];if(_0x5aa84e[_0x3f8348(0x465)])return!![];const _0x335268=this['battleLayoutStyle']();switch(_0x335268){case _0x3f8348(0x5d3):case _0x3f8348(0xb17):return!![];break;case _0x3f8348(0x734):case'xp':case _0x3f8348(0x7cf):default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x14a771=_0x553167;return this[_0x14a771(0x510)]()?0x0:0xa;},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x590)]=function(){const _0x4e5991=_0x553167,_0x1f0620=this[_0x4e5991(0x297)]();switch(_0x1f0620){case'list':return 0x1;break;case'xp':case'portrait':return $gameParty[_0x4e5991(0x22d)]()[_0x4e5991(0x635)];break;case _0x4e5991(0x734):default:return $gameParty[_0x4e5991(0x762)]();break;}},Window_BattleStatus['prototype'][_0x553167(0x255)]=function(){const _0x15e752=_0x553167,_0x44ea9d=this['battleLayoutStyle']();switch(_0x44ea9d){case _0x15e752(0x5d3):return Window_StatusBase[_0x15e752(0x22b)][_0x15e752(0x255)][_0x15e752(0x7f7)](this);break;case _0x15e752(0x734):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x553167(0x27c)]=function(){const _0x5e2113=_0x553167,_0x2276ce=this[_0x5e2113(0x297)]();switch(_0x2276ce){case _0x5e2113(0x5d3):return Window_StatusBase[_0x5e2113(0x22b)][_0x5e2113(0x27c)]['call'](this);break;case _0x5e2113(0x734):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x553167(0x22b)]['updatePadding']=function(){const _0x4bb2d3=_0x553167;this[_0x4bb2d3(0x510)]()?Window_StatusBase['prototype'][_0x4bb2d3(0x737)][_0x4bb2d3(0x7f7)](this):this['padding']=0x8;},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x7bd)]=function(){const _0x3aa24c=_0x553167,_0x260814=VisuMZ[_0x3aa24c(0x841)][_0x3aa24c(0x309)][_0x3aa24c(0x4a7)];_0x260814['StatusWindowSkinFilename']?this[_0x3aa24c(0xb4b)]=ImageManager['loadSystem'](_0x260814[_0x3aa24c(0x465)]):Window_StatusBase[_0x3aa24c(0x22b)]['loadWindowskin'][_0x3aa24c(0x7f7)](this);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x12b)]=function(_0x215816){const _0x4e416d=_0x553167,_0x3146ae=VisuMZ['BattleCore'][_0x4e416d(0x309)][_0x4e416d(0x4a7)];if(_0x3146ae[_0x4e416d(0x81e)])return;Window_StatusBase['prototype'][_0x4e416d(0x12b)][_0x4e416d(0x7f7)](this,_0x215816);},Window_BattleStatus['prototype'][_0x553167(0x195)]=function(){const _0x2a3e74=_0x553167;this[_0x2a3e74(0x86a)]=!![];},Window_BattleStatus[_0x553167(0x22b)]['update']=function(){const _0x552bd3=_0x553167;Window_StatusBase['prototype']['update'][_0x552bd3(0x7f7)](this),this['updateRefresh'](),this[_0x552bd3(0x993)]();if(this['battleLayoutStyle']()==='border')this[_0x552bd3(0x7ae)]();},Window_BattleStatus['prototype'][_0x553167(0x764)]=function(){const _0x44ec53=_0x553167;if($gameTemp[_0x44ec53(0x22c)]())this[_0x44ec53(0x6ed)](),this['_requestRefresh']=![],$gameTemp['clearBattleRefreshRequest']();else this['_requestRefresh']&&(this[_0x44ec53(0x86a)]=![],this[_0x44ec53(0x215)](),this['updateAttachmentSprites']());},Window_BattleStatus['prototype'][_0x553167(0x8b8)]=function(){const _0x1ae1c3=_0x553167;Window_StatusBase['prototype'][_0x1ae1c3(0x8b8)][_0x1ae1c3(0x7f7)](this);if(!$gameSystem[_0x1ae1c3(0x196)]())this[_0x1ae1c3(0x215)]();},Window_BattleStatus['prototype'][_0x553167(0x447)]=function(){const _0x56752d=_0x553167;if(this[_0x56752d(0x589)]===Window_BattleStatus)return;Window_StatusBase[_0x56752d(0x22b)][_0x56752d(0x447)][_0x56752d(0x7f7)](this);},Window_BattleStatus['prototype'][_0x553167(0x70f)]=function(_0x3246e6){const _0x3a8bdc=_0x553167,_0x44da46=this[_0x3a8bdc(0x297)]();switch(_0x44da46){case'xp':case'portrait':break;case _0x3a8bdc(0x734):case _0x3a8bdc(0x5d3):case'border':default:return Window_StatusBase[_0x3a8bdc(0x22b)][_0x3a8bdc(0x70f)][_0x3a8bdc(0x7f7)](this,_0x3246e6);break;}},VisuMZ[_0x553167(0x841)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus['prototype'][_0x553167(0x3a7)],Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x3a7)]=function(_0x4c8c22){const _0x33c610=_0x553167,_0x34e45b=this[_0x33c610(0x297)]();switch(_0x34e45b){case _0x33c610(0x5d3):this[_0x33c610(0x5b6)](_0x4c8c22);break;case'xp':this[_0x33c610(0x520)](_0x4c8c22);break;case _0x33c610(0x7cf):this[_0x33c610(0x1f1)](_0x4c8c22);break;case _0x33c610(0x734):case _0x33c610(0xb17):default:VisuMZ[_0x33c610(0x841)][_0x33c610(0x296)][_0x33c610(0x7f7)](this,_0x4c8c22);break;}},Window_BattleStatus[_0x553167(0x22b)]['drawItemStatus']=function(_0x1a43bc){const _0x27af63=_0x553167,_0x352df6=this[_0x27af63(0x297)]();if(!$gameSystem[_0x27af63(0x196)]())this['centerFrontViewSprite'](_0x1a43bc);switch(_0x352df6){case _0x27af63(0x5d3):this[_0x27af63(0x7e5)](_0x1a43bc);break;case'xp':case'portrait':case'default':case _0x27af63(0xb17):default:this['drawItemStatusXPStyle'](_0x1a43bc);break;}},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x46a)]=function(){const _0x36d173=_0x553167,_0x2feee3=this[_0x36d173(0x297)]();if(['xp']['includes'](_0x2feee3)&&!$gameSystem[_0x36d173(0x196)]()){this[_0x36d173(0xa9a)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x36d173(0x22b)][_0x36d173(0x46a)][_0x36d173(0x7f7)](this);},Window_BattleStatus['prototype'][_0x553167(0x9e1)]=function(_0x304237){const _0xa97aac=_0x553167,_0x372734=this[_0xa97aac(0xaa9)](_0x304237)[_0xa97aac(0x8d6)]();if(!_0x372734)return;const _0x44f5e3=this['battleLayoutStyle'](),_0x42aeec=this[_0xa97aac(0x4e2)](_0x304237);let _0x43f6d5=Math['round'](_0x42aeec['x']+_0x42aeec['width']/0x2)+this[_0xa97aac(0xb8d)];[_0xa97aac(0x5d3)][_0xa97aac(0xb5d)](_0x44f5e3)&&(_0x43f6d5=_0x42aeec[_0xa97aac(0x9ce)]/$gameParty[_0xa97aac(0x22d)]()[_0xa97aac(0x635)],_0x43f6d5*=_0x304237,_0x43f6d5+=_0x42aeec[_0xa97aac(0x9ce)]/$gameParty[_0xa97aac(0x22d)]()[_0xa97aac(0x635)]/0x2);let _0x29788d=Math[_0xa97aac(0x462)](this[_0xa97aac(0x406)](_0x304237,_0x372734,_0x42aeec));_0x372734[_0xa97aac(0x24b)](_0x43f6d5,_0x29788d),this[_0xa97aac(0x667)](_0x372734,0x1),_0x372734[_0xa97aac(0x8b8)](),this['updateEffectsContainer'](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x406)]=function(_0x3e8207,_0x53d3a6,_0x569540){const _0x27efb5=_0x553167,_0x3baa28=VisuMZ[_0x27efb5(0x841)][_0x27efb5(0x309)][_0x27efb5(0x4a7)],_0x1d9721=this[_0x27efb5(0x297)]();if(_0x1d9721==='xp'){const _0x166c96=_0x3baa28[_0x27efb5(0xb6b)];switch(_0x166c96[_0x27efb5(0xb3c)]()[_0x27efb5(0x976)]()){case'bottom':return _0x569540[_0x27efb5(0x908)]-_0x53d3a6[_0x27efb5(0x85f)][_0x27efb5(0x908)]/0x4;break;case _0x27efb5(0xa2f):const _0x215a9e=_0x3baa28[_0x27efb5(0x671)];return(_0x569540['height']+(_0x53d3a6[_0x27efb5(0x908)]||_0x215a9e))/0x2;break;case _0x27efb5(0xaad):return 0x0;case'name':default:return this[_0x27efb5(0x295)](_0x569540);break;}}else{if(_0x1d9721==='portrait'){}}return _0x53d3a6[_0x27efb5(0x908)];},Sprite_Name['prototype']['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x553167(0x22b)][_0x553167(0x7ed)]=function(){const _0x53cd4e=_0x553167,_0x5ebe77=this['name'](),_0x5f519d=this['bitmapWidth'](),_0x5935af=this[_0x53cd4e(0xb06)]();this[_0x53cd4e(0x48f)](),this[_0x53cd4e(0xa3a)]['clear'](),this[_0x53cd4e(0xa3a)][_0x53cd4e(0x128)](_0x5ebe77,0x4,0x0,_0x5f519d,_0x5935af,'left');},Bitmap['prototype'][_0x553167(0x128)]=function(_0x32f966,_0x394ca4,_0x41bf92,_0x3f81ee,_0x425306,_0x3cc088){const _0xc02f4b=_0x553167;TextManager[_0xc02f4b(0x63f)]&&(_0x32f966=TextManager[_0xc02f4b(0x63f)](_0x32f966));const _0x3a4262=this[_0xc02f4b(0x1ff)],_0x5365b8=_0x3a4262[_0xc02f4b(0x487)];_0x3f81ee=_0x3f81ee||0xffffffff;let _0x1541c4=_0x394ca4,_0x53c52b=Math['round'](_0x41bf92+0x18/0x2+this[_0xc02f4b(0x326)]*0.35);_0x3cc088===_0xc02f4b(0xa2f)&&(_0x1541c4+=_0x3f81ee/0x2),_0x3cc088===_0xc02f4b(0x7a2)&&(_0x1541c4+=_0x3f81ee),_0x3a4262['save'](),_0x3a4262[_0xc02f4b(0x82b)]=this['_makeFontNameText'](),_0x3a4262[_0xc02f4b(0x656)]=_0x3cc088,_0x3a4262[_0xc02f4b(0x4de)]=_0xc02f4b(0x8c3),_0x3a4262['globalAlpha']=0x1,this[_0xc02f4b(0x55a)](_0x32f966,_0x1541c4,_0x53c52b,_0x3f81ee),_0x3a4262[_0xc02f4b(0x487)]=_0x5365b8,this[_0xc02f4b(0x8a4)](_0x32f966,_0x1541c4,_0x53c52b,_0x3f81ee),_0x3a4262[_0xc02f4b(0xadb)](),this[_0xc02f4b(0x3f9)][_0xc02f4b(0xbcd)]();},Window_BattleStatus[_0x553167(0x22b)]['nameY']=function(_0x36d4cf){const _0x367bac=_0x553167;return this[_0x367bac(0xbb3)](_0x36d4cf)-this[_0x367bac(0x817)]();},Window_BattleStatus[_0x553167(0x22b)]['drawItemImageListStyle']=function(_0x1fb467){const _0x1ada8c=_0x553167;if(!VisuMZ[_0x1ada8c(0x841)][_0x1ada8c(0x309)]['BattleLayout']['ShowFacesListStyle'])return;const _0x2ad240=this[_0x1ada8c(0xaa9)](_0x1fb467),_0x33ce56=this['itemRect'](_0x1fb467);_0x33ce56[_0x1ada8c(0x9ce)]=ImageManager[_0x1ada8c(0x996)],_0x33ce56[_0x1ada8c(0x908)]-=0x2,this[_0x1ada8c(0x36e)](_0x2ad240,_0x33ce56['x']+0x1,_0x33ce56['y']+0x1,_0x33ce56['width'],_0x33ce56['height']);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x7e5)]=function(_0x516102){const _0x2e8919=_0x553167,_0x23fa92=VisuMZ['BattleCore'][_0x2e8919(0x309)][_0x2e8919(0x4a7)],_0x5b1427=$dataSystem[_0x2e8919(0x983)]?0x4:0x3,_0x245ca1=_0x5b1427*0x80+(_0x5b1427-0x1)*0x8+0x4,_0x23b275=this[_0x2e8919(0xaa9)](_0x516102),_0x1ba208=this[_0x2e8919(0x4e2)](_0x516102);let _0x405fb4=_0x1ba208['x']+this['padding'];_0x23fa92['ShowFacesListStyle']?_0x405fb4=_0x1ba208['x']+ImageManager[_0x2e8919(0x996)]+0x8:_0x405fb4+=ImageManager['iconWidth'];const _0x38d990=Math[_0x2e8919(0x462)](Math[_0x2e8919(0x6b0)](_0x1ba208['x']+_0x1ba208[_0x2e8919(0x9ce)]-_0x245ca1,_0x405fb4)),_0x197f34=Math[_0x2e8919(0x462)](_0x1ba208['y']+(_0x1ba208[_0x2e8919(0x908)]-Sprite_Name[_0x2e8919(0x22b)][_0x2e8919(0xb06)]())/0x2),_0x423a13=Math[_0x2e8919(0x462)](_0x38d990-ImageManager[_0x2e8919(0x5e3)]/0x2-0x4),_0x3462c8=Math[_0x2e8919(0x462)](_0x1ba208['y']+(_0x1ba208[_0x2e8919(0x908)]-ImageManager[_0x2e8919(0x837)])/0x2+ImageManager['iconHeight']/0x2);let _0x20df2f=_0x38d990+0x88;const _0x32993a=_0x197f34;this['placeTimeGauge'](_0x23b275,_0x38d990-0x4+(_0x23fa92[_0x2e8919(0x720)]||0x0),_0x197f34+(_0x23fa92[_0x2e8919(0x11c)]||0x0)),this[_0x2e8919(0x1b6)](_0x23b275,_0x38d990+(_0x23fa92[_0x2e8919(0x9d4)]||0x0),_0x197f34+(_0x23fa92[_0x2e8919(0x305)]||0x0)),this[_0x2e8919(0xa2b)](_0x23b275,_0x423a13+(_0x23fa92[_0x2e8919(0x9bf)]||0x0),_0x3462c8+(_0x23fa92[_0x2e8919(0x78c)]||0x0)),this[_0x2e8919(0xa07)](_0x23b275,'hp',_0x20df2f+0x88*0x0+(_0x23fa92[_0x2e8919(0x91d)]||0x0),_0x32993a+(_0x23fa92[_0x2e8919(0x543)]||0x0)),this['placeGauge'](_0x23b275,'mp',_0x20df2f+0x88*0x1+(_0x23fa92[_0x2e8919(0x1c9)]||0x0),_0x32993a+(_0x23fa92[_0x2e8919(0x2eb)]||0x0)),$dataSystem[_0x2e8919(0x983)]&&this[_0x2e8919(0xa07)](_0x23b275,'tp',_0x20df2f+0x88*0x2+(_0x23fa92[_0x2e8919(0x4e3)]||0x0),_0x32993a+(_0x23fa92[_0x2e8919(0xa55)]||0x0));},Window_BattleStatus[_0x553167(0x22b)]['drawItemImageXPStyle']=function(_0x1303ca){const _0x4056d4=_0x553167;if(!$gameSystem[_0x4056d4(0x196)]())return;VisuMZ[_0x4056d4(0x841)][_0x4056d4(0x296)][_0x4056d4(0x7f7)](this,_0x1303ca);},Window_BattleStatus[_0x553167(0x22b)]['drawItemStatusXPStyle']=function(_0x5cd76c){const _0x241a44=_0x553167,_0x1bfe66=VisuMZ[_0x241a44(0x841)]['Settings'][_0x241a44(0x4a7)],_0xa5e80=this[_0x241a44(0xaa9)](_0x5cd76c),_0x1eac19=this['itemRect'](_0x5cd76c),_0x4cbe62=Math[_0x241a44(0x462)](_0x1eac19['x']+(_0x1eac19[_0x241a44(0x9ce)]-0x80)/0x2),_0x1fd295=this[_0x241a44(0x295)](_0x1eac19);let _0x46a0a6=_0x4cbe62-ImageManager[_0x241a44(0x5e3)]/0x2-0x4,_0x247920=_0x1fd295+ImageManager[_0x241a44(0x837)]/0x2;_0x46a0a6-ImageManager[_0x241a44(0x5e3)]/0x2<_0x1eac19['x']&&(_0x46a0a6=_0x4cbe62+ImageManager[_0x241a44(0x5e3)]/0x2-0x4,_0x247920=_0x1fd295-ImageManager[_0x241a44(0x837)]/0x2);const _0x36c9c0=_0x4cbe62,_0x36d093=this[_0x241a44(0xbb3)](_0x1eac19);this[_0x241a44(0x7a6)](_0xa5e80,_0x4cbe62+(_0x1bfe66[_0x241a44(0x720)]||0x0),_0x1fd295+(_0x1bfe66[_0x241a44(0x11c)]||0x0)),this[_0x241a44(0x1b6)](_0xa5e80,_0x4cbe62+(_0x1bfe66[_0x241a44(0x9d4)]||0x0),_0x1fd295+(_0x1bfe66[_0x241a44(0x305)]||0x0)),this['placeStateIcon'](_0xa5e80,_0x46a0a6+(_0x1bfe66[_0x241a44(0x9bf)]||0x0),_0x247920+(_0x1bfe66[_0x241a44(0x78c)]||0x0)),this[_0x241a44(0xa07)](_0xa5e80,'hp',_0x36c9c0+(_0x1bfe66[_0x241a44(0x91d)]||0x0),_0x36d093+(_0x1bfe66['HpGaugeOffsetY']||0x0)),this[_0x241a44(0xa07)](_0xa5e80,'mp',_0x36c9c0+(_0x1bfe66[_0x241a44(0x1c9)]||0x0),_0x36d093+this['gaugeLineHeight']()+(_0x1bfe66[_0x241a44(0x2eb)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x241a44(0xa07)](_0xa5e80,'tp',_0x36c9c0+(_0x1bfe66[_0x241a44(0x4e3)]||0x0),_0x36d093+this[_0x241a44(0x817)]()*0x2+(_0x1bfe66[_0x241a44(0xa55)]||0x0));},Window_BattleStatus[_0x553167(0x22b)]['showPortraits']=function(_0x250e5d){const _0x4eeb0d=_0x553167;if(!VisuMZ['BattleCore'][_0x4eeb0d(0x309)][_0x4eeb0d(0x4a7)]['ShowPortraits'])return![];if(_0x250e5d[_0x4eeb0d(0x9d5)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x250e5d[_0x4eeb0d(0x1ce)]();},Game_Actor[_0x553167(0x22b)]['getBattlePortraitOffsetX']=function(){const _0x122fbe=_0x553167;if(this[_0x122fbe(0xaa9)]()[_0x122fbe(0x645)][_0x122fbe(0x750)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x122fbe(0x645)][_0x122fbe(0x750)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor['prototype']['getBattlePortraitOffsetY']=function(){const _0x3b56b7=_0x553167;if(this[_0x3b56b7(0xaa9)]()[_0x3b56b7(0x645)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x3b56b7(0x645)][_0x3b56b7(0x750)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x1f1)]=function(_0x129bba){const _0x341ea0=_0x553167,_0x1917f4=this[_0x341ea0(0xaa9)](_0x129bba);if(this[_0x341ea0(0x768)](_0x1917f4)){const _0x1b5dfe=_0x341ea0(0x416)['format'](_0x1917f4[_0x341ea0(0x537)]()),_0x235cea=this[_0x341ea0(0x85b)](_0x1b5dfe,Sprite),_0x28c927=_0x1917f4[_0x341ea0(0xa2d)]();_0x28c927!==''?_0x235cea[_0x341ea0(0xa3a)]=ImageManager[_0x341ea0(0xa74)](_0x28c927):_0x235cea[_0x341ea0(0xa3a)]=ImageManager['_emptyBitmap'];const _0x2e605d=this[_0x341ea0(0x4e2)](_0x129bba);_0x235cea[_0x341ea0(0x9f3)]['x']=0.5,_0x235cea[_0x341ea0(0x9f3)]['y']=0x1;let _0x468e63=Math[_0x341ea0(0x462)](_0x2e605d['x']+_0x2e605d['width']/0x2)+this[_0x341ea0(0xb8d)];_0x468e63+=_0x1917f4['getBattlePortraitOffsetX']();let _0x50abbf=Math[_0x341ea0(0x462)](this['height']);_0x50abbf+=_0x1917f4['getBattlePortraitOffsetY'](),_0x235cea['move'](_0x468e63,_0x50abbf);const _0x319d07=VisuMZ['BattleCore']['Settings'][_0x341ea0(0x4a7)][_0x341ea0(0xaaa)];_0x235cea[_0x341ea0(0xb03)]['x']=_0x319d07,_0x235cea[_0x341ea0(0xb03)]['y']=_0x319d07,_0x235cea['show']();}else{const _0x486b84=this[_0x341ea0(0x341)](_0x129bba);this[_0x341ea0(0x36e)](_0x1917f4,_0x486b84['x'],_0x486b84['y'],_0x486b84['width'],_0x486b84[_0x341ea0(0x908)]);}},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x85b)]=function(_0x44fa5e,_0x5374b6){const _0x1f7cb9=_0x553167,_0xd39efd=this['_additionalSprites'];if(_0xd39efd[_0x44fa5e])return _0xd39efd[_0x44fa5e];else{const _0x381a91=new _0x5374b6();return _0xd39efd[_0x44fa5e]=_0x381a91,this['addChildToBack'](_0x381a91),this[_0x1f7cb9(0x6a2)](this[_0x1f7cb9(0x197)]),_0x381a91;}},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x27d)]=function(){const _0x35bd71=_0x553167;this[_0x35bd71(0x338)](),this[_0x35bd71(0xc01)](),Window_StatusBase[_0x35bd71(0x22b)][_0x35bd71(0x27d)][_0x35bd71(0x7f7)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x338)]=function(){const _0x26c943=_0x553167;this[_0x26c943(0x197)]=new Sprite(),this[_0x26c943(0x197)][_0x26c943(0xaac)]=[new PIXI[(_0x26c943(0xaac))][(_0x26c943(0x746))]()],this[_0x26c943(0x197)]['filterArea']=new Rectangle(),this[_0x26c943(0x197)][_0x26c943(0x65e)](this[_0x26c943(0x941)],this['_padding']),this[_0x26c943(0xbd9)](this['_cursorArea']);},Window_BattleStatus['prototype'][_0x553167(0xc01)]=function(){const _0x59a8f1=_0x553167;this[_0x59a8f1(0x2a4)]=new Sprite(),this[_0x59a8f1(0xbd9)](this[_0x59a8f1(0x2a4)]);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0xbbf)]=function(){const _0x3dcdff=_0x553167;this['_effectsContainer']&&this[_0x3dcdff(0xbd9)](this['_effectsContainer']);},Window_BattleStatus[_0x553167(0x22b)]['_createDamageContainer']=function(){const _0x4eb013=_0x553167;this[_0x4eb013(0x2c5)]=new Sprite(),this[_0x4eb013(0xbd9)](this[_0x4eb013(0x2c5)]);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x36a)]=function(){const _0x3294a0=_0x553167;this[_0x3294a0(0x108)]=new Sprite();for(let _0x282282=0x0;_0x282282<0x9;_0x282282++){this[_0x3294a0(0x108)][_0x3294a0(0xbd9)](new Sprite());}this[_0x3294a0(0x197)][_0x3294a0(0xbd9)](this['_cursorSprite']);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x2bf)]=function(){const _0xee371c=_0x553167;Window_StatusBase[_0xee371c(0x22b)][_0xee371c(0x2bf)][_0xee371c(0x7f7)](this),this[_0xee371c(0x9b2)]();},Window_BattleStatus['prototype'][_0x553167(0x9b2)]=function(){const _0x1f19a8=_0x553167,_0x264328=this['_padding'];this['_cursorArea'][_0x1f19a8(0x65e)](_0x264328,_0x264328),this[_0x1f19a8(0x197)]['x']=_0x264328-this[_0x1f19a8(0x322)]['x'],this[_0x1f19a8(0x197)]['y']=_0x264328-this[_0x1f19a8(0x322)]['y'],this[_0x1f19a8(0x5f5)]>0x0&&this[_0x1f19a8(0x6cb)]>0x0?this[_0x1f19a8(0x197)][_0x1f19a8(0x743)]=this[_0x1f19a8(0x9af)]():this[_0x1f19a8(0x197)][_0x1f19a8(0x743)]=![];},Window_BattleStatus[_0x553167(0x22b)]['_updateFilterArea']=function(){const _0x25ce4e=_0x553167;Window_StatusBase[_0x25ce4e(0x22b)][_0x25ce4e(0x536)][_0x25ce4e(0x7f7)](this),this[_0x25ce4e(0x8e1)]();},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x8e1)]=function(){const _0xb935b2=_0x553167,_0x5da335=this[_0xb935b2(0x197)][_0xb935b2(0x42a)][_0xb935b2(0x980)](new Point(0x0,0x0)),_0x561edb=this[_0xb935b2(0x197)][_0xb935b2(0x28d)];_0x561edb['x']=_0x5da335['x']+this[_0xb935b2(0x322)]['x'],_0x561edb['y']=_0x5da335['y']+this[_0xb935b2(0x322)]['y'],_0x561edb['width']=this['innerWidth'],_0x561edb[_0xb935b2(0x908)]=this[_0xb935b2(0x6cb)];},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x4b9)]=function(_0x1c868b){const _0x3014cc=_0x553167;if(this['battleLayoutStyle']()!==_0x3014cc(0x7cf))return;this[_0x3014cc(0x1f1)](_0x1c868b[_0x3014cc(0x8ab)]());},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x280)]=function(_0x1351a3,_0x3be3e7){const _0x4918f2=_0x553167;if(!this[_0x4918f2(0x2c5)])return;if(!_0x1351a3)return;if(!_0x3be3e7)return;const _0xa2cb96=this['itemRect'](_0x3be3e7[_0x4918f2(0x8ab)]());_0xa2cb96['x']+=_0xa2cb96[_0x4918f2(0x9ce)]/0x2+this['padding'],_0x1351a3['x']=_0xa2cb96['x'],_0x1351a3['y']=_0xa2cb96['y'],this[_0x4918f2(0x2c5)]['addChild'](_0x1351a3);},Window_BattleStatus['prototype'][_0x553167(0x2a9)]=function(_0x103c9e){const _0x51ade9=_0x553167;if(!this[_0x51ade9(0x2c5)])return;if(!_0x103c9e)return;this[_0x51ade9(0x2c5)][_0x51ade9(0x588)](_0x103c9e);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x7ae)]=function(){const _0x3ccea9=_0x553167;if(!this[_0x3ccea9(0x933)]())return;if(!this['_borderPortraitSprite'])this[_0x3ccea9(0xba7)]();this['prepareBorderActor'](),this[_0x3ccea9(0x7de)]();},Window_BattleStatus[_0x553167(0x22b)]['isBorderStylePortraitShown']=function(){const _0x2b6b30=_0x553167;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x2b6b30(0x2c2)]())return![];return VisuMZ['BattleCore']['Settings'][_0x2b6b30(0x4a7)][_0x2b6b30(0x6e6)];},Window_BattleStatus['prototype']['createBorderStylePortraitSprite']=function(){const _0x1ba8aa=_0x553167;this[_0x1ba8aa(0x19a)]=new Sprite();const _0x59f4d0=SceneManager[_0x1ba8aa(0xa7f)],_0x37194e=_0x59f4d0[_0x1ba8aa(0xa39)][_0x1ba8aa(0x163)](_0x59f4d0['_windowLayer']);_0x59f4d0[_0x1ba8aa(0x667)](this[_0x1ba8aa(0x19a)],_0x37194e),this[_0x1ba8aa(0x19a)][_0x1ba8aa(0x9f3)]['x']=0.5,this['_borderPortraitSprite']['anchor']['y']=0x1;const _0x37a64c=VisuMZ['BattleCore'][_0x1ba8aa(0x309)][_0x1ba8aa(0x4a7)]['PortraitScaleBorderStyle'];this['_borderPortraitSprite'][_0x1ba8aa(0xb03)]['x']=_0x37a64c,this['_borderPortraitSprite'][_0x1ba8aa(0xb03)]['y']=_0x37a64c,this[_0x1ba8aa(0x19a)]['y']=this['y']+this[_0x1ba8aa(0x908)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0xf9)]=function(){const _0x36edaa=_0x553167;return BattleManager[_0x36edaa(0x70d)]();},Window_BattleStatus[_0x553167(0x22b)]['prepareBorderActor']=function(){const _0x3b5a1e=_0x553167;this[_0x3b5a1e(0x19a)][_0x3b5a1e(0x743)]=this[_0x3b5a1e(0xf9)]();const _0x467ff3=BattleManager[_0x3b5a1e(0xaa9)](),_0x330896=_0x467ff3?_0x467ff3[_0x3b5a1e(0xa2d)]()||'':'';if(_0x467ff3===this[_0x3b5a1e(0x19a)][_0x3b5a1e(0xaa9)]&&_0x330896===this[_0x3b5a1e(0x19a)][_0x3b5a1e(0xbc0)])return;this[_0x3b5a1e(0x19a)]['actor']=_0x467ff3||this[_0x3b5a1e(0x19a)]['actor'],this[_0x3b5a1e(0x19a)][_0x3b5a1e(0xbc0)]=_0x330896;if(!_0x467ff3)return;else{if(_0x330896===''){this[_0x3b5a1e(0x19a)]['bitmap']=ImageManager[_0x3b5a1e(0x957)],this[_0x3b5a1e(0x19a)]['lastFilename']='';return;}else{const _0x3c1fc9=ImageManager[_0x3b5a1e(0xa74)](_0x330896);this['_borderPortraitSprite'][_0x3b5a1e(0x25b)]=0x0,_0x3c1fc9[_0x3b5a1e(0x411)](this[_0x3b5a1e(0x56c)][_0x3b5a1e(0x161)](this,_0x3c1fc9));}}},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x56c)]=function(_0x1af49b){const _0x5399d1=_0x553167;this['_borderPortraitDuration']=0x14,this[_0x5399d1(0x19a)][_0x5399d1(0xa3a)]=_0x1af49b;SceneManager[_0x5399d1(0xa7f)][_0x5399d1(0x7ce)]()?(this[_0x5399d1(0x19a)]['x']=0x0,this[_0x5399d1(0x1b5)]=Math[_0x5399d1(0xbe1)](_0x1af49b[_0x5399d1(0x9ce)]/0x2)):(this[_0x5399d1(0x19a)]['x']=this['width'],this[_0x5399d1(0x1b5)]=this['width']*0x3/0x4);this[_0x5399d1(0x19a)]['opacity']=0x0,this[_0x5399d1(0x19a)]['y']=this['y']+this[_0x5399d1(0x908)];const _0x5ae9cd=BattleManager[_0x5399d1(0xaa9)]();_0x5ae9cd&&(this['_borderPortraitTargetX']+=_0x5ae9cd['getBattlePortraitOffsetX'](),this[_0x5399d1(0x19a)]['y']+=_0x5ae9cd['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x7de)]=function(){const _0x4238be=_0x553167;if(this[_0x4238be(0x989)]>0x0){const _0x891712=this['_borderPortraitDuration'],_0x3afe29=this[_0x4238be(0x19a)];_0x3afe29['x']=(_0x3afe29['x']*(_0x891712-0x1)+this[_0x4238be(0x1b5)])/_0x891712,_0x3afe29[_0x4238be(0x25b)]=(_0x3afe29[_0x4238be(0x25b)]*(_0x891712-0x1)+0xff)/_0x891712,this['_borderPortraitDuration']--;}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x8488f0=_0x553167;return;this['_effectsContainer']&&(this[_0x8488f0(0x2a4)]['x']=this['x'],this['_effectsContainer']['y']=this['y']),this[_0x8488f0(0x2c5)]&&(this['_damageContainer']['x']=this['x'],this[_0x8488f0(0x2c5)]['y']=this['y']);},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0xb24)]=function(){const _0x2e83c1=_0x553167,_0x293d8c=VisuMZ[_0x2e83c1(0x841)][_0x2e83c1(0x309)]['BattleLayout'];if(_0x293d8c[_0x2e83c1(0xa67)]){const _0xb87ef3=new Sprite();_0xb87ef3[_0x2e83c1(0xa3a)]=ImageManager[_0x2e83c1(0x373)](_0x293d8c['StatusWindowAttachmentBack']),_0xb87ef3['x']=_0x293d8c['StatusWindowAttachmentBackOffsetX']||0x0,_0xb87ef3['y']=_0x293d8c[_0x2e83c1(0xbd0)]||0x0,this[_0x2e83c1(0x6a2)](_0xb87ef3),this['_backAttachmentSprite']=_0xb87ef3;}if(_0x293d8c[_0x2e83c1(0x2b8)]){const _0xc0b79a=new Sprite();_0xc0b79a['bitmap']=ImageManager['loadSystem'](_0x293d8c[_0x2e83c1(0x2b8)]),_0xc0b79a['x']=_0x293d8c[_0x2e83c1(0x866)]||0x0,_0xc0b79a['y']=_0x293d8c[_0x2e83c1(0x513)]||0x0,this[_0x2e83c1(0xbd9)](_0xc0b79a),this[_0x2e83c1(0x204)]=_0xc0b79a;}},Window_BattleStatus[_0x553167(0x22b)][_0x553167(0x954)]=function(){const _0x1344a4=_0x553167;this[_0x1344a4(0x204)]&&this[_0x1344a4(0xbd9)](this[_0x1344a4(0x204)]),this[_0x1344a4(0x6f2)]&&this['addChildToBack'](this[_0x1344a4(0x6f2)]);},Window_BattleActor[_0x553167(0x22b)][_0x553167(0x308)]=function(){const _0x7ec9cb=_0x553167;return this[_0x7ec9cb(0x9b4)]();},Window_BattleActor[_0x553167(0x22b)][_0x553167(0x9b4)]=function(){const _0x200b80=_0x553167,_0x435534=BattleManager[_0x200b80(0x815)]();if(!_0x435534)return!![];if(!_0x435534['item']())return!![];const _0x5b55a3=this[_0x200b80(0xaa9)](this[_0x200b80(0x8ab)]()),_0xca9b3d=_0x435534[_0x200b80(0x58c)]()['note'];if(_0x435534['isForNotUser']()){if(_0x5b55a3===BattleManager[_0x200b80(0xaa9)]())return![];}if(_0x435534[_0x200b80(0x137)]()){if(!_0x5b55a3[_0x200b80(0x82f)]())return![];}if(_0x435534[_0x200b80(0x3bc)]()){if(!_0x5b55a3[_0x200b80(0x788)]())return![];}return!![];},Window_BattleActor[_0x553167(0x22b)]['setEnemyWindowMode']=function(_0x568752){const _0x6bc3c1=_0x553167;this[_0x6bc3c1(0x1c4)]=_0x568752;},VisuMZ[_0x553167(0x841)][_0x553167(0x505)]=Window_BattleActor[_0x553167(0x22b)][_0x553167(0x5e8)],Window_BattleActor[_0x553167(0x22b)][_0x553167(0x5e8)]=function(){const _0x5f5156=_0x553167;Window_BattleStatus['prototype'][_0x5f5156(0x5e8)][_0x5f5156(0x7f7)](this),this[_0x5f5156(0x1c4)]?this[_0x5f5156(0x91b)]():VisuMZ[_0x5f5156(0x841)][_0x5f5156(0x505)][_0x5f5156(0x7f7)](this);},Window_BattleActor['prototype'][_0x553167(0x91b)]=function(){const _0x4851a1=_0x553167,_0xfff708=SceneManager[_0x4851a1(0xa7f)][_0x4851a1(0x95b)];if(!_0xfff708)return;this[_0x4851a1(0xac5)]=![];const _0x1afd04=this[_0x4851a1(0x317)]();if(_0x1afd04>=0x0){this[_0x4851a1(0x677)](_0x1afd04);if(TouchInput[_0x4851a1(0x9e5)]()){const _0x22b987=$gameParty['members']()[_0x1afd04],_0x1fc291=_0xfff708[_0x4851a1(0x18e)]['indexOf'](_0x22b987);_0x1fc291>=0x0&&(_0xfff708['select'](_0x1fc291),_0xfff708['processOk']());}}},Window_BattleActor[_0x553167(0x22b)][_0x553167(0x650)]=function(){const _0x282b12=_0x553167;this[_0x282b12(0x1c4)]&&(this[_0x282b12(0x2fb)]++,this[_0x282b12(0x9c3)]=!![]);const _0x4b924d=Window_BattleStatus[_0x282b12(0x22b)][_0x282b12(0x650)][_0x282b12(0x7f7)](this);return this[_0x282b12(0x1c4)]&&(this[_0x282b12(0x9c3)]=![]),_0x4b924d;},VisuMZ[_0x553167(0x841)]['Window_BattleActor_show']=Window_BattleActor['prototype']['show'],Window_BattleActor[_0x553167(0x22b)][_0x553167(0x8b8)]=function(){const _0x92213f=_0x553167;VisuMZ['BattleCore'][_0x92213f(0x767)][_0x92213f(0x7f7)](this);const _0x3e9d1c=BattleManager[_0x92213f(0x815)]();if(_0x3e9d1c){const _0x5d497f=$gameParty[_0x92213f(0x58e)]();_0x3e9d1c[_0x92213f(0x997)]()&&_0x5d497f['length']>0x1&&this['setHandler']('pagedown',this['selectAllActors']['bind'](this));}},VisuMZ['BattleCore']['Window_BattleActor_hide']=Window_BattleActor['prototype']['hide'],Window_BattleActor[_0x553167(0x22b)][_0x553167(0x447)]=function(){const _0x7a563e=_0x553167;VisuMZ['BattleCore'][_0x7a563e(0xacd)][_0x7a563e(0x7f7)](this),delete this['_handlers'][_0x7a563e(0x7e8)],delete this['_handlers'][_0x7a563e(0x755)];},Window_BattleActor['prototype'][_0x553167(0x3fb)]=function(){const _0x3e485f=_0x553167,_0x4f85ba=BattleManager['inputtingAction']();if(_0x4f85ba)_0x4f85ba[_0x3e485f(0xa13)](_0x3e485f(0x32d));this[_0x3e485f(0x949)]();},VisuMZ[_0x553167(0x841)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x553167(0x22b)]['initialize'],Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x7a1)]=function(_0x29e67c){const _0x35cceb=_0x553167;this[_0x35cceb(0xae3)]=null,VisuMZ['BattleCore'][_0x35cceb(0x504)]['call'](this,_0x29e67c);if(Imported['VisuMZ_2_AggroControlSystem']){if(VisuMZ[_0x35cceb(0x6dc)][_0x35cceb(0x932)]<1.12){let _0x11d8a5='';_0x11d8a5+=_0x35cceb(0x538),_0x11d8a5+=_0x35cceb(0x1fd),_0x11d8a5+=_0x35cceb(0x96f),alert(_0x11d8a5),SceneManager[_0x35cceb(0x19c)]();}}},Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x590)]=function(){return this['maxItems']();},VisuMZ[_0x553167(0x841)][_0x553167(0x94d)]=Window_BattleEnemy[_0x553167(0x22b)]['show'],Window_BattleEnemy['prototype']['show']=function(){const _0xd73da0=_0x553167;VisuMZ[_0xd73da0(0x841)][_0xd73da0(0x94d)][_0xd73da0(0x7f7)](this),this['y']=Graphics[_0xd73da0(0x908)]*0xa,this[_0xd73da0(0x84b)]()&&this[_0xd73da0(0xafc)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x5bf)]=Window_BattleEnemy['prototype']['hide'],Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x447)]=function(){const _0x449ac5=_0x553167;VisuMZ[_0x449ac5(0x841)][_0x449ac5(0x5bf)][_0x449ac5(0x7f7)](this),$gameParty['select'](null),delete this[_0x449ac5(0xaa6)]['pageup'],delete this[_0x449ac5(0xaa6)][_0x449ac5(0x755)];},Window_BattleEnemy[_0x553167(0x22b)]['validTargets']=function(){const _0x57a5c0=_0x553167;let _0x164e42=$gameTroop[_0x57a5c0(0x58e)]();const _0x500a88=BattleManager[_0x57a5c0(0x815)]();if(_0x500a88){_0x500a88[_0x57a5c0(0x997)]()&&_0x164e42[_0x57a5c0(0x635)]>0x1&&this[_0x57a5c0(0x945)](_0x57a5c0(0x7e8),this[_0x57a5c0(0x9ba)][_0x57a5c0(0x161)](this));if(_0x500a88[_0x57a5c0(0x5e9)]()){const _0x264520=$gameParty[_0x57a5c0(0x58e)]();_0x164e42=_0x164e42[_0x57a5c0(0xa3b)](_0x264520),_0x500a88[_0x57a5c0(0x997)]()&&_0x264520[_0x57a5c0(0x635)]>0x1&&this['setHandler'](_0x57a5c0(0x755),this['selectAllActors'][_0x57a5c0(0x161)](this));}}return _0x164e42;},Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x215)]=function(){const _0x58d8e5=_0x553167;this[_0x58d8e5(0x18e)]=this['validTargets'](),this[_0x58d8e5(0x18f)](),Window_Selectable[_0x58d8e5(0x22b)][_0x58d8e5(0x215)][_0x58d8e5(0x7f7)](this);},Window_BattleEnemy['prototype'][_0x553167(0x18f)]=function(){const _0x4fa0b4=_0x553167;this[_0x4fa0b4(0x18e)][_0x4fa0b4(0x797)]((_0x162ce5,_0x2da241)=>{const _0x32ecba=_0x4fa0b4;if(_0x162ce5['isActor']()!==_0x2da241[_0x32ecba(0x8fb)]()){if(_0x162ce5[_0x32ecba(0x602)]())return-0x1;if(_0x2da241[_0x32ecba(0x602)]())return 0x1;}if(_0x162ce5[_0x32ecba(0x8fb)]()&&_0x2da241[_0x32ecba(0x8fb)]())return _0x162ce5['index']()-_0x2da241[_0x32ecba(0x8ab)]();return _0x162ce5[_0x32ecba(0x8d6)]()[_0x32ecba(0x649)]===_0x2da241[_0x32ecba(0x8d6)]()[_0x32ecba(0x649)]?_0x162ce5[_0x32ecba(0x8d6)]()[_0x32ecba(0x756)]-_0x2da241[_0x32ecba(0x8d6)]()[_0x32ecba(0x756)]:_0x162ce5[_0x32ecba(0x8d6)]()[_0x32ecba(0x649)]-_0x2da241[_0x32ecba(0x8d6)]()['_baseX'];}),SceneManager[_0x4fa0b4(0x3fd)]()&&this[_0x4fa0b4(0x18e)][_0x4fa0b4(0x468)]();},Window_BattleEnemy[_0x553167(0x22b)]['autoSelect']=function(){const _0x21ebeb=_0x553167,_0x4fa136=VisuMZ[_0x21ebeb(0x841)]['Settings'][_0x21ebeb(0x194)];_0x4fa136[_0x21ebeb(0x580)]?this[_0x21ebeb(0x922)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x922)]=function(){const _0x368a54=_0x553167,_0x2d81b7=BattleManager[_0x368a54(0x815)]();if(_0x2d81b7&&_0x2d81b7[_0x368a54(0x5e9)]()){if(_0x2d81b7[_0x368a54(0x3db)]()){if(this[_0x368a54(0x1ed)]&&this[_0x368a54(0x18e)][_0x368a54(0xb5d)](this[_0x368a54(0x1ed)])){const _0xe9022a=this[_0x368a54(0x18e)][_0x368a54(0x163)](this[_0x368a54(0x1ed)]);return this['forceSelect'](_0xe9022a);}else return this[_0x368a54(0x678)]();}}if(this['_lastEnemy']&&this[_0x368a54(0x18e)][_0x368a54(0xb5d)](this[_0x368a54(0xae3)])){const _0x4de058=this[_0x368a54(0x18e)][_0x368a54(0x163)](this['_lastEnemy']);this[_0x368a54(0xbb6)](_0x4de058);}else this[_0x368a54(0x678)]();},Window_BattleEnemy[_0x553167(0x22b)]['autoSelectPriority']=function(){const _0xd289ff=_0x553167,_0xe0d8f3=BattleManager[_0xd289ff(0x815)]();if(_0xe0d8f3&&_0xe0d8f3[_0xd289ff(0x5e9)]()){const _0xb4d820=$gameParty[_0xd289ff(0x58e)]()[0x0];let _0x12b458=this[_0xd289ff(0x18e)]['indexOf'](_0xb4d820);const _0x2a272a=_0xe0d8f3[_0xd289ff(0x58c)]()['scope'];if(_0x2a272a['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0xd289ff(0xbb6)](_0x12b458);return;}else{if(_0x2a272a[_0xd289ff(0x750)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0xd289ff(0xbb6)](_0x12b458-0x1);return;}}}const _0x6619d6=VisuMZ[_0xd289ff(0x841)][_0xd289ff(0x309)][_0xd289ff(0x194)];let _0x412224=![];$gameSystem[_0xd289ff(0x196)]()?_0x412224=_0x6619d6[_0xd289ff(0x4fc)]:_0x412224=_0x6619d6[_0xd289ff(0x158)],this['forceSelect'](_0x412224?this[_0xd289ff(0xb19)]()-0x1:0x0);},Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x8df)]=function(){const _0x1e1ef3=_0x553167;Window_Selectable['prototype'][_0x1e1ef3(0x8df)][_0x1e1ef3(0x7f7)](this);if(!this[_0x1e1ef3(0xb8f)]())return;if(this[_0x1e1ef3(0xb8f)]()['isEnemy']())this[_0x1e1ef3(0xae3)]=this['enemy']();if(this[_0x1e1ef3(0xb8f)]()['isActor']())this[_0x1e1ef3(0x1ed)]=this['enemy']();},Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x677)]=function(_0x10ab52){const _0x56df6a=_0x553167;Window_Selectable['prototype'][_0x56df6a(0x677)][_0x56df6a(0x7f7)](this,_0x10ab52),$gameTroop[_0x56df6a(0x677)](this[_0x56df6a(0xb8f)]()),$gameParty[_0x56df6a(0x677)](this[_0x56df6a(0xb8f)]());if(!this[_0x56df6a(0xb8f)]())return;if(this['meetsSelectFrontviewActorConditions']()){const _0x554d34=SceneManager[_0x56df6a(0xa7f)][_0x56df6a(0xa4e)];this[_0x56df6a(0xb8f)]()[_0x56df6a(0x8fb)]()?_0x554d34[_0x56df6a(0x677)](this[_0x56df6a(0xb8f)]()['index']()):_0x554d34['deselect']();}},Window_BattleEnemy['prototype'][_0x553167(0x84b)]=function(){const _0x471aaf=_0x553167;if(!this[_0x471aaf(0x743)])return![];if($gameSystem[_0x471aaf(0x196)]())return![];const _0x57bc78=SceneManager[_0x471aaf(0xa7f)][_0x471aaf(0x297)](),_0x260737=[_0x471aaf(0x734),_0x471aaf(0x5d3),'xp',_0x471aaf(0x7cf),_0x471aaf(0xb17)];return _0x260737[_0x471aaf(0xb5d)](_0x57bc78);},Window_BattleEnemy[_0x553167(0x22b)]['openBattleActorWindow']=function(){const _0x653613=_0x553167,_0x349eac=SceneManager[_0x653613(0xa7f)][_0x653613(0xa4e)];_0x349eac[_0x653613(0x8b8)](),_0x349eac[_0x653613(0x403)](!![]),_0x349eac[_0x653613(0x215)](),_0x349eac[_0x653613(0xbdf)]();const _0x1a173e=SceneManager[_0x653613(0xa7f)]['battleLayoutStyle'](),_0xde332=['xp',_0x653613(0x7cf),_0x653613(0xb17)];if(_0xde332[_0x653613(0xb5d)](_0x1a173e)){const _0x27b417=SceneManager[_0x653613(0xa7f)]['_statusWindow'];_0x27b417[_0x653613(0xb03)]['y']=0x0;}},Window_BattleEnemy['prototype']['closeBattleActorWindow']=function(){const _0x55bb04=_0x553167,_0x58a8da=SceneManager[_0x55bb04(0xa7f)][_0x55bb04(0xa4e)];_0x58a8da[_0x55bb04(0x447)](),_0x58a8da[_0x55bb04(0x403)](![]),_0x58a8da[_0x55bb04(0xbdf)]();const _0x39bee1=SceneManager[_0x55bb04(0xa7f)][_0x55bb04(0xa6f)];_0x39bee1[_0x55bb04(0xb03)]['y']=0x1;},Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x9ba)]=function(){const _0x5c584a=_0x553167,_0x48d0ee=BattleManager[_0x5c584a(0x815)]();if(_0x48d0ee)_0x48d0ee[_0x5c584a(0xa13)]('all\x20enemies');this['processOk']();},Window_BattleEnemy[_0x553167(0x22b)]['selectAllActors']=function(){const _0x3582ad=_0x553167,_0x5c2ad8=BattleManager[_0x3582ad(0x815)]();if(_0x5c2ad8)_0x5c2ad8['setTargetBattlerKey']('all\x20actors');this[_0x3582ad(0x949)]();},Window_BattleEnemy[_0x553167(0x22b)][_0x553167(0x308)]=function(){const _0x2323fc=_0x553167;return this[_0x2323fc(0x9b4)]();},Window_BattleEnemy[_0x553167(0x22b)]['isActionSelectionValid']=function(){const _0x10d208=_0x553167,_0x1cbf74=BattleManager['inputtingAction']();if(!_0x1cbf74)return!![];if(!_0x1cbf74[_0x10d208(0x58c)]())return!![];const _0x998c95=this[_0x10d208(0xb8f)](),_0x2cbc46=_0x1cbf74[_0x10d208(0x58c)]()[_0x10d208(0x645)];if(_0x1cbf74[_0x10d208(0x557)]()){if(_0x998c95===BattleManager[_0x10d208(0xaa9)]())return![];}return!![];},Window_BattleItem[_0x553167(0x22b)][_0x553167(0xb5d)]=function(_0x4f520e){const _0x375d8b=_0x553167;if(!_0x4f520e)return![];return _0x4f520e[_0x375d8b(0x37a)]===0x0||_0x4f520e[_0x375d8b(0x37a)]===0x1;};function Window_AutoBattleCancel(){const _0x3c8a55=_0x553167;this[_0x3c8a55(0x7a1)](...arguments);}Window_AutoBattleCancel[_0x553167(0x22b)]=Object['create'](Window_Base[_0x553167(0x22b)]),Window_AutoBattleCancel[_0x553167(0x22b)][_0x553167(0x589)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x553167(0x7a1)]=function(_0x13d77d){const _0xaa85bb=_0x553167;Window_Base[_0xaa85bb(0x22b)]['initialize'][_0xaa85bb(0x7f7)](this,_0x13d77d),this[_0xaa85bb(0x785)](this[_0xaa85bb(0xa76)]()),this[_0xaa85bb(0x215)]();},Window_AutoBattleCancel[_0x553167(0x22b)][_0x553167(0xa76)]=function(){const _0x2999e2=_0x553167;return VisuMZ[_0x2999e2(0x841)][_0x2999e2(0x309)][_0x2999e2(0x898)][_0x2999e2(0x281)];},Window_AutoBattleCancel[_0x553167(0x22b)][_0x553167(0x215)]=function(){const _0x5b4159=_0x553167;this[_0x5b4159(0x5cf)][_0x5b4159(0xa25)]();const _0x14d993=VisuMZ[_0x5b4159(0x841)][_0x5b4159(0x309)][_0x5b4159(0x898)][_0x5b4159(0x789)],_0x44698f=_0x14d993['format'](this['okButtonText'](),this[_0x5b4159(0x9b7)]()),_0x46e6b8=this[_0x5b4159(0x39c)](_0x44698f)[_0x5b4159(0x9ce)],_0x15c2c7=Math[_0x5b4159(0x66d)]((this[_0x5b4159(0x5f5)]-_0x46e6b8)/0x2);this[_0x5b4159(0x3cf)](_0x44698f,_0x15c2c7,0x0,_0x46e6b8);},Window_AutoBattleCancel[_0x553167(0x22b)][_0x553167(0xb11)]=function(){const _0x42c56b=_0x553167;return Imported[_0x42c56b(0x28b)]?TextManager[_0x42c56b(0xa98)]('ok'):VisuMZ[_0x42c56b(0x841)][_0x42c56b(0x309)][_0x42c56b(0x898)]['AutoBattleOK'];},Window_AutoBattleCancel[_0x553167(0x22b)][_0x553167(0x9b7)]=function(){const _0xd3eed4=_0x553167;return Imported[_0xd3eed4(0x28b)]?TextManager[_0xd3eed4(0xa98)](_0xd3eed4(0x32f)):VisuMZ[_0xd3eed4(0x841)]['Settings']['AutoBattle'][_0xd3eed4(0xbb1)];},Window_AutoBattleCancel['prototype']['update']=function(){const _0x23cded=_0x553167;Window_Base['prototype']['update'][_0x23cded(0x7f7)](this),this[_0x23cded(0x3f7)](),this[_0x23cded(0x69d)]();},Window_AutoBattleCancel['prototype'][_0x553167(0x3f7)]=function(){const _0x4567cb=_0x553167;this['visible']=BattleManager[_0x4567cb(0x7c7)];},Window_AutoBattleCancel[_0x553167(0x22b)][_0x553167(0x69d)]=function(){const _0x597e4b=_0x553167;if(!BattleManager[_0x597e4b(0x7c7)])return;(Input[_0x597e4b(0x8c0)]('ok')||Input[_0x597e4b(0x8c0)]('cancel')||TouchInput['isClicked']()||TouchInput['isCancelled']())&&(SoundManager[_0x597e4b(0x712)](),BattleManager[_0x597e4b(0x7c7)]=![],Input[_0x597e4b(0xa25)](),TouchInput['clear']());};function Window_EnemyName(){const _0x5eff2d=_0x553167;this[_0x5eff2d(0x7a1)](...arguments);}Window_EnemyName[_0x553167(0x22b)]=Object[_0x553167(0x595)](Window_StatusBase[_0x553167(0x22b)]),Window_EnemyName[_0x553167(0x22b)]['constructor']=Window_EnemyName,Window_EnemyName[_0x553167(0x22b)][_0x553167(0x7a1)]=function(_0x328228){const _0x166bbc=_0x553167;this[_0x166bbc(0xb05)]=_0x328228,this[_0x166bbc(0xab1)]='';const _0x4650a2=new Rectangle(0x0,0x0,Graphics[_0x166bbc(0x5f7)],this[_0x166bbc(0x97b)]()*0x4);Window_StatusBase[_0x166bbc(0x22b)][_0x166bbc(0x7a1)]['call'](this,_0x4650a2),this[_0x166bbc(0x785)](0x2),this[_0x166bbc(0x168)]=0x0;},Window_EnemyName[_0x553167(0x22b)]['updatePadding']=function(){const _0x5dace5=_0x553167;this[_0x5dace5(0xb8d)]=0x0;},Window_EnemyName[_0x553167(0x22b)][_0x553167(0xb8f)]=function(){const _0x5b8cd9=_0x553167;return $gameTroop[_0x5b8cd9(0xaca)]()[this[_0x5b8cd9(0xb05)]];},Window_EnemyName[_0x553167(0x22b)][_0x553167(0xbcd)]=function(){const _0x506346=_0x553167;Window_StatusBase[_0x506346(0x22b)][_0x506346(0xbcd)]['call'](this),this[_0x506346(0xb8f)]()&&this[_0x506346(0xb8f)]()[_0x506346(0xc04)]()!==this[_0x506346(0xab1)]&&(this['_text']=this['enemy']()[_0x506346(0xc04)](),this[_0x506346(0x215)]()),this[_0x506346(0x5ad)](),this[_0x506346(0x1c8)]();},Window_EnemyName[_0x553167(0x22b)][_0x553167(0x5ad)]=function(){const _0x2ac70f=_0x553167;if(!this[_0x2ac70f(0xb8f)]()){if(this['contentsOpacity']>0x0)this[_0x2ac70f(0x168)]-=0x10;}else{if(this[_0x2ac70f(0xb8f)]()[_0x2ac70f(0x82f)]()){if(this[_0x2ac70f(0x168)]>0x0)this[_0x2ac70f(0x168)]-=0x10;}else{if(SceneManager[_0x2ac70f(0xa7f)][_0x2ac70f(0x95b)]&&SceneManager[_0x2ac70f(0xa7f)][_0x2ac70f(0x95b)][_0x2ac70f(0x9c3)]&&SceneManager[_0x2ac70f(0xa7f)][_0x2ac70f(0x95b)][_0x2ac70f(0x18e)][_0x2ac70f(0xb5d)](this['enemy']())){if(this[_0x2ac70f(0x168)]<0xff)this[_0x2ac70f(0x168)]+=0x10;}else this[_0x2ac70f(0x168)]>0x0&&(this[_0x2ac70f(0x168)]-=0x10);}}},Window_EnemyName['prototype'][_0x553167(0x1c8)]=function(){const _0x2eced0=_0x553167;if(!this[_0x2eced0(0xb8f)]())return;SceneManager[_0x2eced0(0x3fd)]()?this['x']=Graphics[_0x2eced0(0x5f7)]-this['enemy']()[_0x2eced0(0x8d6)]()[_0x2eced0(0x649)]:this['x']=this['enemy']()[_0x2eced0(0x8d6)]()['_baseX'];this['x']-=Math[_0x2eced0(0x462)](this[_0x2eced0(0x9ce)]/0x2),this['y']=this[_0x2eced0(0xb8f)]()[_0x2eced0(0x8d6)]()['_baseY']-Math[_0x2eced0(0x462)](this[_0x2eced0(0x97b)]()*1.5);const _0x5dae51=VisuMZ[_0x2eced0(0x841)]['Settings'][_0x2eced0(0x194)];this['x']+=_0x5dae51[_0x2eced0(0x9d4)]||0x0,this['y']+=_0x5dae51[_0x2eced0(0x305)]||0x0;},Window_EnemyName['prototype'][_0x553167(0x739)]=function(){const _0x3a21e3=_0x553167;Window_Base[_0x3a21e3(0x22b)][_0x3a21e3(0x739)][_0x3a21e3(0x7f7)](this),this[_0x3a21e3(0x5cf)]['fontSize']=VisuMZ[_0x3a21e3(0x841)][_0x3a21e3(0x309)][_0x3a21e3(0x194)][_0x3a21e3(0xafa)];},Window_EnemyName[_0x553167(0x22b)]['refresh']=function(){const _0x36f370=_0x553167;Window_StatusBase[_0x36f370(0x22b)]['refresh'][_0x36f370(0x7f7)](this),this['contents'][_0x36f370(0xa25)]();if(!this['enemy']())return;this[_0x36f370(0x7aa)]();},Window_EnemyName['prototype'][_0x553167(0x7aa)]=function(){const _0x501ced=_0x553167;this[_0x501ced(0xab1)]=this[_0x501ced(0xb8f)]()[_0x501ced(0xc04)]();const _0x4f512e=this['textSizeEx'](this['_text'])['width'],_0x43112a=Math[_0x501ced(0x462)]((this[_0x501ced(0x5f5)]-_0x4f512e)/0x2);this[_0x501ced(0x3cf)](this[_0x501ced(0xab1)],_0x43112a,0x0,_0x4f512e+0x8);},Window_BattleLog[_0x553167(0x22b)]['maxLines']=function(){const _0x3f454c=_0x553167;return VisuMZ[_0x3f454c(0x841)][_0x3f454c(0x309)][_0x3f454c(0x875)][_0x3f454c(0xab5)];},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x374)]=function(){const _0x19b3b7=_0x553167;return VisuMZ[_0x19b3b7(0x841)][_0x19b3b7(0x309)][_0x19b3b7(0x875)][_0x19b3b7(0x2a0)];},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x967)]=function(){const _0x824774=_0x553167;return VisuMZ[_0x824774(0x841)][_0x824774(0x309)][_0x824774(0x875)][_0x824774(0x2d9)];},Window_BattleLog['prototype'][_0x553167(0x74e)]=function(){return![];},Window_BattleLog['prototype'][_0x553167(0x607)]=function(_0x406f44,_0x57dd3e){const _0x38b577=_0x553167;this[_0x38b577(0x275)]('actionSplicePoint'),BattleManager[_0x38b577(0x377)](_0x406f44,_0x57dd3e),this[_0x38b577(0x103)]();},Window_BattleLog[_0x553167(0x22b)]['emulateActionEffect']=function(_0x2885cb,_0x5e32a4,_0x41fca9){const _0x373fed=_0x553167;this[_0x373fed(0x275)]('actionSplicePoint'),BattleManager['emulateAction'](_0x2885cb,_0x5e32a4,_0x41fca9),this[_0x373fed(0x103)]();},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x905)]=function(){const _0x3c760e=_0x553167;this[_0x3c760e(0x103)]();},Window_BattleLog['prototype']['push']=function(_0x2c3705){const _0x569b4b=_0x553167,_0x90e9b5=Array[_0x569b4b(0x22b)]['slice']['call'](arguments,0x1),_0x5709c4={'name':_0x2c3705,'params':_0x90e9b5},_0x2d9fc7=this[_0x569b4b(0x4c4)][_0x569b4b(0x5c6)](_0x337a10=>_0x337a10[_0x569b4b(0xc04)])[_0x569b4b(0x163)](_0x569b4b(0x905));_0x2d9fc7>=0x0?this[_0x569b4b(0x4c4)][_0x569b4b(0x5e5)](_0x2d9fc7,0x0,_0x5709c4):this[_0x569b4b(0x4c4)]['push'](_0x5709c4);},Window_BattleLog['prototype']['unshift']=function(_0x56426c){const _0x5adc44=_0x553167,_0x4768fa=Array[_0x5adc44(0x22b)][_0x5adc44(0xa69)][_0x5adc44(0x7f7)](arguments,0x1);this['_methods'][_0x5adc44(0x275)]({'name':_0x56426c,'params':_0x4768fa});},Window_BattleLog['prototype'][_0x553167(0xb5b)]=function(){const _0x37b7c8=_0x553167;if(!$gameTemp[_0x37b7c8(0xa2e)]())return;console['log'](this['_methods'][_0x37b7c8(0x5c6)](_0x2ca1e4=>_0x2ca1e4[_0x37b7c8(0xc04)])[_0x37b7c8(0x781)]('\x0a'));},VisuMZ[_0x553167(0x841)]['Window_BattleLog_refresh']=Window_BattleLog[_0x553167(0x22b)]['refresh'],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x215)]=function(){const _0x3dcb64=_0x553167;this[_0x3dcb64(0x86a)]=!![];},VisuMZ[_0x553167(0x841)][_0x553167(0x41f)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0xbcd)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0xbcd)]=function(){const _0x304211=_0x553167;VisuMZ['BattleCore'][_0x304211(0x41f)][_0x304211(0x7f7)](this);if(this[_0x304211(0x86a)])this[_0x304211(0x33d)]();},Window_BattleLog[_0x553167(0x22b)]['processRefresh']=function(){const _0x3914e8=_0x553167;this[_0x3914e8(0x86a)]=![],VisuMZ[_0x3914e8(0x841)][_0x3914e8(0x636)]['call'](this);},Window_BattleLog['prototype'][_0x553167(0x9c9)]=function(_0xc04bfc){const _0x17b3f9=_0x553167;let _0x34c3cb=VisuMZ[_0x17b3f9(0x841)][_0x17b3f9(0x309)][_0x17b3f9(0x875)]['TextAlign'][_0x17b3f9(0xb3c)]()[_0x17b3f9(0x976)](),_0x18dedc=this[_0x17b3f9(0x8e0)][_0xc04bfc];if(_0x18dedc['match'](/<LEFT>/i))_0x34c3cb=_0x17b3f9(0x899);else{if(_0x18dedc[_0x17b3f9(0x750)](/<CENTER>/i))_0x34c3cb=_0x17b3f9(0xa2f);else _0x18dedc[_0x17b3f9(0x750)](/<RIGHT>/i)&&(_0x34c3cb=_0x17b3f9(0x7a2));}_0x18dedc=_0x18dedc[_0x17b3f9(0xa4a)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x18dedc=_0x18dedc[_0x17b3f9(0xa4a)](/\\I\[0\]/gi,'');const _0x5c8dbe=this[_0x17b3f9(0x682)](_0xc04bfc);this[_0x17b3f9(0x5cf)]['clearRect'](_0x5c8dbe['x'],_0x5c8dbe['y'],_0x5c8dbe[_0x17b3f9(0x9ce)],_0x5c8dbe[_0x17b3f9(0x908)]);const _0x15ccd2=this[_0x17b3f9(0x39c)](_0x18dedc)['width'];let _0x5cff6b=_0x5c8dbe['x'];if(_0x34c3cb===_0x17b3f9(0xa2f))_0x5cff6b+=(_0x5c8dbe[_0x17b3f9(0x9ce)]-_0x15ccd2)/0x2;else _0x34c3cb===_0x17b3f9(0x7a2)&&(_0x5cff6b+=_0x5c8dbe[_0x17b3f9(0x9ce)]-_0x15ccd2);this[_0x17b3f9(0x3cf)](_0x18dedc,_0x5cff6b,_0x5c8dbe['y'],_0x15ccd2+0x8);},Window_BattleLog[_0x553167(0x22b)]['addText']=function(_0x20ff5a){const _0x161ed4=_0x553167;this[_0x161ed4(0x8e0)][_0x161ed4(0x9d2)](_0x20ff5a),this['refresh'](),this['callNextMethod']();},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x4ea)]=function(){const _0x1e7c23=_0x553167;let _0x49fa4c=![];switch(this[_0x1e7c23(0x5c8)]){case'effect':_0x49fa4c=this[_0x1e7c23(0x306)]['isEffecting']();break;case _0x1e7c23(0xa15):_0x49fa4c=this[_0x1e7c23(0x306)][_0x1e7c23(0x688)]();break;case _0x1e7c23(0x5f3):_0x49fa4c=this[_0x1e7c23(0x306)][_0x1e7c23(0x448)]();break;case _0x1e7c23(0x233):_0x49fa4c=this[_0x1e7c23(0x306)][_0x1e7c23(0xa65)]();break;case _0x1e7c23(0x2ed):_0x49fa4c=this[_0x1e7c23(0x306)][_0x1e7c23(0x65a)]();break;case _0x1e7c23(0x25b):_0x49fa4c=this['_spriteset']['isAnyoneChangingOpacity']();break;}return!_0x49fa4c&&(this['_waitMode']=''),_0x49fa4c;},Window_BattleLog[_0x553167(0x22b)]['waitForAnimation']=function(){const _0x4ad47a=_0x553167;this[_0x4ad47a(0x759)]('animation');},Window_BattleLog[_0x553167(0x22b)]['waitForFloat']=function(){const _0x5840cc=_0x553167;this[_0x5840cc(0x759)](_0x5840cc(0x233));},Window_BattleLog[_0x553167(0x22b)][_0x553167(0xa8a)]=function(){const _0x425043=_0x553167;this['setWaitMode'](_0x425043(0x2ed));},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x91a)]=function(){const _0x3db6e2=_0x553167;this[_0x3db6e2(0x759)](_0x3db6e2(0x25b));},Window_BattleLog['prototype'][_0x553167(0x4d4)]=function(){const _0x1427f3=_0x553167,_0x3a5d6d=VisuMZ[_0x1427f3(0x841)][_0x1427f3(0x309)][_0x1427f3(0x875)];if(!_0x3a5d6d[_0x1427f3(0x50f)])return;this[_0x1427f3(0x9d2)]('addText',_0x3a5d6d['StartTurnMsg']['format']($gameTroop[_0x1427f3(0x6d4)]())),this['push'](_0x1427f3(0x79a),_0x3a5d6d[_0x1427f3(0x6b5)]),this[_0x1427f3(0x9d2)]('clear');};function _0x196a(){const _0x24049c=['dead\x20opponents','skew','frameCount','makeTurnsText','JSON','HelpAutoBattle','windowAreaHeight','MeleeDistance','Game_Action_makeTargets','children','bitmap','concat','setupRgbSplitImpactFilter','_inBattleStatusWindow','friendsUnit','updateShakeFlinch','displayTpDamage','cutinExit','canAttackBattleCore','alignBattleCoreDamageSprite','FlashColor','_index','ActSeq_Impact_TimeStop','getCommonEventIdWithName','pointX','HITTYPE_PHYSICAL','replace','targetActionSet','BattleManager_startTurn','VisuMZ_3_StateTooltips','_actorWindow','sleep','performFlinch','ANGLE','applyBattleCoreJS','message4','Game_Action_setSubject','TpGaugeOffsetY','ActSeq_Impact_ZoomBlurPoint','normalIcon','updateLastTarget','currentAction','damageCounterWindowRect','ActSeq_Movement_BattleStep','isPhysical','adjustPosition_1for1','updatePhase','ActSeq_Mechanics_DamagePopup','_totalHits','ActorJS','_battlerContainer','POST-','damageFlat','isAnyoneFloating','playBattleVoice','StatusWindowAttachmentBack','onEnemyCancel','slice','createMultiTargetWindow','_pageupButton','_forcedHomeY','ComboWindow_DrawJS','FocusY','_statusWindow','_defeatedEnemies','targetSpritePosition','STYPES','ActionStart','loadPicture','_partyWindow','bgType','ResetFocus','ActSeq_Element_AddElements','Sprite_Animation_targetSpritePosition','_createColorFilter','ActSeq_Mechanics_DeathBreak','addOnceParallelInterpreter','opacityStart','stypeId','_scene','AnchorX','startHomeMove','performWeaponAnimation','Parse_Notetags_Action','PostRegenerateJS','partyCommandWindowRectBorderStyle','createPageButtons','pop','displayChangedStates','_targetSkewY','waitForJump','makeStateName','StyleOFF','_tempActor','isJumping','setupBattleCore','measureTextWidth','LifeStealRegExp','getItemDamageAmountTextBattleCore','All\x20Enemies','attack','offsetY','Game_Interpreter_command283','weatherType','getInputButtonString','_skewX','setCursorRect','Game_Map_setupBattleback','updateWeather','checkShowHideSwitchNotetags','Turns','USER-DEFINED\x201','_enemySprites','noSimilarSTypes','battleStatusWindowAnimationContainer','ActSeq_Mechanics_EmulateGuardEffect','dataId','ActSeq_Mechanics_ActiveChainInputDisable','_handlers','isCertainHit','applyTargetFilters','actor','PortraitScale','svShadow','filters','top','DistanceX','processRandomizedData','STATUS','_text','expRate','isSpinning','ActSeq_Cutin_WaitForEntrance','MaxLines','battleUIOffsetY','debuffValueFmt','processBattleCoreJS','commandStyle','DamageDisplay','setupBattleCoreAspects','opacitySpeed','swapEnemyIDs','clamp','CmdStyle','Class-%1-%2','AspectIcon','performEvasion','collapseType','addGeneralOptions','_doubleTouch','resetNameTempVisibility','makeSuccess','helpAreaBottom','SKILLS','members','ScaleToFit','BattleLogRectJS','Window_BattleActor_hide','RegExp','totalDmgFmt','pauseInjectAnimation','battleCorePreBattleCommonEvent','Sprite_Actor_initMembers','requestBattleBalloon','BattleManager_updatePhase','CreateCutinSettings','noise','isEffecting','_returnWindow','ActSeq_Grid_PushFromTargetNode','processDrawEnemyBattler','restore','isBigCharacter','isDTB','CombatLogIcon','checkBattleEnd','LUK','isForAll','isBattlerFlipped','_lastEnemy','battleCommandIcon','checkTpbInputClose','inBattleStatusWindowRect','ActorCmd','CommandWidth','Game_Battler_clearMotion','isDamagePopupRequested','hitsHealFmt','popupDamage','Sprite_Gauge_smoothness','createDamageCounterWindow','NameAlwaysVisible','_skewEasing','ColorManager_mpColor','Scene_Battle_initialize','performMoveToTargets','ITEM','StepDuration','addCommand','Targets','_damagePopupArray','numTargets','NameFontSize','casting','openBattleActorWindow','isAnyoneInjectAnimating','battleCamera','drawItemStyleIcon','alive\x20friends\x20not\x20target','ATTACK','WeaponTypeID','scale','Scene_Map_initialize','_enemyID','bitmapHeight','Window_BattleLog_displayMiss','BattleManager_processVictory','_floatWholeDuration','Game_Action_numRepeats','_buttonText','CreateActionSequenceTargets','process_VisuMZ_BattleCore_Notetags','isCommonEventReserved','setSTBExploited','isDebuffAffected','okButtonText','process_VisuMZ_BattleCore_CommonEventKeys','updateShadowBattleCore','ArRedFlat','flashDuration','normal','border','_targetDamage','maxItems','mmp','changeInputWindow','isSelected','applyGlobalCommonEventNotetags','drawingAreaWidth','face','_hideAllIcons','OffsetY','ShowPopup','Game_Battler_clearDamagePopup','createAttachmentSprites','onBattleStartOnceParallels','_tempBattler','randomTargets','silentHomeMove','ParseArmorNotetags','VisuMZ_2_BattleSystemETB','PartyCmd','GetParamIcon','Style','attackSkillId','isBattleCoreTargetScope','Parse_Notetags_TraitObjects','playEnemyDamage','PreApply%1JS','Sprite_AnimationMV_updatePosition','updateBattleProcess','CounterPlayback','BaseTroopIDs','initBattlePortrait','SvMotionIdleSolo-%1-%2','IconStypeNorm','Mirror','svBattlerAnchorX','toLowerCase','PostEndActionJS','PopupShiftX','VisuMZ_2_BattleGridSystem','FilenameJS','startInput','customFontFace','ActSeq_Motion_ClearFreezeFrame','autoBattleStyle','traits','changeWeather','View\x20battle\x20member\x20status.','ConfigManager_applyData','VisuMZ_3_ActSeqImpact','_visualHpGauge_JustDied','windowskin','hidden','drawTurnsRemaining','setActiveWeaponSet','drain','targetObject','RequiresDefeat','ActSeq_BattleLog_Clear','includeState','clearBattleCoreData','WaitForFloat','getDragonbones','ReflectPlayback','performTpbActiveCheckSwitch','_battleLayoutStyle','ActSeq_Mechanics_WaitForEffect','logActionList','endBattle','includes','isGuardWaiting','Scene_Battle_start','_duration','ShowHide','CommandVisible','_battleCoreBattleStartEvent','battleback1Name','performAttack','PostApplyJS','_floatHeight','refreshDimmerBitmap','WaitForSkew','updateStatusWindowPosition','XPSpriteYLocation','Window_BattleLog_performDamage','valueColor','addAttackCommand','currentValue','disperseDamage','horzCells','wait','_lastRegenFrameCount','onOpacityEnd','forceMotion','revertTpbCachedActor','resizeWindowXPStyle','mpHealingFmt','Pre','normalHelp','attackAnimationId1','_growEasing','process_VisuMZ_BattleCore_PluginParams','all\x20enemies','visibilityState','selectNextCommand','_enemy','endVisualCutin','ActSeq_BattleLog_DisplayAction','_battleCoreBattleResumeAfter','FlinchDistanceY','aspect','process_VisuMZ_BattleCore_Action_Notetags','ActSeq_Impact_TimeScale','drawDebuffs','Window_BattleLog_displayEvasion','_jumpWholeDuration','isHiddenSkill','padding','displayBuffs','enemy','parallaxHueEnemyModifier','command301','balloonId','battleOpacity','AddOption','_waitCount','JumpToLabel','VariableID','Sprite_Enemy_setBattler','createHpGaugeSprite','MUSICNOTE','Users','Game_Map_encounterList','setupHpGaugeSprite','damageText','ActSeq_Mechanics_StateTurnsChangeTo','Sprite_Battler_updateMain','isFriendly','Window_BattleLog_pushBaseLine','ForceDeath','ActSeq_Movement_HomeMoveToPoint','makeHpDamageText','ShakeFlinchDuration','createBorderStylePortraitSprite','PreStartTurnJS','formula','setItem','ActSeq_Projectile_Animation','performAttackSlot','PopupOffsetY','ParseSkillNotetags','ShowRemovedBuff','ACTOR_OFFSET_X','AutoBattleCancel','PostDamageAsTargetJS','basicGaugesY','stepForward','collapse','forceSelect','damageOffsetY','battleUIOffsetX','DigitGrouping','isSceneChanging','_pagedownButton','checkExtendTroopCompatibility','performActionEndMembers','alive\x20enemies\x20not\x20target','updateEffectsContainer','lastFilename','numRepeats','maxWidth','toUseBoostPoints','Game_BattlerBase_meetsUsableItemConditions','turnOrderChangeOTB','Window_BattleLog_performEvasion','portraitFlipHorz','MultiTarget','isForRandom','skillTypes','DEF','AniDuration','update','shouldHideBattleEndPopups','boxHeight','StatusWindowAttachmentBackOffsetY','lifeStealTrait','JS\x20%1END\x20ACTION','loadOtherActorImages','canBattlerMove','gaugeBackColor','AnimationID','processHandling','MAXMP','addChild','ActiveTpbOptionsMessage','isNextScene','alive\x20battlers\x20not\x20target','isActing','iconIndex','deselect','isForOneBattleCore','ceil','Game_BattlerBase_initMembers','itemCri','_forcedBattlers','startMove','canUseItemCommand','performReflection','drawBuffs','BattleManager_inputtingAction','ActSeq_Animation_ChangeBattlePortrait_JS','createEnemySprite','_activeWeaponSlot','Sprite_Actor_updateBitmap','WaitForCamera','reserveCommonEvent','statusWindowRectDefaultStyle','_targetY','Targets2','repositionCancelButtonBorderStyle','statusHelpDesc','setVisibleUI','updateInterpreter','Exploiter','guardSkillId','Game_Battler_startTpbTurn','Scene_Battle_commandEscape','process_VisuMZ_BattleCore_BaseTroops','checkAutoCustomActionSequenceNotetagEffect','SwitchMissEvade','pageOffsetY','statesWindowRect','waitForMovement','_createEffectsContainer','updateStyleOpacity','CreateCommonEventKeys','name','ConvertCount','SkipPartyCmd','portraitHue','ActSeq_Camera_WaitForCamera','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','isBattleTest','createUIContainer','battleInjectAni','Game_Party_addActor','clearOnceParallelInterpreters','snapForBackground','alterCost','cancelHpLifeSteal','ChargeRate','isBorderPortraitSpriteVisible','redrawForGaugeRate','skillItemWindowRectBorderStyle','isForRandomBattleCore','onEnemyOk','98751PjSPpM','hpAffected','tpbCommandFight','stateHelpFmt','_actorMultiTargetWindow','callNextMethod','ActSeq_Zoom_Scale','state','ActSeq_Camera_Offset','startPartyCommandSelection','_cursorSprite','loadBattleback2','isPlaying','updateEvent','addChildToUiContainer','Scene_Battle_startActorCommandSelection','StatusWindow_DrawJS','ActionSkillMsg1','svBattlerShadowVisible','_animationContainer','ActSeq_Mechanics_EmulateSkillCost','initElementStatusCore','removeAnimationFromContainer','Sprite_Actor_setActorHome','1:1','regenerateAllBattleCore','gradientFillRect','performAction','ConfigManager_makeData','220gFiUts','TpbGaugeOffsetY','addNormalStatus','ActSeq_Movement_Skew','MANUAL','changeBattlerOpacity','dead\x20enemies','buffIconIndex','ActSeq_Mechanics_Multipliers','XPActorCommandLines','CmdIconEscape','jsScaleToFit','_injectAnimationSprite','drawTextTopAligned','Game_Action_evalDamageFormula','Formula','drawItemBackground','battleSkew','changeTextColor','HitRate','encounterList','VisuMZ_3_FrontviewBattleUI','_motion','endAnimation','subject','clearBattleCoreAspects','Scene_Battle_createAllWindows','return\x200','isForDeadFriend','checkCacheKey','AttackAnimation','coreEngineRepositionEnemies','isMoving','softDamageCap','isSpriteVisible','startShakeFlinch','adjustWeaponSpriteOffset','SvBattlerMass-%1-%2','setBattleZoom','unchanged','fadeShiftX','isTpbCharged','ShowRemovedState','_animationSprites','drawItemActorSvBattler','code','Window_ActorCommand_setup','dead\x20friends','_performActionEnd','BattleStartEvent','Scene_Battle_createEnemyWindow','VisuMZ_1_SkillsStatesCore','smooth','updateShadowPosition','Scale','StatusGraphic','Game_Action_setAttack','deathStateId','removeBuffsAuto','isOnCurrentMap','_motionCount','FrontViewSelect','_allTargets','battleBalloon','_skewY','setHalfActionsPTB','FollowTurn','_appeared','isDying','multiTargetWindowRect','bind','makeTargetSprites','indexOf','USER-DEFINED\x205','mpColor','PrioritySortActors','makeActionList','contentsOpacity','toString','CommandAddStatus','setupActionSet','updateCustomActionSequence','forceEscapeSprite','SkewX','AttachStateOffsetX','paramBuffRate','startSpin','setBattleAngle','_homeX','maxCommands','drawItemActorSprite','_partyCommandWindow','allIcons','_inputting','_list','processAnimationRequests','Game_BattlerBase_eraseState','Window_BattleLog_performCollapse','requestFauxAnimation','CheckSkillCommandShowSwitches','Game_System_initialize','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','increaseHits','endInBattleStatus','counterAttack','_actorCommandWindow','portraitFilename','battleZoom','isDuringNonLoopingMotion','requestMotion','ActSeq_Projectile_Picture','Scene_Battle_selectPreviousCommand','CalcActionSpeedJS','getSpecificBattlerKeyTarget','ActionAnimation','_enemies','sortEnemies','updateTargetValue','ActSeq_Mechanics_StateTurnsChangeBy','adjustPosition','_tpbNeedsPartyCommand','Enemy','requestRefresh','isSideView','_cursorArea','launchBattle','ActSeq_Grid_RemovePassiveStatesFromNode','_borderPortraitSprite','_iconIndex','exit','makeStateHelpText','isTpbReady','drawGauge','currentMaxValue','onActorOk','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','charged','makeBuffName','abs','excludeListing','playOnceParallelTroopPage','updateAttachedSprites','switchToWeaponType','createCommandVisibleJS','ActSeq_Camera_FocusTarget','svActorVertCells','parallaxHue','AutoAddState','_updateDuration','Rate','_opacityDuration','onEncounter','Scene_Battle_isTimeActiveIBS','ActSeq_Mechanics_RemoveState','_borderPortraitTargetX','placeActorName','isOptionsCommandEnabled','actions','EnableDamageCap','AutoBattleRect','_stateIconSprite','Direction','hasSkill','Scene_Battle_updateStatusWindowPosition','endAction','processDefeat','PrioritySortActive','battleGrow','changeCtbChargeTime','_enemyWindowMode','ActSeq_Animation_BalloonAnimation','VisuMZ_2_WeaponSwapSystem','ParseActorNotetags','updatePosition','MpGaugeOffsetX','mainSpriteWidth','isValid','isIncludedInEnemyWindow','createInnerSprite','getMenuImage','VisuMZ_3_ActSeqCamera','WaitForMovement','IconSet','onBattleEndBattleCore','ActSeq_Mechanics_StbRemoveExcessActions','value','_mainSprite','Game_Battler_performActionStart','ButtonAssist','mainSprite','ActSeq_Impact_Negative','makeTargetsBattleCore','StatusWindow_RectJS','processActorCommandCancelTPB','pattern','battleCommands','ParseWeaponNotetags','_aspectData','hardDamageCap','Window_BattleLog_performAction','Sprite_Battler_setHome','displayCurrentState','start','startAction','refreshMotion','_currentAngle','Spriteset_Battle_update','stopInjectAnimation','isCTB','Game_Enemy_transform','_lastActor','updateCounter','_subject','displayReflectionPlayBack','drawItemImagePortraitStyle','ActSeq_Mechanics_PtbAlterCost','Sprite_Enemy_initVisibility','getSkillTypes','alterChange','makeActions','guardLifeSteal','PreRegenerateJS','ShakeFlinch','BattleManager_abort','updateBitmap','battleCoreTpbMainPhase','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','createSeparateDamagePopups','context','Scene_Battle_onEnemyCancel','createActorCommandWindow','Game_Action_testApply','ActSeq_Animation_ShowAnimationJS','_frontAttachmentSprite','Scene_Battle_partyCommandWindowRect','_svBattlerData','isNameTemporarilyVisible','portraitFlipVert','weaponTypes','fadeShiftY','ActSeq_Skew_Reset','getTraitSetKeys','useItem','partyCommandWindowRect','motionIdle','debuffNameFmt','getItemDamageAmountLabelBattleCore','createRateJS','ActSeq_Grid_AnimationIDAtNode','ENEMY_OFFSET_X','refresh','initVisibility','prepare','BTB','PostStartBattleJS','PreApplyAsUserJS','applyFreezeMotionFrames','custom','CmdIconOptions','MotionAni','_animation','Sprite_Actor_update','MOTIONS','applyBattleCoreHitRateJS','ActSeq_Movement_WaitForFloat','Window_ItemList_maxCols','ActSeq_Motion_PerformAction','onSkewEnd','setupBattleback','ActSeq_Movement_FaceDirection','setMoveEasingType','QoL','prototype','isBattleRefreshRequested','battleMembers','performSubstitute','_commonEventQueue','canMove','updateDuration','wtypeId','float','timeScale','_battleBalloonQueue','\x5cI[%1]%2','setBattleCameraOffset','Sprite_Weapon_loadBitmap','applyAngleChange','initMembers','CheckActSeqProjectileVersion','CriticalColor','getAttackMotion','onHomeMoveEnd','split','negativeLifeSteal','ActSeq_Mechanics_OnceParallel','isAnyoneInjectAniPrepping','VisuMZ_4_CombatLog','VisuMZ_3_ActSeqProjectiles','ANTI_TINT_UI','createDigits','debuffHelpFmt','ActSeq_Mechanics_EmulateItemEffect','paramName','requestDragonbonesAnimation','setHome','HpGauge','glitch','FlinchDuration','Scene_Map_updateCallMenu','Game_Action_itemEffectAddAttackState','isBuffAffected','SvMotionIdleMass-%1-%2','WindowWidth','isAppeared','itemHeight','Game_Party_removeActor','Index','showHelpWindow','isFTB','_tempEquipCheck','opacity','magicReflection','WaitForZoom','parseForcedGameTroopSettingsBattleCore','trueRandomTarget','damagePopupOffsetX','message2','tpbActorSwitchConditionsMet','setupShockwaveImpactFilter','svBattlerAnchorY','graphicType','battleSpriteSkew','11335912wtxgcD','passive','Scene_Battle_skillWindowRect','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','_actionInputIndex','_flashDuration','BattleManager_endAction','Window_Options_addGeneralOptions','VisuMZ_3_BoostAction','originalName','addImmortal','enemyStatus','abort','processBattleBalloonRequests','unshift','_fauxAnimationSprites','battleEnd','addText','selectedBattlers','StartName','setBattlePortrait','rowSpacing','_createClientArea','equips','isForFriendBattleCore','addDamageSprite','AutoBattleBgType','waitForAnimation','removeOnceParallelInterpreter','getLastHpDamage','buffHelpFmt','ActSeq_Angle_Reset','battleProjectiles','isForOpponentBattleCore','JS\x20BATTLE\x20VICTORY','_damageCounterWindow','VisuMZ_0_CoreEngine','BattleManager_processAbort','filterArea','RevertAngle','drawActorStateTurns','Game_BattlerBase_die','changeTurnOrderByCTB','getParamBuffAndStateRate','DistanceAdjust','currentSymbol','nameY','Window_BattleStatus_drawItemImage','battleLayoutStyle','ActSeq_Movement_HomeMoveToJsPoint','_hue','createAttachedSprites','resetTextColor','SmoothImage','updateMotionCount','loadBitmap','_escapeRatio','MessageWait','parameters','createActorCommandWindowBattleCore','displayedParams','_effectsContainer','VisuMZ_2_HorrorEffects','updateActors','addActor','setBattleCameraPoint','removeDamageSprite','ActSeq_Movement_WaitForSpin','frameDelay','startGrow','AsUser','CmdIconItem','_targetOpacity','svBattlerName','customDamageFormula','cancelMpLifeSteal','autoBattleUseSkills','onEncounterBattleCore','stbGainInstant','NUM','VisuMZ_3_ActiveChainSkills','StatusWindowAttachmentFront','Game_Action_clear','Game_Battler_onTurnEnd','isSkill','command3011','COMBAT\x20LOG','itemTargetCandidates','_updateClientArea','front\x20base','_helpWindow','isSceneBattle','NameAlwaysSelectOnly','updateBattleBalloons','_damageContainer','addMeleeReturnActionSet','damage','updateFlip','arRedRate','resetResultSwitches','gainCurrentActionsETB','skillItemWindowRectMiddle','moveToStartPosition','BattlebackScale','CmdIconAutoBattle','buffNameFmt','isGuardLifeSteal','WaitCount','makeTargetsBattleCoreJS','DisablePartyCmd','currentClass','declareGlobalVariables','gainBravePoints','FaceDirection','BackColor','battleSys','drawSkillCost','BattleManager_endAction_ComboWindow','performCounter','Letter','makeBattleCommand','Damage','setTroopPage','endIcon','USER-DEFINED\x202','addOptionsCommand','isUndecided','updateSelectionEffect','command339','CheckVisibleSkillNotetags','ActSeqImpact','autoMeleeMultiTargetActionSet','MpGaugeOffsetY','cutinEnter','jump','itemHit','isDisplayEmergedEnemies','Window_ActorCommand_initialize','SkillsStatesCore','drawItem','drawStates','createTargetsJS','_targetFloatHeight','setSubject','ActSeq_Mechanics_AddState','enemyShowLevel','Text','isOptionsCommandAdded','_animationCount','isDisarmLifeSteal','isBattleMember','Sprite_Enemy_setHue','ActSeq_Animation_BalloonIcon','_endingBattle','waitForEffect','ActSeq_Camera_FocusPoint','setup','_forActor','NameOffsetY','_spriteset','colSpacing','isCurrentItemEnabled','Settings','ClearBattleLog','getColor','CriticalDmgRate','_targetGrowY','ActSeq_Grid_AddPassiveStatesToNode','animationShouldMirror','addSkillTypeCommand','HitFlat','virtualClick','performJump','drawActorName','isSkipPartyCommandWindow','Height','hitIndex','findIndex','changePaintOpacity','isEscapeCommandEnabled','ActSeq_BattleLog_PushBaseLine','HomePosJS','DistanceY','drawActorClass','_enemySprite','usePremadeActionSequence','adjustPosition_ScaleUp','origin','makeDeepCopy','ActSeq_Mechanics_OtbOrder','isSkillItemWindowsMiddle','fontSize','_shadowScaleY','updateStateSprite','hasStaticSvBattler','getDefeatedEnemies','Window_BattleLog_displayActionResults','%1Apply%2JS','all\x20actors','flipVisualCutinHorz','cancel','PostEndBattleJS','hitsDmgFmt','loadBattleback1','Sprite_Battler_startMove','Destination','VisuMZ_3_VisualCutinEffect','ActSeq_Impact_ShockwavePoint','CustomFontFace','_createCursorArea','actorCommandCancelTPB','isGrowing','description','commandName','processRefresh','addItemCommand','SkillID','ActSeq_Mechanics_AddBuffDebuff','faceRect','freezeMotion','_targetBattlerKey','battleVoices','isForAnyoneFocusOpponents','Window_BattleLog_performCounter','updateNameTempVisibility','setupBlueRedInvertImpactFilter','startActorCommandSelection','EscapeFailureJS','onDatabaseLoaded','targetBattlerContainerOpacity','ActSeq_Grid_RemoveTriggerFromNode','ActSeq_Impact_ShockwaveCenterTargets','shouldPopupDamage','addBattlerStates','AllowRandomSpeed','ApplyImmortal','BG_TYPE','ScaleY','DefaultHardCap','selectAll','_stateTurns','minimumStayDuration','singleSkill','focus','getBattlerKeyTargetReplacement','updateMain','Scene_Options','applyArmorModifiers','guardMpLifeSteal','ActSeq_Mechanics_AnalyzeWeakness','setupMotion','forceAction','commandAutoBattle','_floatDuration','createTroopNote','Sprite_Actor_createStateSprite','BravePoints','prepareCustomActionSequence','WaitCount2','_createCursorSprite','isShownOnBattlePortrait','_stateSprite','ActSeq_Target_PrevTarget','drawActorFace','Scene_Battle_startActorSelection','_actions','parallaxScrollYinvertEnemy','isAnimationShownOnBattlePortrait','loadSystem','messageSpeed','refreshStatusWindow','SvWeaponSolo-%1-%2','invokeAction','ReflectAnimation','putActiveBattlerOnTop','occasion','autoMeleeSingleTargetActionSet','freezeFrame','makeAutoBattleActions','displaySubstitute','dimColor1','clearForcedGameTroopSettingsBattleCore','arPenFlat','battlerSprites','changeAtbChargeTime','doesPageHaveOnceParallelStart','BattleManager_startBattle','isAtbCastingState','BindCommonEventKeysForGroup','setGuard','angleDuration','emulateAction','startSkew','isTimeActive','AntiTintUiElements','svAnchorX','_baseLineStack','updateHpGaugePosition','Actor-%1-%2','Game_Action_executeMpDamage','_performDamageMotion','ShowAddedBuff','ActSeq_Mechanics_StbExploit','pow','adjustPosition_ScaleToFit','minimumHits','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','stepFlinch','Scene_Battle_createActorCommandWindow','textSizeEx','STB','processAbort','isForFriend','battlelog','registerDefeatedEnemy','updateStateSpriteBattleCore','svBattlerData','die','Elements','_phase','drawItemImage','onMoveEnd','extraPositionY','ShowCounter','Scene_Battle_stop','DamageStyleList','#%1','mpDamage','Shadow2','TextColor','targetObjects','Game_Action_isForOpponent','critical','updatePositionBattleCore','isTurnBased','PRE-','Sprite_Battler_updatePosition','all\x20targets','ActionEffect','performCastAnimation','Slot','isForAliveFriend','zoomDuration','textColor','Parse_Notetags_Targets','alterPriority','battlerShadowScaleX','rec','Game_BattlerBase_refresh','pageButtonPosition','Game_BattlerBase_canAttack','FullActions','USER-DEFINED\x203','_windowLayer','LIGHT-BULB','isPTB','partyCommandWindowRectDefaultStyle','drawActorIcons','inputting','pushBaseLine','drawTextEx','_actor','updateShadowScale','ShakeFlinchPower','_battleCoreForcedElements','_showWeapon','moveBattlerHomeToPoint','makeData','addBattleGridMoveCommand','NameAttachStateIcon','CriticalDuration','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','isForAnyoneFocusFriends','displayBattleCoreTransitionErrorMsg','addAutoBattleCommands','Sprite_Battler_damageOffsetX','itemEffectAddAttackState','power','ActSeq_Mechanics_AtbGauge','_battlerKeyCache','process_VisuMZ_BattleCore_jsFunctions','gainMp','random','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','updateBattlerContainer','ALL_ACTORS','onRegeneratePlayStateAnimation','dead','isDrain','addBattlerBuffsDebuffs','Game_Action_itemTargetCandidates','getEnemyIdWithName','isPartyTpbInputtable','Scene_Options_maxCommands','wholeActionSet','startBattle','battleSpin','_svBattlerSprite','battleback2Name','_statesWindow','updateVisibility','isItem','_baseTexture','ActSeq_Mechanics_PtbConvert','selectAllActors','changeCtbCastTime','isBattleFlipped','createWeather','canGuard','CheckMapBattleEventValid','ActSeq_Grid_AnimationTypeAtNode','updateHelp','setEnemyWindowMode','battlerHue','totalHealFmt','frontviewSpriteY','ActSeq_Mechanics_ArmorPenetration','callOptions','setActiveWeaponSlot','startInBattleStatus','setBattleCameraTargets','VisuMZ_4_IconBalloons','isWaiting','Strength','_battlerName','applyItem','addLoadListener','Duration','jumpBattler','updatePageButtonVisibility','makeActionOrders','actor%1-portrait','setBattleImpactTimeScale','motionType','ActSeq_Grid_ActionAnimationAtNode','PopupOffsetX','StyleName','addWindow','StepDistanceY','ActSeq_Animation_WaitForAnimation','Window_BattleLog_update','battleFloat','ActSeq_Animation_CastAnimation','Window_BattleLog_displayMpDamage','DualWield','needsSelection','setLastPluginCommandInterpreter','clone','ActSeq_Mechanics_EtbAction','MotionType','Game_Actor_makeActionList','worldTransform','stateColor','ActSeq_Horror_GlitchCreate','damageContainer','startActorSelection','Sprite_Battler_setBattler','FocusX','getItemDamageAmountLabelOriginal','NameAlwaysHidden','DamageType%1','pageOffsetX','requestBalloon','CriticalHitRate','pageButtonX','BattleEndEvent','showAnimation','WaitForProjectile','_targetHits','Window_SkillList_maxCols','Scene_Battle_selectNextCommand','itemEffectAddNormalState','createStateSprite','processCancel','linkSprite','BattleSystemBTB','VisuMZ_2_BattleSystemBTB','destroy','undecided','traitObjects','hide','isAnimationPlaying','EscapeFail','Game_Temp_initialize','_effectDuration','gaugeRate','isAlwaysVisible','_stypeIDs','makeActionListAutoAttack','missile','Game_Battler_regenerateAll','isGuard','_forcedHomeX','message1','%1RegenerateJS','duration','MaxMP','emulateActionEffect','PostDamageAsUserJS','ActionItemMsg','battlerShadowScaleY','ActSeq_Grid_PullToTargetNode','HelpSkillType','CastMagical','BoostPoints','priority','ActSeq_Horror_TVCreate','round','ActSeq_BattleLog_WaitForBattleLog','WaitForEntrance','StatusWindowSkinFilename','isAtbChargingState','IconStypeMagic','reverse','buff','refreshCursor','DefeatEvent','_preBattleCommonEvent','BattleManager_checkBattleEnd','enemyTpGaugeRate','isBypassDamageCap','performMiss','lifeSteaItem','isDeathStateAffected','executeMpDamage','getSkillIdWithName','updateCollapse','needsSelectionBattleCore','needsActorInputCancel','State-%1-%2','mainSpriteScaleX','Debuffs','disarmMpLifeSteal','visualCutinPortraitHue','format','Game_Action_isForDeadFriend','jsAccuracyAsUser','textWidth','createString','_pattern','ActSeq_Zoom_WaitForZoom','type','cameraClamp','All\x20Allies','globalAlpha','VisualCutinEffect','setupCriticalEffect','Game_Action_needsSelection','Shadow','Game_Action_setSkill','alive\x20opponents','debuffColor','setupFont','itemEffectRecoverHp','action','HalfActions','_playTestFastMode','itemPadding','PreEndActionJS','_back2Sprite','isFlipped','_homeDuration','needsInputWindowChange','ActSeq_Horror_Clear','ActSeq_Animation_AttackAnimation2','setEventCallback','finalizeScale','isAnyoneChangingOpacity','_jumpDuration','actorCommandSingleSkill','parse','makeDamageValue','createActionSequenceProjectile','floatBattler','ResetOffset','ShowActorGauge','BattleLayout','eraseState','_lastAction','MAT','isCustomActionSequence','_targetAngle','AsTarget','equipSlots','applyGlobal','isCancelLifeSteal','process_VisuMZ_BattleCore_Failsafes','_freezeMotionData','BattleVictoryJS','MP_Rate','drawText','CheckVisibleSwitchNotetags','DefaultSoftScaler','addDebuff','refreshActorPortrait','performLifeSteal','canAttack','isStateResist','ActSeq_Mechanics_BreakShieldChange','attackTimesAdd','growBattler','remove','max','_battleBalloonSprites','icons','_methods','isCancelTriggered','base','drawBattlerData','adjustPosition_ScaleDown','AGI','MotionSpeed','_growY','setupMotionBlurImpactFilter','ActSeq_Inject_AnimationEnd','ActSeq_Impact_MotionBlurTarget','_targetGrowX','helpWindowRectBorderStyle','Reveal','displayActionResults','BattleGridSystem','startTurn','createBattleUIOffsetY','_colorType','missle','removeImmortal','drawActorBuffTurns','reduce','_tpbSceneChangeCacheActor','Item-%1-%2','addAnimationSpriteToContainer','textBaseline','2559912fXwbbh','_battleCoreNoElement','flashColor','itemRect','TpGaugeOffsetX','battleDisplayText','setBattler','finishActorInput','BattleAI','gainStoredBoostPoints','createPartyCommandWindow','updateWaitMode','MUSIC','disarmLifeSteal','getAspectData','OffsetAdjust','isFloating','displayEvasion','makeSpeed','isMVAnimation','ActSeq_Movement_HomeMoveBy','isHidden','ActSeq_Motion_RefreshMotion','ATK','setBlendColor','onFloatEnd','Window_BattleStatus_initialize','ActSeq_Impact_Desaturate','MAXHP','SideviewSelect','CmdTextAutoBattle','CmdIconFight','NewPopupBottom','Filename','addedBuffs','addedDebuffs','extendTroopMembers','Window_BattleEnemy_initialize','Window_BattleActor_processTouch','isQueueOptionsMenu','alive\x20battlers\x20not\x20user','#ffffff','_active','Frame','skewBattler','hasBeenDefeatedBefore','onEscapeFailure','+%1\x20MP','StartTurnShow','isFrameVisible','SETTINGS','toUpperCase','StatusWindowAttachmentFrontOffsetY','moveBattlerDistance','ActSeq_Movement_MoveBy','setupDamagePopup','frontview_ui','command236','Spriteset_Battle_updateActors','BattleManager_processDefeat','MotionIdle','Sprite_Damage_createChildSprite','VisuMZ_2_BattleSystemSTB','setFrame','_wtypeIDs','drawItemImageXPStyle','_skillIDs','commandNameWindowCenter','hpDamage','temporaryVisibile','checkSubstitute','previousActor','Scene_Battle_terminate','ARRAYFUNC','createBattleField','_hpGaugeSprite','ActSeq_Movement_MoveToPoint','loadFaceImages','refreshBattlerMotions','pageButtonY','addFightCommand','loadSvActor','swing','none','isAlwaysHidden','repositionEnemiesByResolution','<CUSTOM\x20ACTION\x20SEQUENCE>','_updateFilterArea','actorId','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','_forcedBattleLayout','extraPositionX','EscapeSuccess','Window_PartyCommand_initialize','updateCancelButton','Game_BattlerBase_canGuard','dead\x20battlers','Game_Battler_performEvasion','onGrowEnd','ActSeq_BattleLog_AddText','HpGaugeOffsetY','setActorHome','BattleManager_endBattle','startOpacity','clearNameTempVisibility','_shadowScaleX','drawComboText','svAnchorY','calcWindowHeight','VisuMZ_3_BattleAI','ActSeq_Impact_ColorBreak','initMembersBattleCore','WaitForJump','getItemDamageAmountTextOriginal','_ptbActionCost','updateSkew','getChildIndex','isMeleeMultiTargetAction','Scene_Map_launchBattle','Sprite_Actor_updateShadow','isForNotUser','thrust','Scene_Battle_createPartyCommandWindowIBS','_drawTextOutline','ScaleX','requestMotionRefresh','PostApplyAsUserJS','commandEscape','clearActiveWeaponSet','Balloon','isMeleeSingleTargetAction','ActSeq_Target_NextTarget','createShadowSprite','itemWindowRect','battleCommandName','ShowMpDmg','ShuffleArray','_bypass_applyBattleCoreHitRateJS','actorCommandWindowRect','isImmortal','offsetX','processBorderActor','addBattleCoreAutoBattleStartupCommand','Normal','log','canAddSkillCommand','PreEndTurnJS','IconIndex','performRecovery','startWeaponAnimation','targetsForOpponents','guardHpLifeSteal','filter','isActiveTpbReady','battleMove','drawItemActorFace','hitText','Game_BattlerBase_allIconsIBS','walk','evaded','createAllWindows','LastSelected','changeBattlebacks','obj','enemyShowParametersIfDefeated','%1-%2','updateBossCollapse','DestinationJS','CalcEscapeRatioJS','removeChild','constructor','rate','_surprise','item','contains','aliveMembers','132786mIVVPP','maxCols','Game_Action_isForAliveFriend','createEnemyNames','negativeHpLifeSteal','loadCharacter','create','ActSeq_Horror_NoiseRemove','BattleManager_startInput','powerUpColor','_shakeFlinchPower','createEnemyNameContainer','createHelpWindow','requestAnimation','STRUCT','attackStatesRate','...','Spriteset_Battle_createLowerLayer','createEnemyWindow','_weather','updateUiContainerPosition','_skillWindow','skillWindowRect','meetsUsableItemConditions','EFFECT_COMMON_EVENT','FlinchDistanceX','-----','SwitchCritical','StateOverlayOffsetX','lifeStealRate','updateOpacity','criticalDmgFlat','Param','anchorY','ActSeq_Cutin_EndVisualCutinEffectType','battleInjectPrep','invokeMagicReflection','%1StartBattleJS','%1Event','drawItemImageListStyle','drawDarkRect','special','_customDamageFormula','nextActiveWeaponSlot','setupIconTextPopup','createBattleBalloon','displayFailure','command301_PreBattleEvent','Window_BattleEnemy_hide','DefaultStyle','evalDamageFormula','ExtDisplayedParams','enemyShowParametersIfBattleTest','hasAspectData','uiInputPosition','map','enemyNames','_waitMode','BattleManager_cancelActorInput','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','updateCommandNameWindow','processVictory','freezeTime','startMotion','contents','Actor','onAllActionsEnd','weapons','list','isChangingOpacity','Mechanics','SkewY','CriticalDmgFlat','VariableDmg','attackAnimationIdSlot','normalColor','extraPositionScaledY','statusWindowRectBorderStyle','currentExt','clearHorrorEffects','Scene_Battle_startPartyCommandSelection','_namesCount','statusWindowRect','inBattle','iconWidth','Game_Battler_onBattleStart','splice','StepDistanceX','_interpreter','processTouch','isForAnyone','scope','COMBATLOG','drawIcon','effects','fillRect','Override','getNextDamagePopup','position','icon','animation','ActSeq_Movement_FaceTarget','innerWidth','destroyDamageSprite','boxWidth','BattleManager_checkSubstitute','open','dragonbonesData','addBattlerAspect','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','isPartyCommandWindowDisabled','command283','CastAnimation','setupDesaturateImpactFilter','setColorTone','isEnemy','executeHpDamage','Window_BattleLog_popBaseLine','resetCounter','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','actionEffect','setText','makeBuffHelpText','_colorTone','isAnyoneGrowing','extraHeight','createStatesWindow','_immortal','BattleManager_selectNextCommand','setupChild','setActionState','ActSeq_BattleLog_WaitForNewLine','autoRemovalTiming','setAttack','ActSeq_Motion_FreezeMotionFrame','updateOnceParallelInterpreters','SkillItemStandardCols','ActSeq_Grid_MoveTargetsInDirection','isActiveTpb','drawActorLevel','addAutoBattleCommand','skillId','_flashColor','jsAccuracyAsTarget','drawEnemyBattler','_tpbState','spriteId','_attackAnimationId','alive\x20actors','Window_BattleLog_performMagicEvasion','ComboWindow_RectJS','SceneManager_isSceneChanging','pointY','setFullActionsPTB','isBattlerTargeted','VisuMZ_3_WeaknessDisplay','jsCritRateAsTarget','attackAnimationId2','onStaticEnemyBitmapLoad','vertCells','addEscapeCommand','Opacity','moveBattlerHomeDistance','_dragonbonesSpriteContainer','Variable','touchUI','length','Window_BattleLog_refresh','VisuMZ_2_DragonbonesUnion','skills','CriticalHitMultiplier','removeHorrorEffect','param','_itemWindow','Weapon-%1-%2','popBaseLine','parseLocalizedText','createChildSprite','options','WaitForScale','parallaxScrollX','buffColor','note','getLastPluginCommandInterpreter','setStateTurns','ShowAddedState','_baseX','loadSvEnemy','setClickHandler','windowPadding','_growX','AttachStateOffsetY','VisuMZ_2_BattleSystemPTB','_makeCursorAlpha','ForceExploited','mhp','Game_Action_executeHpDamage_ComboWindow','isCharging','statusWindowRectXPStyle','textAlign','fight','ALL\x20SKILLS','setupBattlebackBattleCore','isAnyoneJumping','ActSeq_Horror_GlitchRemove','Window_BattleLog_displayCritical','Sprite_Battler_update','move','createActors','_multipliers','hasSvBattler','ActSeq_Camera_Clamp','setBattleSkew','Sprite_Battler_isMoving','updateBattlebackBitmap1','closeBattleActorWindow','addChildAt','stateMotionIndex','increaseTotal','Game_Action_executeHpDamage','ActSeqProjectiles','Targets1','floor','_lineHeight','Game_Interpreter_terminate','_blendColor','XPActorDefaultHeight','addState','battleEffect','startJump','repeatTargets','_uiContainer','select','autoSelectPriority','loop','playOnceParallelInterpreter','some','Game_Action_makeDamageValueDisperse','sprite','displayItemMessage','ActSeq_Element_ForceElements','_lastPluginCommandInterpreter','Game_Interpreter_command301','lineRect','Sprite_Battleback_adjustPosition','attachSpritesToDistortionSprite','createCommandNameWindow','Scene_Battle_updateBattleProcess','drawParamData','isAnyoneMoving','Post','faceHeight','Window_BattleLog_displayFailure','Interrupt','VisuMZ_2_PartySystem','DisplayAction','negativeMpLifeSteal','positionOffsetY','Spriteset_Battle_createBattleField','BattleManager_initMembers','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','damagePopupPosition','clearFreezeMotion','setHelpWindow','DefaultDamageStyle','Window_BattleLog_clear','_enemyIDs','isAnyoneSkewing','ShowCosts','ActionSkillMsg2','updateCancel','evade','Sprite_Enemy_updateStateSprite','Game_Actor_setup','_opacityWholeDuration','addChildToBack','ARRAYSTR','contentsBack','BTestBypass','revealNewWeaknesses','Sprite_Actor_moveToStartPosition','removeActor','updateShadowVisibility','processEscape','ActSeq_Impact_MotionTrailCreate','removeCurrentAction','_lastHpDamage','process_VisuMZ_BattleCore_PreBattleCommonEvent','prev\x20target','min','_actorSprites','MIN_SAFE_INTEGER','paramValueByName','actor%1-gauge-%2','StartTurnWait','isBattleSys','StatusWindow_BgType','Scene_Battle_onActorCancel','AllEnemiesText','ActSeq_Movement_Float','Parse_Notetags_HelpDescription','hitRate','_jumpMaxHeight','executeDamage','ActSeq_Mechanics_StbExtraAction','makeTargetSelectionMoreVisible','_cache','_executeHpDamage','_cacheTextWidth','WtypeId','createAutoBattleWindow','okTargetSelectionVisibility','Scene_Battle_onEnemyOk','sliceMin','criticalHitFlat','createAnimationSprite','innerHeight','ActionCenteredName','displayStartMessages','_battlePortrait','createInBattleStatusWindow','WEAPON\x20SWAP','processExtendTroopMembers','substitute','AnchorY','turnCount','addExtendedTroopMembers','ShowWeapon','WaitCount1','createBattleFieldContainer','createBattleUIOffsetX','isTpbMainPhase','JS\x20%1END\x20TURN','AggroControlSystem','Scene_Battle_update','applyHardDamageCap','setHelpWindowItem','ActSeq_Cutin_WaitForExit','displayCritical','notFocusValid','AllowCollapse','Sprite_Enemy_updateCollapse','textAlignment','ShowPortraitsBorderStyle','charging','clearTargetBattlerKey','isAutoBattle','_homeY','Angle','isChanting','preparePartyRefresh','PreStartBattleJS','displayRemovedStates','startIcon','buffValueFmt','_backAttachmentSprite','hpDamageFmt','ActSeq_Grid_AnimationJsAtNode','ActSeq_Impact_BlueRedInvert','Intensity','ZZZ','onActorCancel','_homeEasing','loadEnemy','text','updateScale','guard','ActSeq_Movement_MoveToJsPoint','ActSeq_Animation_GuardAnimation','Game_Action_itemHit','pages','hitFlat','makeEscapeRatio','clearWeaponAnimation','_displayBattleCoreTransitionErrorMsg','activate','ComboWindow','Scene_Battle_itemWindowRect','itemTextAlign','setHorrorEffectSettings','createMiss','SkillItemMiddleLayout','isInputting','_indent','drawBackgroundRect','inHomePosition','clearResult','playCancel','FUNC','ActSeq_Animation_ChangeBattlePortrait','missed','ActorOffsetX','setBattlerMotionTrailData','maxTp','Game_Interpreter_PluginCommand','Game_Interpreter_updateWaitMode','VisuMZ_3_BattleVoices','ActSeq_Mechanics_HpMpTp','EndBattlePopups','selectLast','ActSeq_ChangeSkew','TpbGaugeOffsetX','enemyMpGaugeRate','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','ActionEndUpdate','ForceExploiter','gainHp','%1▼','ActSeq_Movement_WaitForMovement','_motionType','ParseItemNotetags','commandNameWindowDrawText','normalText','commandOptions','\x5cC[0]','Enable','▼%1','states','HITTYPE_CERTAIN','canGuardBattleCore','Game_Action_apply','default','isLearnedSkill','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','updatePadding','battleCameraData','resetFontSettings','Game_Troop_expTotal','ShowAddedDebuff','%1Damage%2JS','onJumpEnd','parent','_totalDamage','ActionSequence','checkSceneBattleTransitionable','Game_Battler_forceAction','visible','process_VisuMZ_BattleCore_TraitObject_Notetags','isForOpponent','AlphaFilter','GetActionSequenceSpecialTargetWithFlags','ShowReflect','actorCommandEscape','_armorPenetration','setCustomDamageFormula','findSymbolExt','atbInterrupt','isFastForward','ActSeq_Set_TargetActionSet','match','_weaponSprite','callUpdateHelp','_distortionSprite','VisuMZ_1_MessageCore','pagedown','_baseY','processTurn','user','setWaitMode','_nameTempVisibleDuration','applyBattleCoreCriticalHitRateJS','ARRAYSTRUCT','_floatEasing','Game_Actor_equips','finishActionSet','weaponImageId','shadow','maxBattleMembers','Scene_Battle_helpWindowRect','updateRefresh','%1EndActionJS','TargetLocation','Window_BattleActor_show','showPortraits','positionOffsetX','fnordRemovedStates','Window_BattleLog_performActionEnd','_forcing','TurnsFmt','JS\x20ESCAPE\x20SUCCESS','TP_Rate','PreApplyJS','displayReflection','evalDamageFormulaBattleCore','ActSeq_Mechanics_BreakShieldReset','_autoBattleWindow','displayAffectedStatus','ActSeq_Movement_WaitForSkew','ActSeq_BattleLog_Refresh','ActSeq_Animation_SkillAnimation','VisuMZ_3_SideviewBattleUI','fnordAddedStates','updateTargetPosition','isFightCommandEnabled','createAnimationContainer','PopupDuration','addBattleCoreAutoBattleStyleCommand','ActSeq_DB_DragonbonesMotionAni','join','_buffs','isPreviousSceneBattleTransitionable','Scene_Battle_createHelpWindow','setBackgroundType','status','1073861NjJDwm','isAlive','AutoBattleMsg','stateRate','PostStartActionJS','StateIconOffsetY','updateKeyboardKeys','clearBattlerMotionTrailData','addPartyCommand','_targetSkewX','isCustomBattleScope','CastPhysical','_shakeFlinchDuration','addCustomCommands','JS\x20%1START\x20ACTION','Game_Battler_makeSpeed','sort','abnormal','alterBreakShield','waitCount','???','transform','_jumpHeight','playReflection','AS\x20TARGET','%1▲','initialize','right','HITTYPE_MAGICAL','gainFullActionsPTB','createMultiTargetWindows','placeTimeGauge','_deathStateApplied','moveBattlerToPoint','ActSeq_Set_SetupAction','drawEnemyName','PopupShiftY','lukEffectRate','ActSeq_Motion_WaitMotionFrame','updateBorderStyle','logWindowRect','applyVariance','auto','time','createEffectActionSet','createCancelButton','ActSeq_Set_FinishAction','enemyId','alive\x20friends\x20not\x20user','alive\x20actors\x20not\x20user','getAttackMotionSlot','powerDownColor','updateJump','selectNextActor','loadWindowskin','isMagical','isSpriteVS8dir','TPB','clearMotion','checkShowHideSkillNotetags','DamageRate','BattleManager_startAction','applyEasing','BgType','_autoBattle','Scene_Party','NOTE','getDamageStyle','VarianceFormulaJS','_weaponImageId','BattleManager_onEscapeFailure','isRightInputMode','portrait','Scene_Battle_logWindowRect','_commonEventIDs','+%1','_logWindow','onBattleStartBattleCore','_dimmerSprite','getReturnWindow','setBattlerFlip','drawSingleSkillCost','isTickBased','ActSeq_Grid_TraverseToNode','createEnemies','createStateIconSprite','target','updateBorderSprite','Window_BattleLog_performRecovery','BattleDefeatJS','criticalHitRate','ESCAPE','getBattlerKeyTargets','WaitForAnimation','drawItemStatusListStyle','SkillItemBorderCols','CommandAddOptions','pageup','States','updateAngleCalculations','actorCommandAutoBattle','_currentActor','redraw','terminate','Scene_Battle_createCancelButton','BattleSystemSTB','setSvBattlerSprite','alive\x20enemies\x20not\x20user','_battleField','compareEnemySprite','Window_BattleLog_performMiss','lastCommandSymbol','call','createDamageContainer','updateStart','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','performActionMotions','VisuMZ_2_BattleSystemATB','WIDTH','isOpenAndActive','_homeWholeDuration','attackMotions','addWeaponSwapCommand','_colorFilter','ChangeOrderBy','Window_BattleLog_displayCurrentState','isConfused','Name','troop','_skewWholeDuration','value1','text\x20target','ShowMissEvasion','PopupPosition','smoothness','iconText','isBattlerGrounded','deadMembers','isSubjectValidForAnyoneSelect','Game_Action_isForAll','ActSeq_Inject_AnimationStart','JS\x20%1END\x20BATTLE','inputtingAction','buffRemove','gaugeLineHeight','_angleDuration','ActSeq_Weapon_NextActiveWeapon','commandFight','dying','Game_Action_itemEffectAddNormalState','ActionCount','StatusWindowSelectableBackHide','showNormalAnimation','onTurnEnd','itemLifeStealRate','registerCommand','MotionFrameWait','100%','jsScaleUp','CoreEngine','updateFloat','gainTp','battlerKey','ActSeq_Grid_TeleportToNode','font','%1EndBattleJS','Scene_Battle_createPartyCommandWindow','gainHalfActionsPTB','isDead','svbattler','Game_Map_battleback1Name','PreStartActionJS','JS\x20ESCAPE\x20FAILURE','TpbActiveChangeEnabled','Game_Battler_performMiss','deactivate','iconHeight','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','_updateTargetValue','Game_Action_updateLastTarget','Enemy-%1-%2','delay','resize','_damages','createLowerLayer','battleAngle','BattleCore','_tpbChargeTime','_skewDuration','GUARD','clearGlobalVariables','selectNextCommandTpb','PerformAction','_targetIndex','ActSeq_Mechanics_VariablePopup','motionSpeed','meetsSelectFrontviewActorConditions','ActSeq_Mechanics_EmulateSkillEffect','ItemID','getBattleMembers','startFloat','setupNegativeImpactFilter','%1EndTurnJS','randomInt','GroupDigits','PostApplyAsTargetJS','onBattleStart','65KHxRQr','UNTITLED','ForceRandom','AddHpGaugeOption','BattleManager_setup','createInnerPortrait','SceneManager_push','moveToStartPositionBattleCore','_enemyMultiTargetWindow','_shadowSprite','value2','stepBack','displayAction','_growWholeDuration','isMagicSkill','_flinched','StatusWindowAttachmentFrontOffsetX','characterName','_executedValue','jsCritRateAsUser','_requestRefresh','resetBreakShield','command119','comboWindowOffsetX','OverallFormulaJS','hpHealingFmt','comboWindowOffsetY','ext','ActSeq_Mechanics_EnemyEscape','drawActorGraphic','battleCoreResumeLaunchBattle','BattleLog','isItemCommandEnabled','Game_BattlerBase_addNewState','Scene_Map_initializeAfter','VoiceLine','ConvertActionSequenceTarget','HelpFight','_linkedSprite','GRID\x20MOVE','spinBattler','Game_Map_battleback2Name','Game_Action_isForOne','Game_Action_isForRandom','applyResultSwitches','Scene_Battle_updateCancelButton','_commonEventKey','WaitComplete','addSingleSkillCommand','clearActiveWeaponSlot','useDigitGrouping','setHue','setBattlerBattleCore','_selectionEffectCount','updateHomeMove','allBattleMembers','updateCallMenu','WaitForExit','getNextSubjectFromPool','ParseAllNotetags','arPenRate','animationBaseDelay','addSkillCommands','addGuardCommand','CmdTextAlign','paintOpacity','AutoBattle','left','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','Sprite_StateIcon_updateFrame','AutoMeleeSolo','setupZoomBlurImpactFilter','\x5cI[%1]\x5cC[%3]%2','victory','damageOffsetX','setupBattleCoreData','drawActorSimpleStatus','selectSymbol','_drawTextBody','gaugeX','Sprite_Actor_setBattler','_onceParallelInterpreters','compareBattlerSprites','<CENTER>%1','setReturnWindow','index','_offsetX','slices','EscapeSuccessJS','PostEndTurnJS','skill','sideview_ui','Game_Temp_requestBalloon','AutoNotetag','visualCutinPortraitIndex','NameDamageVisibility','fittingHeight','isAutoBattleCommandEnabled','show','targetDistortionSpritePosition','ActSeq_Mechanics_CustomDmgFormula','\x5cHEXCOLOR<%1>','enabled','ACTOR_OFFSET_Y','battleStatusSprite','NextTurn','isTriggered','applyData','battleJump','alphabetic','isBusy','NameLegacy','getWtypeIdWithName','removeChildFromUiContainer','isAnyBattleBalloonPlaying','onAngleEnd','_regionBattleback1','turn','ActSeq_Cutin_AddVisualCutinEffect','_angleRevertOnFinish','_targetHomeY','VisuMZ_1_MainMenuCore','ActSeq_Impact_Oversaturate','opponentsUnit','CriticalHitRateJS','checkShowHideBattleNotetags','statusTextAutoBattleStyle','EnableSoftCap','battler','isNonSubmenuCancel','ExtraSettings','FaceAway','ActSeq_Movement_WaitForJump','setupOversaturateImpactFilter','WaitForAngle','getBattlerFromKey','_item','callOkHandler','_lines','_updateCursorFilterArea','ConvertParams','PosOffsetY','AdjustRect','physical','canInput','waitForNewLine','initBattleCore','anchorX','_commandNameWindow','AspectNameFmt','ActSeq_BattleLog_UI','_targetOffsetY','_targetHomeX','FRUSTRATION','animationId','CurrentTurn','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','_target','Scene_Boot_onDatabaseLoaded','animationWait','_targetX','createKeyJS','TextAlign','MUSIC-NOTE','_enemyNameContainer','isActor','onEscapeSuccess','_cancelButton','createPartyCommandWindowBattleCore','TimeScale','skewDuration','startEnemySelection','VisuMZ_1_ElementStatusCore','clearFreezeMotionForWeapons','Window_BattleLog_popupDamage','actionSplicePoint','shift','InBattleStatus','height','LIGHT\x20BULB','VariableHeal','jsScaleDown','_inBattleStatusMode','EasingType','updateBattlebackBitmap2','_isBattlerFlipped','ActSeq_Animation_AttackAnimation','addShowHpGaugeCommand','ParseStateNotetags','animationNextDelay','_motionSpeed','setValue','VisuMZ_2_BattleSystemCTB','Game_Action_setGuard','makeTargets','JS\x20BATTLE\x20DEFEAT','waitForOpacity','processEnemyModeTouchBattleCore','allowRandomSpeed','HpGaugeOffsetX','ActSeq_Movement_HomeMoveToTarget','BattleManager_onEscapeSuccess','Game_Battler_onBattleEnd','ActSeq_Mechanics_BoostPointsStoreData','autoSelectLastSelected','HelpOptions','VisuMZ_4_BreakShields','pha','SWEAT','enemyShowParametersAlways','_battler','performMagicEvasion','Scene_Battle_needsInputWindowChangeIBS','_buttonKey','allowCollapse','clearDamagePopup','actionsFmt','testApply','mainSpriteScaleY','setLetter','version','isBorderStylePortraitShown','ActSeq_Animation_ActionAnimation','applyImmortal','turns','EnemyOffsetX','playCursor','JS\x20%1DAMAGE\x20%2','Wave','getDualWieldTimes','isAffectedByBreakShield','autoSelect','enemyHiddenParameter','Scene_ItemBase_applyItem','chant','_padding','softDamageCapRate','checkTpbInputOpen','updateLink','setHandler','addStateTurns','AUTO\x20BATTLE','ActSeq_Animation_ItemAnimation','processOk','ActSeq_Inject_AnimationPauseResume','ActSeq_Skew_WaitForSkew','svActorHorzCells','Window_BattleEnemy_show','ActSeq_BattleLog_PopBaseLine','isForAliveFriendBattleCore','isSTB','startDamagePopup','ENEMY_OFFSET_Y','visualHpGauge','updateAttachmentSprites','Game_Battler_performDamage','playEnemyAttack','_emptyBitmap','getStypeIdWithName','updateBattlebackBitmap','ParseClassNotetags','_enemyWindow','Game_BattlerBase_isStateResist','autoBattleWindowRect','forActor','HelpEscape','onBattleEnd','result','commandNameWindowDrawBackground','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','Scene_Battle_createActorCommandWindowIBS','PreDamageAsTargetJS','Sprite_Battler_initMembers','backColor','_enemyId','_angleWholeDuration','partyCommandWindowRectXPStyle','VisuMZ_2_BattleSystemOTB','performActionEnd','removeStatesAuto','isStateAffected','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','adjustFlippedBattlefield','updateShadow','ArPenFlat','Game_Enemy_setup','EVAL','ShowCurrentState','trim','performActionStart','49013181aSqpss','ActSeq_Weapon_SetActiveWeapon','cancelActorInput','lineHeight','Window_Options_statusText','findTargetSprite','blt','refreshRequest','apply','isTpb','makeUniqueNames','optDisplayTp','_action','actionBattleCoreJS','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','emerge','jsAccuracy','_borderPortraitDuration','Sprite_Actor_updateFrame','tone','ActSeq_Element_Clear','isAttack','isOpponent','commandStyleCheck','Game_Action_isForFriend','autoBattleAtStart','turnsFmt','updateEffectContainers','applyForcedGameTroopSettingsBattleCore','retrieveBattleBalloon','faceWidth','canSingleOrMultipleSelect','autoBattle','makeCommandList','updateStateIconSprite','_callSceneOptions','Sprite_Battler_damageOffsetY','displayChangedBuffs','Game_Action_setItem','passiveText','ActSeq_Grid_ClearPassiveStatesFromNode','alive\x20battlers','compatibilityVisible','Scene_Battle_commandFight','_growDuration','ActSeq_Grid_AddTriggerToNode','Sprite_Enemy_createStateIconSprite','canEscape','shouldDisperseDamage','visualCutinPortraitType','performSTBExploiter','regionId','displayHpDamage','mainSpriteHeight','gainCurrentActionsFTB','isOpen','8423877ZzKJUg','BindCommonEventKeysForObj','_updateCursorArea','isAutoBattleCommandAdded','isActionSelectionValid','front\x20center','onDisabledPartyCommandSelection','cancelButtonText','battlerSmoothImage','updateFrame','selectAllEnemies','MDF','retreat','isAnyoneSpinning','expTotal','StateIconOffsetX','\x5cI[%1]\x5cHEXCOLOR<%3>%2','drawItemStyleIconText','startTpbTurn','active','stop','alive\x20actors\x20not\x20target','ElementStatusCore','_opacityEasing','performDamage','drawLineText','_targets','removeBattleBalloon','StatusWindowSkinHide','itemLineRect','width','ParseEnemyNotetags','isVisualHpGaugeDisplayed','OffsetX','push','Game_Temp_requestAnimation','NameOffsetX','getBattlePortrait','Scene_Battle_windowAreaHeight','setBattlerFacePoint','Window_BattleLog_performActionStart','isCommandEnabled','clearAllVisualCutins','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','escape','performCollapse','chantStyle','\x5cC[16]%1\x5cC[0]','Sprite_Enemy_update','centerFrontViewSprite','commandSymbol','portraitIndex','_offsetY','isClicked','arRedFlat','nameColor','forceWeaponAnimation','VisuMZ_2_BattleSystemFTB','PostDamage%1JS','_statusType','AspectColor','_regionBattleback2','_actionBattlers','DamageStyles','StateID','setImmortal','Scene_Battle_startEnemySelection','anchor','PostStartTurnJS','helpWindowRect','ActSeq_Mechanics_ActionEffect','ActSeq_Impact_MotionTrailRemove','GetActionSequenceSpecialTarget','spell','applyDamageCaps','selectPreviousCommand','isArray','damagePopupOffsetY','Linear','Sprite_Enemy_updateBossCollapse','setupTextPopup','BattleCmdList','_targetOffsetX','cancelTargetSelectionVisibility','Game_Troop_setup','addSingleSkillCommands','sliceMax','placeGauge','isCancelled','battlerName','preemptive','becomeSTBExploited','portraitType','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','_reflectionTarget','_visibleDuration','Scene_Battle_createAllWindows_ComboWindow','resizeWindowBorderStyle','statusText','setTargetBattlerKey','sortDamageSprites','movement','hpRate','FlashDuration','_angleEasing','ActSeq_Cutin_EndVisualCutinEffectAll','battleAnimation','_flipScaleX','close','ActSeq_Impact_MotionBlurScreen','%1\x20Aspect','canUse','pageButtons','addStatusCommand','PreEndBattleJS','_totalValue','processPostBattleCommonEvents','clear','Game_Action_applyGlobal','autoBattleStart','performMoveToPoint','PointJS','Actions','placeStateIcon','magicSkills','getBattlePortraitFilename','isPlaytest','center'];_0x196a=function(){return _0x24049c;};return _0x196a();}var $subject,$action,$targets;Window_BattleLog[_0x553167(0x22b)][_0x553167(0x1e6)]=function(_0x3aa652,_0x227a0d,_0x29419e){const _0x53fbed=_0x553167;$subject=_0x3aa652,$action=_0x227a0d,$targets=_0x29419e,this[_0x53fbed(0x4ab)](_0x227a0d)?BattleManager[_0x53fbed(0x368)]():this[_0x53fbed(0x320)](_0x3aa652,_0x227a0d,_0x29419e);},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x4ab)]=function(_0x21f4ea){const _0x1f68fc=_0x553167;if(!SceneManager[_0x1f68fc(0x2c2)]())return![];if(!_0x21f4ea)return![];if(!_0x21f4ea['item']())return![];if(_0x21f4ea[_0x1f68fc(0x58c)]()[_0x1f68fc(0x645)][_0x1f68fc(0x750)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x1f68fc(0xbfc)](_0x21f4ea[_0x1f68fc(0x58c)]()))return!![];return![];},Window_BattleLog[_0x553167(0x22b)]['usePremadeActionSequence']=function(_0x3924b3,_0x50565b,_0x162bd4){const _0xfbe8fb=_0x553167;this[_0xfbe8fb(0x16b)](_0x3924b3,_0x50565b,_0x162bd4),this[_0xfbe8fb(0x7b3)](_0x3924b3,_0x50565b,_0x162bd4),this[_0xfbe8fb(0x75f)](_0x3924b3,_0x50565b,_0x162bd4);},Window_BattleLog['prototype'][_0x553167(0x862)]=function(_0xa943de,_0x2f330f){const _0x5e5ffb=_0x553167,_0x50a2f1=VisuMZ[_0x5e5ffb(0x841)]['Settings']['BattleLog'];_0x50a2f1[_0x5e5ffb(0x6cc)]&&this[_0x5e5ffb(0x9d2)](_0x5e5ffb(0x278),_0x5e5ffb(0x8a9)[_0x5e5ffb(0x47d)](DataManager['battleDisplayText'](_0x2f330f)));if(DataManager[_0x5e5ffb(0x2bb)](_0x2f330f)){if(_0x50a2f1[_0x5e5ffb(0x10f)])this['displayItemMessage'](_0x2f330f[_0x5e5ffb(0x454)],_0xa943de,_0x2f330f);if(_0x50a2f1[_0x5e5ffb(0x69c)])this[_0x5e5ffb(0x67e)](_0x2f330f[_0x5e5ffb(0x261)],_0xa943de,_0x2f330f);}else{if(_0x50a2f1[_0x5e5ffb(0x45a)])this[_0x5e5ffb(0x67e)](TextManager[_0x5e5ffb(0x20d)],_0xa943de,_0x2f330f);}},Window_BattleLog['prototype'][_0x553167(0x16b)]=function(_0x11132c,_0x9c3dad,_0x2d7b4a){const _0x3a9d65=_0x553167,_0x582aaa=_0x9c3dad[_0x3a9d65(0x58c)]();this['displayAction'](_0x11132c,_0x582aaa),this[_0x3a9d65(0x9d2)](_0x3a9d65(0x935),_0x11132c,_0x2d7b4a,!![]),this['push'](_0x3a9d65(0x977),_0x11132c,_0x9c3dad),this['push'](_0x3a9d65(0xc00)),this[_0x3a9d65(0x9d2)](_0x3a9d65(0x3ba),_0x11132c,_0x9c3dad),this['push'](_0x3a9d65(0x282));},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x7b3)]=function(_0x478dec,_0x363e6e,_0x1332d2){const _0xa18d39=_0x553167;if(this[_0xa18d39(0x561)](_0x363e6e))this[_0xa18d39(0x37b)](_0x478dec,_0x363e6e,_0x1332d2);else{if(this[_0xa18d39(0x554)](_0x363e6e))this[_0xa18d39(0x2ea)](_0x478dec,_0x363e6e,_0x1332d2);else _0x363e6e[_0xa18d39(0xbc9)]()?this['targetActionSet'](_0x478dec,_0x363e6e,_0x1332d2):this['wholeActionSet'](_0x478dec,_0x363e6e,_0x1332d2);}},Window_BattleLog[_0x553167(0x22b)]['addMeleeReturnActionSet']=function(_0x2ffb27,_0x259277,_0x3f5ccb,_0x4654a6){const _0x6a4207=_0x553167;if(_0x259277){const _0x4e1979=_0x2ffb27[_0x6a4207(0x8d6)]();this[_0x6a4207(0x9d2)]('performJump',[_0x2ffb27],_0x3f5ccb,_0x4654a6),this['push'](_0x6a4207(0xa28),_0x2ffb27,_0x4e1979[_0x6a4207(0x173)],_0x4e1979['_homeY'],_0x4654a6,![],_0x6a4207(0x9fe)),this[_0x6a4207(0x9d2)]('requestMotion',[_0x2ffb27],'evade'),this['push'](_0x6a4207(0xc00)),this[_0x6a4207(0x9d2)](_0x6a4207(0x188),[_0x2ffb27],_0x6a4207(0x57d));}},Window_BattleLog['prototype']['isMeleeSingleTargetAction']=function(_0x54f2de){const _0x3d9313=_0x553167;if(!_0x54f2de[_0x3d9313(0xa5c)]())return![];if(!_0x54f2de['isForOne']())return![];if(!_0x54f2de[_0x3d9313(0x745)]())return![];return VisuMZ['BattleCore'][_0x3d9313(0x309)]['ActionSequence'][_0x3d9313(0x89c)];},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x37b)]=function(_0x20e110,_0x1dc6ae,_0x3f743b){const _0x1c311f=_0x553167,_0x3b1d15=_0x20e110[_0x1c311f(0x23d)]()[_0x1c311f(0x484)]<0x2,_0x10d109=0x14,_0x67f239=0x30;let _0x22053a=!![];_0x3f743b['length']>0x0&&_0x20e110[_0x1c311f(0x8fb)]()===_0x3f743b[0x0]['isActor']()&&(_0x22053a=![]);_0x3b1d15&&_0x22053a&&(this[_0x1c311f(0x9d2)](_0x1c311f(0x313),[_0x20e110],_0x67f239,_0x10d109),this['push']('performMoveToTargets',_0x20e110,_0x3f743b,_0x1c311f(0x2c0),_0x10d109,!![],_0x1c311f(0x9fe),!![]),this['push']('requestMotion',[_0x20e110],_0x1c311f(0x57d)),this['push']('waitForMovement'));let _0xd7ae08=_0x1dc6ae[_0x1c311f(0x98d)]()?this[_0x1c311f(0x93b)](_0x20e110):0x1;for(let _0xe2c62d=0x0;_0xe2c62d<_0xd7ae08;_0xe2c62d++){_0x1dc6ae['isAttack']()&&_0x20e110[_0x1c311f(0x8fb)]()&&this[_0x1c311f(0x9d2)](_0x1c311f(0xb4e),_0x20e110,_0xe2c62d),_0x1dc6ae[_0x1c311f(0x58c)]()['animationId']<0x0?this[_0x1c311f(0xa4b)](_0x20e110,_0x1dc6ae,_0x3f743b):this[_0x1c311f(0x3f1)](_0x20e110,_0x1dc6ae,_0x3f743b);}_0x1dc6ae[_0x1c311f(0x98d)]()&&_0x20e110['isActor']()&&this[_0x1c311f(0x9d2)](_0x1c311f(0x55f),_0x20e110),this[_0x1c311f(0x9d2)](_0x1c311f(0x935),_0x20e110,_0x3f743b,![]),this[_0x1c311f(0x2c6)](_0x20e110,_0x3b1d15,_0x67f239,_0x10d109);},Window_BattleLog[_0x553167(0x22b)]['isMeleeMultiTargetAction']=function(_0x311159){const _0x283f11=_0x553167;if(!_0x311159[_0x283f11(0xa5c)]())return![];if(!_0x311159[_0x283f11(0xae1)]())return![];if(!_0x311159[_0x283f11(0x745)]())return![];return VisuMZ['BattleCore'][_0x283f11(0x309)][_0x283f11(0x740)]['AutoMeleeAoE'];},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x2ea)]=function(_0x305e74,_0x289685,_0x5a658c){const _0x236f29=_0x553167,_0x119625=_0x305e74[_0x236f29(0x23d)]()['type']<0x2,_0x169fda=0x14,_0x41f778=0x30;if(_0x119625){this[_0x236f29(0x9d2)]('performJump',[_0x305e74],_0x41f778,_0x169fda);const _0x2978cb=_0x5a658c[_0x236f29(0x635)]>0x1?_0x236f29(0x9b5):_0x236f29(0x2c0);this['push'](_0x236f29(0xaf3),_0x305e74,_0x5a658c,_0x2978cb,_0x169fda,!![],_0x236f29(0x9fe),!![]),this[_0x236f29(0x9d2)](_0x236f29(0x188),[_0x305e74],_0x236f29(0x57d)),this['push'](_0x236f29(0xc00));}let _0x34f2c3=_0x289685['isAttack']()?this[_0x236f29(0x93b)](_0x305e74):0x1;for(let _0x341909=0x0;_0x341909<_0x34f2c3;_0x341909++){_0x289685[_0x236f29(0x98d)]()&&_0x305e74[_0x236f29(0x8fb)]()&&this[_0x236f29(0x9d2)](_0x236f29(0xb4e),_0x305e74,_0x341909),this[_0x236f29(0x3f1)](_0x305e74,_0x289685,_0x5a658c);}_0x289685[_0x236f29(0x98d)]()&&_0x305e74[_0x236f29(0x8fb)]()&&this[_0x236f29(0x9d2)]('clearActiveWeaponSet',_0x305e74),this[_0x236f29(0x9d2)](_0x236f29(0x935),_0x305e74,_0x5a658c,![]),this[_0x236f29(0x2c6)](_0x305e74,_0x119625,_0x41f778,_0x169fda);},Window_BattleLog[_0x553167(0x22b)][_0x553167(0xa4b)]=function(_0x53bb6f,_0x207fac,_0x1c9aae){const _0x255631=_0x553167,_0x4e581a=_0x207fac['item']();for(const _0x769eff of _0x1c9aae){if(!_0x769eff)continue;this['push']('performAction',_0x53bb6f,_0x207fac),this[_0x255631(0x9d2)](_0x255631(0x79a),Sprite_Battler[_0x255631(0x914)]),this[_0x255631(0x9d2)](_0x255631(0x439),_0x53bb6f,[_0x769eff],_0x4e581a['animationId']),this[_0x255631(0x9d2)]('waitCount',0x18),this[_0x255631(0x9d2)](_0x255631(0x607),_0x53bb6f,_0x769eff);}},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x3f1)]=function(_0x50009a,_0xaa2bfe,_0x161e18){const _0x40c6ee=_0x553167,_0x4eb11e=_0xaa2bfe[_0x40c6ee(0x58c)]();let _0x306d91=_0xaa2bfe[_0x40c6ee(0x98d)]()?0x1+_0x50009a['attackTimesAdd']():0x1;while(_0x306d91--){this[_0x40c6ee(0x9d2)](_0x40c6ee(0x119),_0x50009a,_0xaa2bfe),this[_0x40c6ee(0x9d2)](_0x40c6ee(0x79a),Sprite_Battler[_0x40c6ee(0x914)]),this['push']('showAnimation',_0x50009a,_0x161e18[_0x40c6ee(0x426)](),_0x4eb11e[_0x40c6ee(0x8f0)]),this[_0x40c6ee(0x9d2)](_0x40c6ee(0x282));}for(const _0x2090a6 of _0x161e18){if(!_0x2090a6)continue;this[_0x40c6ee(0x9d2)](_0x40c6ee(0x607),_0x50009a,_0x2090a6);}},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x75f)]=function(_0x34dbd,_0x1cf8d2,_0x4f4d7b){const _0x5606e9=_0x553167,_0x339432=_0x1cf8d2[_0x5606e9(0x58c)]();this[_0x5606e9(0x9d2)](_0x5606e9(0x935),_0x34dbd,_0x4f4d7b,![]),this[_0x5606e9(0x9d2)]('waitForNewLine'),this[_0x5606e9(0x9d2)](_0x5606e9(0x301)),this[_0x5606e9(0x9d2)](_0x5606e9(0xa25)),this[_0x5606e9(0x9d2)](_0x5606e9(0x96c),_0x34dbd),this[_0x5606e9(0x9d2)](_0x5606e9(0xc00));},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x1bf)]=function(_0xeea5fc){$subject=null,$action=null,$targets=[];},VisuMZ[_0x553167(0x841)][_0x553167(0x804)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x1e4)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x1e4)]=function(_0x45a944){const _0x3e389e=_0x553167;if(!VisuMZ[_0x3e389e(0x841)][_0x3e389e(0x309)][_0x3e389e(0x875)][_0x3e389e(0x975)])return;VisuMZ['BattleCore']['Window_BattleLog_displayCurrentState'][_0x3e389e(0x7f7)](this,_0x45a944);},Window_BattleLog[_0x553167(0x22b)]['displayCounter']=function(_0x1f27e9){const _0x5e34d0=_0x553167;this['push'](_0x5e34d0(0x2dd),_0x1f27e9);VisuMZ[_0x5e34d0(0x841)][_0x5e34d0(0x309)][_0x5e34d0(0x740)][_0x5e34d0(0xb35)]&&this[_0x5e34d0(0x9d2)](_0x5e34d0(0x439),_0x1f27e9,[BattleManager[_0x5e34d0(0x1ef)]],-0x1);if(!VisuMZ[_0x5e34d0(0x841)]['Settings'][_0x5e34d0(0x875)][_0x5e34d0(0x3aa)])return;this['push']('addText',TextManager[_0x5e34d0(0x183)]['format'](_0x1f27e9[_0x5e34d0(0xc04)]()));},Window_BattleLog['prototype'][_0x553167(0x771)]=function(_0x245037){const _0x30110c=_0x553167;this[_0x30110c(0x9d2)](_0x30110c(0xbe7),_0x245037);if(!VisuMZ[_0x30110c(0x841)][_0x30110c(0x309)][_0x30110c(0x875)][_0x30110c(0x748)])return;this[_0x30110c(0x9d2)](_0x30110c(0x278),TextManager[_0x30110c(0x25c)][_0x30110c(0x47d)](_0x245037[_0x30110c(0xc04)]()));},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x1f0)]=function(_0x544d50,_0x146499){const _0x2f820f=_0x553167;if(VisuMZ['BattleCore'][_0x2f820f(0x309)][_0x2f820f(0x740)][_0x2f820f(0xb57)]){const _0xb3addd=_0x146499[_0x2f820f(0x58c)]();this[_0x2f820f(0x9d2)](_0x2f820f(0x439),_0x544d50,[_0x544d50],_0xb3addd[_0x2f820f(0x8f0)]);}},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x37e)]=function(_0xe8ba0a,_0x22d505){const _0x20f41f=_0x553167;this[_0x20f41f(0x9d2)](_0x20f41f(0x22e),_0xe8ba0a,_0x22d505);if(!VisuMZ['BattleCore'][_0x20f41f(0x309)][_0x20f41f(0x875)]['ShowSubstitute'])return;const _0x11a209=_0xe8ba0a['name'](),_0x1edc0d=TextManager[_0x20f41f(0x6d2)]['format'](_0x11a209,_0x22d505[_0x20f41f(0xc04)]());this[_0x20f41f(0x9d2)]('addText',_0x1edc0d);},VisuMZ[_0x553167(0x841)][_0x553167(0x32b)]=Window_BattleLog['prototype'][_0x553167(0x4d2)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x4d2)]=function(_0x3bd1b7,_0x463dcf){const _0x5a6cf2=_0x553167;VisuMZ['BattleCore'][_0x5a6cf2(0x32b)][_0x5a6cf2(0x7f7)](this,_0x3bd1b7,_0x463dcf);},VisuMZ[_0x553167(0x841)][_0x553167(0x68b)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x5bd)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x5bd)]=function(_0x331c08){const _0x1453df=_0x553167;if(!VisuMZ[_0x1453df(0x841)][_0x1453df(0x309)][_0x1453df(0x875)]['ShowFailure'])return;VisuMZ[_0x1453df(0x841)][_0x1453df(0x68b)][_0x1453df(0x7f7)](this,_0x331c08);},VisuMZ[_0x553167(0x841)][_0x553167(0x65c)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x6e1)],Window_BattleLog[_0x553167(0x22b)]['displayCritical']=function(_0x441203){const _0xb6a9d4=_0x553167;if(!VisuMZ['BattleCore'][_0xb6a9d4(0x309)][_0xb6a9d4(0x875)]['ShowCritical'])return;VisuMZ[_0xb6a9d4(0x841)][_0xb6a9d4(0x65c)][_0xb6a9d4(0x7f7)](this,_0x441203);},VisuMZ[_0x553167(0x841)][_0x553167(0xb07)]=Window_BattleLog[_0x553167(0x22b)]['displayMiss'],Window_BattleLog[_0x553167(0x22b)]['displayMiss']=function(_0x48947e){const _0x419ea0=_0x553167;!VisuMZ[_0x419ea0(0x841)][_0x419ea0(0x309)][_0x419ea0(0x875)]['ShowMissEvasion']?this[_0x419ea0(0x9d2)](_0x419ea0(0x470),_0x48947e):VisuMZ['BattleCore'][_0x419ea0(0xb07)][_0x419ea0(0x7f7)](this,_0x48947e);},VisuMZ['BattleCore'][_0x553167(0xb8a)]=Window_BattleLog[_0x553167(0x22b)]['displayEvasion'],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x4f0)]=function(_0x497b3f){const _0xec77c0=_0x553167;!VisuMZ[_0xec77c0(0x841)]['Settings'][_0xec77c0(0x875)][_0xec77c0(0x80b)]?_0x497b3f[_0xec77c0(0x961)]()[_0xec77c0(0x8e5)]?this[_0xec77c0(0x9d2)](_0xec77c0(0xac2),_0x497b3f):this[_0xec77c0(0x9d2)](_0xec77c0(0x929),_0x497b3f):VisuMZ[_0xec77c0(0x841)]['Window_BattleLog_displayEvasion']['call'](this,_0x497b3f);},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x9ac)]=function(_0x4d692c){const _0x3d2ddd=_0x553167;_0x4d692c[_0x3d2ddd(0x961)]()['hpAffected']&&(_0x4d692c[_0x3d2ddd(0x6ad)]=0x0,_0x4d692c[_0x3d2ddd(0x961)]()[_0x3d2ddd(0x523)]>0x0&&!_0x4d692c[_0x3d2ddd(0x961)]()[_0x3d2ddd(0xb4f)]&&(_0x4d692c[_0x3d2ddd(0x6ad)]=_0x4d692c[_0x3d2ddd(0x961)]()[_0x3d2ddd(0x523)],this[_0x3d2ddd(0x9d2)]('performDamage',_0x4d692c)),_0x4d692c['result']()[_0x3d2ddd(0x523)]<0x0&&this[_0x3d2ddd(0x9d2)]('performRecovery',_0x4d692c),VisuMZ[_0x3d2ddd(0x841)][_0x3d2ddd(0x309)]['BattleLog']['ShowHpDmg']&&this[_0x3d2ddd(0x9d2)]('addText',this[_0x3d2ddd(0xba5)](_0x4d692c)));},VisuMZ['BattleCore'][_0x553167(0x422)]=Window_BattleLog[_0x553167(0x22b)]['displayMpDamage'],Window_BattleLog['prototype']['displayMpDamage']=function(_0x1e5097){const _0x535ff8=_0x553167;if(!VisuMZ[_0x535ff8(0x841)][_0x535ff8(0x309)][_0x535ff8(0x875)][_0x535ff8(0x566)])return;VisuMZ[_0x535ff8(0x841)][_0x535ff8(0x422)][_0x535ff8(0x7f7)](this,_0x1e5097);},VisuMZ[_0x553167(0x841)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x553167(0x22b)][_0x553167(0xa40)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0xa40)]=function(_0x1f2f5f){const _0x19a827=_0x553167;if(!VisuMZ['BattleCore'][_0x19a827(0x309)][_0x19a827(0x875)]['ShowTpDmg'])return;VisuMZ['BattleCore']['Window_BattleLog_displayTpDamage'][_0x19a827(0x7f7)](this,_0x1f2f5f);},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x775)]=function(_0x281501){const _0x5c68db=_0x553167;_0x281501[_0x5c68db(0x961)]()['isStatusAffected']()&&(this[_0x5c68db(0x9d2)](_0x5c68db(0x3ce)),this[_0x5c68db(0xa88)](_0x281501),this[_0x5c68db(0x99d)](_0x281501),this['push'](_0x5c68db(0x8e7)));},Window_BattleLog[_0x553167(0x22b)]['displayAddedStates']=function(_0x5ec646){const _0x5ce691=_0x553167,_0x2d8a5a=_0x5ec646[_0x5ce691(0x961)](),_0x1c33bb=_0x2d8a5a['addedStateObjects']();for(const _0x46b654 of _0x1c33bb){const _0x4b9942=_0x5ec646['isActor']()?_0x46b654[_0x5ce691(0x454)]:_0x46b654['message2'];_0x4b9942&&VisuMZ['BattleCore'][_0x5ce691(0x309)][_0x5ce691(0x875)][_0x5ce691(0x648)]&&(this[_0x5ce691(0x9d2)](_0x5ce691(0x77a)),this[_0x5ce691(0x9d2)]('popBaseLine'),this[_0x5ce691(0x9d2)](_0x5ce691(0x3ce)),this[_0x5ce691(0x9d2)](_0x5ce691(0x278),_0x4b9942[_0x5ce691(0x47d)](_0x5ec646[_0x5ce691(0xc04)]())),this[_0x5ce691(0x9d2)]('wait')),_0x46b654['id']===_0x5ec646[_0x5ce691(0x154)]()&&this[_0x5ce691(0x9d2)](_0x5ce691(0x9dd),_0x5ec646);}},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x77a)]=function(){},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x6ef)]=function(_0x33299c){const _0x2d2dd3=_0x553167;if(!VisuMZ['BattleCore'][_0x2d2dd3(0x309)][_0x2d2dd3(0x875)][_0x2d2dd3(0x145)])return;const _0x42c03d=_0x33299c[_0x2d2dd3(0x961)](),_0x3d76cf=_0x42c03d['removedStateObjects']();for(const _0x3afb5b of _0x3d76cf){_0x3afb5b[_0x2d2dd3(0xa53)]&&(this[_0x2d2dd3(0x9d2)](_0x2d2dd3(0x76a)),this[_0x2d2dd3(0x9d2)](_0x2d2dd3(0x63e)),this[_0x2d2dd3(0x9d2)]('pushBaseLine'),this[_0x2d2dd3(0x9d2)](_0x2d2dd3(0x278),_0x3afb5b[_0x2d2dd3(0xa53)]['format'](_0x33299c[_0x2d2dd3(0xc04)]())),this[_0x2d2dd3(0x9d2)](_0x2d2dd3(0xb72)));}},Window_BattleLog['prototype'][_0x553167(0x76a)]=function(){},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x99d)]=function(_0x3078fa){const _0x42cedb=_0x553167,_0xce7101=VisuMZ[_0x42cedb(0x841)][_0x42cedb(0x309)][_0x42cedb(0x875)],_0x13805b=_0x3078fa['result']();if(_0xce7101[_0x42cedb(0x394)])this['displayBuffs'](_0x3078fa,_0x13805b[_0x42cedb(0x501)],TextManager['buffAdd']);if(_0xce7101[_0x42cedb(0x73b)])this[_0x42cedb(0xb8e)](_0x3078fa,_0x13805b[_0x42cedb(0x502)],TextManager['debuffAdd']);if(_0xce7101[_0x42cedb(0xbaf)])this[_0x42cedb(0xb8e)](_0x3078fa,_0x13805b['removedBuffs'],TextManager[_0x42cedb(0x816)]);},Window_BattleLog['prototype'][_0x553167(0xb8e)]=function(_0x3b2f82,_0x26d3a3,_0x35d2f8){const _0x1911fc=_0x553167;for(const _0x535835 of _0x26d3a3){const _0x21c163=_0x35d2f8[_0x1911fc(0x47d)](_0x3b2f82[_0x1911fc(0xc04)](),TextManager['param'](_0x535835));this['push'](_0x1911fc(0x63e)),this['push'](_0x1911fc(0x3ce)),this[_0x1911fc(0x9d2)]('addText',_0x21c163),this[_0x1911fc(0x9d2)](_0x1911fc(0xb72));}},VisuMZ['BattleCore'][_0x553167(0x698)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0xa25)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0xa25)]=function(){const _0x38a718=_0x553167;VisuMZ['BattleCore'][_0x38a718(0x698)][_0x38a718(0x7f7)](this),this[_0x38a718(0x103)]();},VisuMZ[_0x553167(0x841)][_0x553167(0xba2)]=Window_BattleLog['prototype'][_0x553167(0x3ce)],Window_BattleLog['prototype'][_0x553167(0x3ce)]=function(){const _0x439654=_0x553167;VisuMZ[_0x439654(0x841)][_0x439654(0xba2)][_0x439654(0x7f7)](this),this[_0x439654(0x103)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x604)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x63e)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x63e)]=function(){const _0x425499=_0x553167;VisuMZ[_0x425499(0x841)]['Window_BattleLog_popBaseLine'][_0x425499(0x7f7)](this),this['processRefresh'](),this[_0x425499(0x103)]();},VisuMZ['BattleCore'][_0x553167(0x904)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0xaec)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0xaec)]=function(_0x9eb1a2){const _0x5e23af=_0x553167;VisuMZ[_0x5e23af(0x841)][_0x5e23af(0x904)][_0x5e23af(0x7f7)](this,_0x9eb1a2),this[_0x5e23af(0x103)]();},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x8e7)]=function(){const _0x37d222=_0x553167;let _0x410cac=0x0;this[_0x37d222(0x38f)]['length']>0x0&&(_0x410cac=this[_0x37d222(0x38f)][this[_0x37d222(0x38f)]['length']-0x1]),this['_lines'][_0x37d222(0x635)]>_0x410cac?this['wait']():this[_0x37d222(0x103)]();},VisuMZ[_0x553167(0x841)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x553167(0x22b)]['performActionStart'],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x977)]=function(_0x3d4f60,_0x411d88){const _0xdff98a=_0x553167;VisuMZ[_0xdff98a(0x841)][_0xdff98a(0x9d8)][_0xdff98a(0x7f7)](this,_0x3d4f60,_0x411d88),this[_0xdff98a(0x103)]();},VisuMZ['BattleCore'][_0x553167(0x1e2)]=Window_BattleLog['prototype'][_0x553167(0x119)],Window_BattleLog['prototype'][_0x553167(0x119)]=function(_0x5b963f,_0x167da1){const _0x12ceb8=_0x553167;VisuMZ['BattleCore']['Window_BattleLog_performAction'][_0x12ceb8(0x7f7)](this,_0x5b963f,_0x167da1),this[_0x12ceb8(0x103)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x76b)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x96c)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x96c)]=function(_0x1c8a2b){const _0x1341ef=_0x553167;VisuMZ[_0x1341ef(0x841)][_0x1341ef(0x76b)][_0x1341ef(0x7f7)](this,_0x1c8a2b);for(const _0x3a4012 of BattleManager[_0x1341ef(0x88d)]()){if(!_0x3a4012)continue;if(_0x3a4012['isDead']())continue;_0x3a4012[_0x1341ef(0xbbd)]();}this[_0x1341ef(0x103)]();},VisuMZ[_0x553167(0x841)][_0x553167(0xb6c)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x9c8)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x9c8)]=function(_0x535e1c){const _0x4a166d=_0x553167;VisuMZ[_0x4a166d(0x841)][_0x4a166d(0xb6c)][_0x4a166d(0x7f7)](this,_0x535e1c),this[_0x4a166d(0x103)]();},VisuMZ[_0x553167(0x841)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x470)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x470)]=function(_0x34306a){const _0x57f3ce=_0x553167;VisuMZ['BattleCore'][_0x57f3ce(0x7f5)][_0x57f3ce(0x7f7)](this,_0x34306a),this['callNextMethod']();},VisuMZ[_0x553167(0x841)][_0x553167(0x7df)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x573)],Window_BattleLog['prototype'][_0x553167(0x573)]=function(_0xdcb7ad){const _0x533f2b=_0x553167;VisuMZ[_0x533f2b(0x841)][_0x533f2b(0x7df)][_0x533f2b(0x7f7)](this,_0xdcb7ad),this[_0x533f2b(0x103)]();},VisuMZ[_0x553167(0x841)][_0x553167(0xbc6)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0xac2)],Window_BattleLog[_0x553167(0x22b)]['performEvasion']=function(_0x1c615b){const _0x5534cb=_0x553167;VisuMZ[_0x5534cb(0x841)][_0x5534cb(0xbc6)]['call'](this,_0x1c615b),this[_0x5534cb(0x103)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x624)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x929)],Window_BattleLog['prototype'][_0x553167(0x929)]=function(_0x5f2e71){const _0x51d0a0=_0x553167;VisuMZ[_0x51d0a0(0x841)][_0x51d0a0(0x624)][_0x51d0a0(0x7f7)](this,_0x5f2e71),this['callNextMethod']();},VisuMZ[_0x553167(0x841)][_0x553167(0x346)]=Window_BattleLog[_0x553167(0x22b)][_0x553167(0x2dd)],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x2dd)]=function(_0x2062b2){const _0x2dd41a=_0x553167;VisuMZ[_0x2dd41a(0x841)][_0x2dd41a(0x346)][_0x2dd41a(0x7f7)](this,_0x2062b2),this[_0x2dd41a(0x103)]();},VisuMZ['BattleCore']['Window_BattleLog_performReflection']=Window_BattleLog[_0x553167(0x22b)]['performReflection'],Window_BattleLog[_0x553167(0x22b)][_0x553167(0xbe7)]=function(_0x2d2cc6){const _0x11b2b8=_0x553167;VisuMZ['BattleCore']['Window_BattleLog_performReflection'][_0x11b2b8(0x7f7)](this,_0x2d2cc6),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']=Window_BattleLog['prototype'][_0x553167(0x22e)],Window_BattleLog[_0x553167(0x22b)]['performSubstitute']=function(_0x350c1b,_0x145f77){const _0x427406=_0x553167;VisuMZ[_0x427406(0x841)]['Window_BattleLog_performSubstitute'][_0x427406(0x7f7)](this,_0x350c1b,_0x145f77),this[_0x427406(0x103)]();},VisuMZ[_0x553167(0x841)][_0x553167(0x17c)]=Window_BattleLog[_0x553167(0x22b)]['performCollapse'],Window_BattleLog[_0x553167(0x22b)][_0x553167(0x9dd)]=function(_0x402e4f){const _0x54aa6e=_0x553167;VisuMZ[_0x54aa6e(0x841)][_0x54aa6e(0x17c)]['call'](this,_0x402e4f),this[_0x54aa6e(0x103)]();},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x3ba)]=function(_0x4838f3,_0xa2d78b){const _0x525e64=_0x553167;_0x4838f3[_0x525e64(0x3ba)](_0xa2d78b),this[_0x525e64(0x103)]();},Window_BattleLog['prototype']['showEnemyAttackAnimation']=function(_0x2bdd2a,_0x9224fc){const _0x37ce3c=_0x553167,_0x10ffa9=_0x2bdd2a['attackAnimationId1']();_0x10ffa9<=0x0?SoundManager[_0x37ce3c(0x956)]():this[_0x37ce3c(0x81f)](_0x9224fc,_0x10ffa9);},Window_BattleLog['prototype']['applyImmortal']=function(_0x2b6605,_0xe35205,_0x130279){const _0x2efe92=_0x553167,_0x2095cb=[_0x2b6605][_0x2efe92(0xa3b)](_0xe35205);for(const _0x2d734c of _0x2095cb){if(!_0x2d734c)continue;_0x2d734c[_0x2efe92(0x9f1)](_0x130279);}this[_0x2efe92(0x103)]();},Window_BattleLog[_0x553167(0x22b)]['waitCount']=function(_0x494e2f){const _0x160e97=_0x553167;this[_0x160e97(0xb95)]=_0x494e2f;},Window_BattleLog[_0x553167(0x22b)]['requestMotion']=function(_0x41d8e9,_0xba0491){const _0x30b5ab=_0x553167;for(const _0x215e70 of _0x41d8e9){if(!_0x215e70)continue;_0x215e70['requestMotion'](_0xba0491);}this[_0x30b5ab(0x103)]();},Window_BattleLog['prototype'][_0x553167(0xa28)]=function(_0x47d605,_0x3bd571,_0x1a391d,_0x1f8e9e,_0x4ca199,_0x4504ca){const _0xa065c6=_0x553167;_0x47d605[_0xa065c6(0x7a8)](_0x3bd571,_0x1a391d,_0x1f8e9e,_0x4ca199,_0x4504ca,-0x1),this['callNextMethod']();},Window_BattleLog[_0x553167(0x22b)][_0x553167(0xaf3)]=function(_0x54bdce,_0x1fdac5,_0x24d835,_0x34cae9,_0x36d1b8,_0x367a4b,_0xef9cc1){const _0x31f302=_0x553167,_0x351236=Math[_0x31f302(0x6b0)](..._0x1fdac5[_0x31f302(0x5c6)](_0x46d033=>_0x46d033[_0x31f302(0x8d6)]()[_0x31f302(0x649)]-_0x46d033[_0x31f302(0x8d6)]()[_0x31f302(0x1ca)]()/0x2)),_0x5be120=Math[_0x31f302(0x4c1)](..._0x1fdac5[_0x31f302(0x5c6)](_0xa27e4c=>_0xa27e4c['battler']()[_0x31f302(0x649)]+_0xa27e4c['battler']()[_0x31f302(0x1ca)]()/0x2)),_0x2649c0=Math[_0x31f302(0x6b0)](..._0x1fdac5['map'](_0x161cd6=>_0x161cd6['battler']()[_0x31f302(0x756)]-_0x161cd6[_0x31f302(0x8d6)]()[_0x31f302(0x9ad)]())),_0x45cf15=Math[_0x31f302(0x4c1)](..._0x1fdac5[_0x31f302(0x5c6)](_0x5457c7=>_0x5457c7['battler']()[_0x31f302(0x756)])),_0x3bef22=_0x1fdac5[_0x31f302(0x577)](_0x315dde=>_0x315dde[_0x31f302(0x8fb)]())[_0x31f302(0x635)],_0x39c7c2=_0x1fdac5[_0x31f302(0x577)](_0xefcd30=>_0xefcd30[_0x31f302(0x602)]())[_0x31f302(0x635)];let _0x254d7e=0x0,_0x575df8=0x0;if(_0x24d835[_0x31f302(0x750)](/front/i))_0x254d7e=_0x3bef22>=_0x39c7c2?_0x351236:_0x5be120;else{if(_0x24d835['match'](/middle/i))_0x254d7e=(_0x351236+_0x5be120)/0x2,_0xef9cc1=-0x1;else _0x24d835['match'](/back/i)&&(_0x254d7e=_0x3bef22>=_0x39c7c2?_0x5be120:_0x351236);}if(_0x24d835['match'](/head/i))_0x575df8=_0x2649c0;else{if(_0x24d835[_0x31f302(0x750)](/center/i)){_0x575df8=(_0x2649c0+_0x45cf15)/0x2;if(_0x54bdce[_0x31f302(0x8d6)]())_0x575df8+=_0x54bdce[_0x31f302(0x8d6)]()[_0x31f302(0x908)]/0x2;}else _0x24d835[_0x31f302(0x750)](/base/i)&&(_0x575df8=_0x45cf15);}_0x54bdce[_0x31f302(0x7a8)](_0x254d7e,_0x575df8,_0x34cae9,_0x36d1b8,_0x367a4b,_0xef9cc1),this[_0x31f302(0x103)]();},Window_BattleLog[_0x553167(0x22b)][_0x553167(0x313)]=function(_0x47b44b,_0x1c95fd,_0x54f912){const _0x711931=_0x553167;for(const _0x36366e of _0x47b44b){if(!_0x36366e)continue;_0x36366e['jumpBattler'](_0x1c95fd,_0x54f912);}this[_0x711931(0x103)]();};function Window_BattleMultiTarget(){const _0x1f0c55=_0x553167;this[_0x1f0c55(0x7a1)](...arguments);}Window_BattleMultiTarget[_0x553167(0x22b)]=Object[_0x553167(0x595)](Window_Command[_0x553167(0x22b)]),Window_BattleMultiTarget[_0x553167(0x22b)][_0x553167(0x589)]=Window_BattleMultiTarget,VisuMZ[_0x553167(0x841)][_0x553167(0x309)]['MultiTarget']=VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0xbc8)]||{},Window_BattleMultiTarget['WIDTH']=VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0xbc8)][_0x553167(0x253)]??0x118,Window_BattleMultiTarget[_0x553167(0x353)]=VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0xbc8)][_0x553167(0x7c6)]??0x2,Window_BattleMultiTarget['SHOW_BUTTON']=VisuMZ['BattleCore']['Settings'][_0x553167(0xbc8)]['ShowButton']??!![],Window_BattleMultiTarget[_0x553167(0x3e8)]=VisuMZ['BattleCore']['Settings']['MultiTarget']['AllActorsText']??_0x553167(0x486),Window_BattleMultiTarget['ALL_ENEMIES']=VisuMZ['BattleCore']['Settings'][_0x553167(0xbc8)][_0x553167(0x6b9)]??_0x553167(0xa93),Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0xbc8)][_0x553167(0x716)]??0x0,Window_BattleMultiTarget[_0x553167(0x8bd)]=VisuMZ[_0x553167(0x841)][_0x553167(0x309)]['MultiTarget']['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0x553167(0x214)]=VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0xbc8)][_0x553167(0x937)]??0x0,Window_BattleMultiTarget[_0x553167(0x952)]=VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0xbc8)]['EnemyOffsetY']??0x0,Window_BattleMultiTarget[_0x553167(0x22b)][_0x553167(0x7a1)]=function(_0x34971a,_0x50bbc5){const _0x2156cf=_0x553167;this[_0x2156cf(0x304)]=_0x50bbc5,Window_Command[_0x2156cf(0x22b)][_0x2156cf(0x7a1)][_0x2156cf(0x7f7)](this,_0x34971a),this[_0x2156cf(0x785)](Window_BattleMultiTarget[_0x2156cf(0x353)]),this[_0x2156cf(0x836)](),this['hide'](),this[_0x2156cf(0xbdf)]();},Window_BattleMultiTarget[_0x553167(0x22b)][_0x553167(0x95e)]=function(){const _0x8ccdc3=_0x553167;return this[_0x8ccdc3(0x304)];},Window_BattleMultiTarget[_0x553167(0x22b)][_0x553167(0x999)]=function(){const _0x3370ea=_0x553167;let _0x48e486=this[_0x3370ea(0x95e)]()?Window_BattleMultiTarget[_0x3370ea(0x3e8)]:Window_BattleMultiTarget['ALL_ENEMIES'];if(Imported[_0x3370ea(0x28b)]&&Window_BattleMultiTarget['SHOW_BUTTON']){this[_0x3370ea(0x92b)]=this['forActor']()?_0x3370ea(0x755):_0x3370ea(0x7e8),this[_0x3370ea(0xb0b)]=TextManager['getInputButtonString'](this[_0x3370ea(0x92b)]);const _0x156373=VisuMZ['CoreEngine'][_0x3370ea(0x309)][_0x3370ea(0x1d7)]['TextFmt'];_0x48e486=_0x156373[_0x3370ea(0x47d)](this[_0x3370ea(0xb0b)],_0x48e486);}this[_0x3370ea(0xaf6)](_0x48e486,_0x3370ea(0x356));},Window_BattleMultiTarget['prototype'][_0x553167(0x2f2)]=function(_0x333271){const _0x3be18a=_0x553167,_0x2741de=this[_0x3be18a(0x9cd)](_0x333271);this['resetTextColor'](),this[_0x3be18a(0x319)](this['isCommandEnabled'](_0x333271));const _0x50a230=this['commandName'](_0x333271),_0x32f888=this[_0x3be18a(0x39c)](_0x50a230)[_0x3be18a(0x9ce)],_0x4dff5c=_0x2741de['x']+Math[_0x3be18a(0x66d)]((_0x2741de[_0x3be18a(0x9ce)]-_0x32f888)/0x2);this[_0x3be18a(0x3cf)](_0x50a230,_0x4dff5c,_0x2741de['y'],_0x2741de[_0x3be18a(0x9ce)]);},Window_BattleMultiTarget['prototype'][_0x553167(0xbcd)]=function(){const _0x3e5906=_0x553167;Window_Command[_0x3e5906(0x22b)][_0x3e5906(0xbcd)][_0x3e5906(0x7f7)](this),this[_0x3e5906(0x3f7)](),this[_0x3e5906(0x78d)]();},Window_BattleMultiTarget['prototype'][_0x553167(0x3f7)]=function(){const _0x3faa31=_0x553167;this['visible']=this[_0x3faa31(0xb7f)]();},Window_BattleMultiTarget['prototype'][_0x553167(0xb7f)]=function(){const _0x431bf5=_0x553167,_0x2fe270=BattleManager[_0x431bf5(0x815)](),_0x3d5faf=_0x2fe270&&_0x2fe270[_0x431bf5(0x997)]();if(!_0x3d5faf)return![];const _0x14e178=SceneManager[_0x431bf5(0xa7f)];if(this[_0x431bf5(0x95e)]()){if(_0x14e178[_0x431bf5(0xa4e)][_0x431bf5(0x9c3)]&&_0x14e178[_0x431bf5(0xa4e)][_0x431bf5(0xaa6)][_0x431bf5(0x755)])return!![];if(_0x14e178[_0x431bf5(0x95b)]['active']&&_0x14e178[_0x431bf5(0x95b)][_0x431bf5(0xaa6)][_0x431bf5(0x755)])return!![];}else{if(_0x14e178[_0x431bf5(0x95b)][_0x431bf5(0x9c3)]&&_0x14e178['_enemyWindow']['_handlers'][_0x431bf5(0x7e8)])return!![];}return![];},Window_BattleMultiTarget['prototype']['updateKeyboardKeys']=function(){const _0x2c03a9=_0x553167;if(!Imported['VisuMZ_0_CoreEngine'])return;this['_buttonText']!==TextManager[_0x2c03a9(0xa98)](this[_0x2c03a9(0x92b)])&&this[_0x2c03a9(0x215)]();},Window_BattleMultiTarget[_0x553167(0x22b)][_0x553167(0x5e8)]=function(){const _0x44b75a=_0x553167;if(this[_0x44b75a(0x743)]&&TouchInput[_0x44b75a(0x9e5)]()){const _0x1c58cd=this[_0x44b75a(0x317)]();if(_0x1c58cd>=0x0){const _0x20daf6=this[_0x44b75a(0x95e)]()?'pagedown':_0x44b75a(0x7e8);Input[_0x44b75a(0x312)](_0x20daf6);}}};function Window_DamageCounter(){const _0x2942fa=_0x553167;this[_0x2942fa(0x7a1)](...arguments);}Window_DamageCounter['prototype']=Object[_0x553167(0x595)](Window_Base[_0x553167(0x22b)]),Window_DamageCounter[_0x553167(0x22b)][_0x553167(0x589)]=Window_DamageCounter,Window_DamageCounter[_0x553167(0x511)]={'enabled':VisuMZ[_0x553167(0x841)]['Settings']['ComboWindow']['Enable']??!![],'customFontFace':VisuMZ['BattleCore'][_0x553167(0x309)]['ComboWindow'][_0x553167(0x337)]??'','textAlign':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x707)][_0x553167(0x8f8)]??_0x553167(0x899),'hitsDmgFmt':VisuMZ[_0x553167(0x841)]['Settings']['ComboWindow'][_0x553167(0x331)]??_0x553167(0x722),'hitsHealFmt':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x707)][_0x553167(0xaeb)]??_0x553167(0xef),'totalDmgFmt':VisuMZ[_0x553167(0x841)]['Settings']['ComboWindow']['totalDmgFmt']??_0x553167(0xa0d),'totalHealFmt':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x707)]['totalHealFmt']??_0x553167(0x399),'fadeShiftX':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x707)]['fadeShiftX']??-0x2,'fadeShiftY':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x707)]['fadeShiftY']??0x0,'positionOffsetX':VisuMZ[_0x553167(0x841)][_0x553167(0x309)]['ComboWindow']['PosOffsetX']??0x0,'positionOffsetY':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x707)][_0x553167(0x8e3)]??0x0,'updateDuration':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x707)][_0x553167(0x231)]??0x14,'minimumStayDuration':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x707)][_0x553167(0x358)]??0x28,'minimumHits':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x707)][_0x553167(0x398)]??0x1,'opacitySpeed':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x707)][_0x553167(0xabc)]??0x10},Window_DamageCounter[_0x553167(0x22b)][_0x553167(0x7a1)]=function(_0x4371d9){const _0x4a79f8=_0x553167;this[_0x4a79f8(0xa0f)]=0x0,Window_Base[_0x4a79f8(0x22b)][_0x4a79f8(0x7a1)][_0x4a79f8(0x7f7)](this,_0x4371d9),this[_0x4a79f8(0x8f6)]=_0x4371d9['x'],this[_0x4a79f8(0xbf1)]=_0x4371d9['y'],this[_0x4a79f8(0x605)](),this[_0x4a79f8(0x785)](0x2);},Window_DamageCounter[_0x553167(0x22b)][_0x553167(0x605)]=function(){const _0x56fa24=_0x553167;this[_0x56fa24(0x1af)]=0x0,this[_0x56fa24(0xa60)]=0x0,this[_0x56fa24(0x73f)]=0x0,this[_0x56fa24(0x43b)]=0x0,this['_targetDamage']=0x0;},Window_DamageCounter[_0x553167(0x22b)][_0x553167(0x739)]=function(){const _0x8d6c96=_0x553167;Window_Base[_0x8d6c96(0x22b)][_0x8d6c96(0x739)][_0x8d6c96(0x7f7)](this);const _0x5387d4=Window_DamageCounter[_0x8d6c96(0x511)];_0x5387d4[_0x8d6c96(0xb42)]?this['contents']['fontFace']=_0x5387d4[_0x8d6c96(0xb42)]:this[_0x8d6c96(0x5cf)]['fontFace']=$gameSystem['numberFontFace']();};var $comboWindowReset=function(){const _0x1eb5c4=_0x553167;if(!SceneManager[_0x1eb5c4(0x2c2)]())return;const _0x5e2a9c=SceneManager[_0x1eb5c4(0xa7f)][_0x1eb5c4(0x28a)];if(_0x5e2a9c)_0x5e2a9c[_0x1eb5c4(0x605)]();};Window_DamageCounter[_0x553167(0x22b)][_0x553167(0x181)]=function(_0x2925bf){const _0x22822d=_0x553167;this[_0x22822d(0x43b)]+=Math[_0x22822d(0x462)](_0x2925bf);const _0x2e177c=Window_DamageCounter['SETTINGS'];this[_0x22822d(0x1af)]=_0x2e177c[_0x22822d(0x231)],this[_0x22822d(0x43b)]>=_0x2e177c[_0x22822d(0x398)]&&(this[_0x22822d(0xa0f)]=_0x2e177c['minimumStayDuration']);};var $comboWindowIncreaseHits=function(_0x26358c){const _0x2e0e75=_0x553167;if(!SceneManager[_0x2e0e75(0x2c2)]())return;const _0x5833df=SceneManager[_0x2e0e75(0xa7f)]['_damageCounterWindow'];if(_0x5833df)_0x5833df['increaseHits'](_0x26358c);};Window_DamageCounter[_0x553167(0x22b)]['increaseTotal']=function(_0x542c91){const _0x22dc7f=_0x553167;this[_0x22dc7f(0xb18)]+=Math['round'](_0x542c91);const _0x1e782d=Window_DamageCounter[_0x22dc7f(0x511)];this[_0x22dc7f(0x1af)]=_0x1e782d[_0x22dc7f(0x231)],this[_0x22dc7f(0x43b)]>=_0x1e782d[_0x22dc7f(0x398)]&&(this[_0x22dc7f(0xa0f)]=_0x1e782d[_0x22dc7f(0x358)]);};var $comboWindowIncreaseDamage=function(_0x500001){const _0x287006=_0x553167;if(!SceneManager['isSceneBattle']())return;const _0x25f143=SceneManager[_0x287006(0xa7f)]['_damageCounterWindow'];if(_0x25f143)_0x25f143[_0x287006(0x669)](_0x500001);},$comboWindowIncreaseHealing=function(_0x33b955){const _0x206af4=_0x553167;if(!SceneManager[_0x206af4(0x2c2)]())return;const _0x266560=SceneManager[_0x206af4(0xa7f)]['_damageCounterWindow'];if(_0x266560)_0x266560[_0x206af4(0x669)](-_0x33b955);};VisuMZ[_0x553167(0x841)][_0x553167(0xa10)]=Scene_Battle['prototype'][_0x553167(0x57f)],Scene_Battle['prototype'][_0x553167(0x57f)]=function(){const _0x4020bf=_0x553167;this[_0x4020bf(0xaee)](),VisuMZ[_0x4020bf(0x841)][_0x4020bf(0xa10)][_0x4020bf(0x7f7)](this);},Scene_Battle['prototype'][_0x553167(0xaee)]=function(){const _0x4dee87=_0x553167;if(!Window_DamageCounter[_0x4dee87(0x511)][_0x4dee87(0x8bc)])return;const _0x12c64d=this[_0x4dee87(0xa5a)](),_0x8e3b35=new Window_DamageCounter(_0x12c64d);this[_0x4dee87(0x41c)](_0x8e3b35),this[_0x4dee87(0x28a)]=_0x8e3b35;},Scene_Battle['prototype'][_0x553167(0xa5a)]=function(){const _0x3ad0a1=_0x553167;if(VisuMZ[_0x3ad0a1(0x841)][_0x3ad0a1(0x309)][_0x3ad0a1(0x707)][_0x3ad0a1(0x625)])return VisuMZ[_0x3ad0a1(0x841)][_0x3ad0a1(0x309)]['ComboWindow'][_0x3ad0a1(0x625)][_0x3ad0a1(0x7f7)](this);const _0x2ff2da=Math[_0x3ad0a1(0xbe1)](Graphics['width']/0x4),_0x4e2d1b=this[_0x3ad0a1(0x54b)](0x2,!![]),_0x56be7b=0x0+this[_0x3ad0a1(0x86d)](),_0x257bed=Math[_0x3ad0a1(0x462)](Graphics[_0x3ad0a1(0xbcf)]*0x1/0x3)+this[_0x3ad0a1(0x870)]();return new Rectangle(_0x56be7b,_0x257bed,_0x2ff2da,_0x4e2d1b);},Scene_Battle[_0x553167(0x22b)][_0x553167(0x86d)]=function(){const _0x97df52=_0x553167;return Window_DamageCounter['SETTINGS'][_0x97df52(0x769)];},Scene_Battle['prototype'][_0x553167(0x870)]=function(){const _0x1a8849=_0x553167;return Window_DamageCounter['SETTINGS'][_0x1a8849(0x690)];},Window_DamageCounter[_0x553167(0x22b)]['update']=function(){const _0x259289=_0x553167;Window_Base['prototype'][_0x259289(0xbcd)]['call'](this),this[_0x259289(0x1ee)](),this[_0x259289(0x5ad)]();},Window_DamageCounter[_0x553167(0x22b)]['updateCounter']=function(){const _0x196df5=_0x553167;if(this['_updateDuration']<=0x0)return;const _0x174fb5=this[_0x196df5(0x1af)];this['_totalHits']=this[_0x196df5(0x43b)],this[_0x196df5(0x73f)]=(this[_0x196df5(0x73f)]*(_0x174fb5-0x1)+this[_0x196df5(0xb18)])/_0x174fb5,this[_0x196df5(0x1af)]--,this[_0x196df5(0x1af)]<=0x0&&(this[_0x196df5(0xa60)]=this[_0x196df5(0x43b)],this[_0x196df5(0x73f)]=this['_targetDamage']),this[_0x196df5(0x215)]();},Window_DamageCounter[_0x553167(0x22b)][_0x553167(0x5ad)]=function(){const _0x82d935=_0x553167,_0x281143=Window_DamageCounter['SETTINGS'],_0x56d871=this[_0x82d935(0xb7f)](),_0x29925b=_0x281143['opacitySpeed']||0x1;if(_0x56d871&&this[_0x82d935(0x168)]<0xff)this[_0x82d935(0x168)]+=_0x29925b;else!_0x56d871&&this[_0x82d935(0x168)]>0x0&&(this['contentsOpacity']-=_0x29925b,this['x']+=_0x281143[_0x82d935(0x143)]||0x0,this['y']+=_0x281143[_0x82d935(0x20a)]||0x0);},Window_DamageCounter[_0x553167(0x22b)]['visibilityState']=function(){const _0x20117b=_0x553167,_0x4445b3=Window_DamageCounter[_0x20117b(0x511)];if(this[_0x20117b(0x43b)]>=_0x4445b3[_0x20117b(0x398)])return!![];if(this[_0x20117b(0xa0f)]-->0x0)return!![];return![];},VisuMZ['BattleCore'][_0x553167(0x653)]=Game_Action[_0x553167(0x22b)]['executeHpDamage'],Game_Action['prototype']['executeHpDamage']=function(_0x4aab82,_0x3a2128){const _0x41f578=_0x553167;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x3a2128),VisuMZ['BattleCore'][_0x41f578(0x653)]['call'](this,_0x4aab82,_0x3a2128);},VisuMZ['BattleCore'][_0x553167(0x2dc)]=BattleManager['endAction'],BattleManager['endAction']=function(){const _0x57dffd=_0x553167;$comboWindowReset(),VisuMZ[_0x57dffd(0x841)]['BattleManager_endAction_ComboWindow']['call'](this);},Window_DamageCounter[_0x553167(0x22b)]['refresh']=function(){const _0x5ee01a=_0x553167;this['contents'][_0x5ee01a(0xa25)](),this[_0x5ee01a(0x549)](),this['x']=this['_targetX'],this['y']=this[_0x5ee01a(0xbf1)];},Window_DamageCounter[_0x553167(0x22b)]['textAlignment']=function(){const _0x5221b2=_0x553167,_0xe29266=Window_DamageCounter[_0x5221b2(0x511)];return _0xe29266[_0x5221b2(0x656)]||'left';},Window_DamageCounter[_0x553167(0x22b)][_0x553167(0x57b)]=function(){const _0x51bf81=_0x553167,_0x5840c8=Window_DamageCounter['SETTINGS'];let _0x54973c=this[_0x51bf81(0x73f)]>=0x0?_0x5840c8[_0x51bf81(0x331)]:_0x5840c8[_0x51bf81(0xaeb)];return _0x54973c[_0x51bf81(0x47d)](Math[_0x51bf81(0x1a5)](Math[_0x51bf81(0xbe1)](this[_0x51bf81(0xa60)])));},Window_DamageCounter[_0x553167(0x22b)][_0x553167(0xb9e)]=function(){const _0x390ff5=_0x553167,_0x3122f4=Window_DamageCounter[_0x390ff5(0x511)];let _0x1b281b=this[_0x390ff5(0x73f)]>=0x0?_0x3122f4[_0x390ff5(0xacf)]:_0x3122f4[_0x390ff5(0x405)];return _0x1b281b[_0x390ff5(0x47d)](Math[_0x390ff5(0x1a5)](Math[_0x390ff5(0x462)](this[_0x390ff5(0x73f)])));},Window_DamageCounter['prototype']['drawComboText']=function(){const _0x3b0380=_0x553167;if(VisuMZ[_0x3b0380(0x841)]['Settings']['ComboWindow'][_0x3b0380(0xa6d)])return VisuMZ[_0x3b0380(0x841)][_0x3b0380(0x309)][_0x3b0380(0x707)]['ComboWindow_DrawJS'][_0x3b0380(0x7f7)](this);let _0x30ed95=0x0,_0x46c0f5=0x0;const _0x4309b0=this[_0x3b0380(0x57b)](),_0x2b8b96=this[_0x3b0380(0x39c)](_0x4309b0);if(this[_0x3b0380(0x6e5)]()===_0x3b0380(0x7a2))_0x30ed95=this[_0x3b0380(0x5f5)]-this['itemPadding']()-_0x2b8b96['width'];else this[_0x3b0380(0x6e5)]()===_0x3b0380(0xa2f)?_0x30ed95=Math['floor']((this['innerWidth']-_0x2b8b96[_0x3b0380(0x9ce)])/0x2):_0x30ed95=this[_0x3b0380(0x494)]();this['drawTextEx'](_0x4309b0,_0x30ed95,_0x46c0f5),_0x46c0f5+=Math[_0x3b0380(0xbe1)](this[_0x3b0380(0x97b)]()*0x2/0x3);const _0x566599=this['damageText'](),_0x306765=this['textSizeEx'](_0x566599);if(this['textAlignment']()===_0x3b0380(0x7a2))_0x30ed95=this[_0x3b0380(0x5f5)]-this[_0x3b0380(0x494)]()-_0x306765[_0x3b0380(0x9ce)];else this[_0x3b0380(0x6e5)]()===_0x3b0380(0xa2f)?_0x30ed95=Math[_0x3b0380(0x66d)]((this[_0x3b0380(0x5f5)]-_0x306765['width'])/0x2):_0x30ed95=this[_0x3b0380(0x494)]();this[_0x3b0380(0x3cf)](_0x566599,_0x30ed95,_0x46c0f5);};function Window_InBattleStatus(){const _0x134ed6=_0x553167;this[_0x134ed6(0x7a1)](...arguments);}Window_InBattleStatus[_0x553167(0x22b)]=Object['create'](Window_StatusBase[_0x553167(0x22b)]),Window_InBattleStatus['prototype'][_0x553167(0x589)]=Window_InBattleStatus,Window_InBattleStatus[_0x553167(0x511)]={'bgType':VisuMZ['BattleCore'][_0x553167(0x309)]['InBattleStatus'][_0x553167(0x6b7)]??0x0,'statusGraphic':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x152)]??_0x553167(0xb1f),'statusHelpDesc':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x907)]['HelpStatus']??_0x553167(0xb47),'pageButtons':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x907)][_0x553167(0xa20)]??!![],'pageButtonPosition':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)]['pageButtonPosition']??_0x553167(0x899),'pageOffsetX':VisuMZ[_0x553167(0x841)][_0x553167(0x309)]['InBattleStatus'][_0x553167(0x434)]??0x0,'pageOffsetY':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)]['pageOffsetY']??0x0,'buffValueFmt':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x6f1)]??'▲%1','debuffValueFmt':VisuMZ[_0x553167(0x841)]['Settings']['InBattleStatus'][_0x553167(0xab7)]??_0x553167(0x72f),'enemyStatus':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x907)][_0x553167(0x272)]??!![],'enemyShowLevel':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)]['enemyShowLevel']??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x93e)]??_0x553167(0x79b),'enemyShowParametersAlways':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x927)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x5c3)]??!![],'enemyShowParametersIfDefeated':VisuMZ['BattleCore']['Settings'][_0x553167(0x907)][_0x553167(0x583)]??!![]},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x7a1)]=function(_0x5608d0){const _0x42388b=_0x553167;Window_StatusBase[_0x42388b(0x22b)][_0x42388b(0x7a1)][_0x42388b(0x7f7)](this,_0x5608d0),this[_0x42388b(0x785)](Window_InBattleStatus[_0x42388b(0x511)]['bgType']),this['createEnemySprite'](),this[_0x42388b(0x60d)](),this[_0x42388b(0xa86)]();},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x4e5)]=function(_0x4e6742){const _0x9bc566=_0x553167;this[_0x9bc566(0x928)]=_0x4e6742,this[_0x9bc566(0x215)](),this['_statesWindow']&&this[_0x9bc566(0x3f6)]['setBattler'](_0x4e6742);},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x5f9)]=function(){const _0x206fcd=_0x553167;Window_StatusBase[_0x206fcd(0x22b)][_0x206fcd(0x5f9)]['call'](this);if(this['_statesWindow'])this[_0x206fcd(0x3f6)]['open']();this[_0x206fcd(0x414)](),Imported[_0x206fcd(0xa4d)]&&SceneManager['setStateTooltipBattler'](null);},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0xa1c)]=function(){const _0x5a957d=_0x553167;Window_StatusBase[_0x5a957d(0x22b)][_0x5a957d(0xa1c)]['call'](this);if(this[_0x5a957d(0x3f6)])this[_0x5a957d(0x3f6)][_0x5a957d(0xa1c)]();},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x8aa)]=function(_0x1f2638){const _0x30b7a2=_0x553167;this[_0x30b7a2(0xad8)]=_0x1f2638;},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x7d6)]=function(){const _0x217a8e=_0x553167;return this[_0x217a8e(0xad8)]||SceneManager[_0x217a8e(0xa7f)][_0x217a8e(0xa75)];},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x52c)]=function(){const _0x3221d2=_0x553167;Window_StatusBase[_0x3221d2(0x22b)][_0x3221d2(0x52c)][_0x3221d2(0x7f7)](this),this[_0x3221d2(0xbd3)]();},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0xbd3)]=function(){const _0x29c630=_0x553167;for(const _0x5c65d8 of $gameParty[_0x29c630(0xaca)]()){if(!_0x5c65d8)continue;_0x5c65d8[_0x29c630(0x867)]()&&ImageManager['loadCharacter'](_0x5c65d8['characterName']()),_0x5c65d8['battlerName']()&&ImageManager[_0x29c630(0x530)](_0x5c65d8[_0x29c630(0xa09)]()),_0x5c65d8[_0x29c630(0x1ce)]&&ImageManager['loadPicture'](_0x5c65d8['getMenuImage']());}},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0xbeb)]=function(){const _0x2bf2a1=_0x553167;this[_0x2bf2a1(0x31f)]=new Sprite(),this[_0x2bf2a1(0x31f)][_0x2bf2a1(0x9f3)]['x']=0.5,this[_0x2bf2a1(0x31f)][_0x2bf2a1(0x9f3)]['y']=0x1,this[_0x2bf2a1(0xbd9)](this['_enemySprite']);},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x60d)]=function(){const _0x2d6757=_0x553167,_0x3276fa=this[_0x2d6757(0xbff)](),_0x370cd3=new Window_InBattleStatusStates(_0x3276fa);this[_0x2d6757(0xbd9)](_0x370cd3),_0x370cd3['setHelpWindow'](SceneManager[_0x2d6757(0xa7f)][_0x2d6757(0x2c1)]),this[_0x2d6757(0x3f6)]=_0x370cd3;},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0xbff)]=function(){const _0x1cda32=_0x553167,_0x46fdb9=Window_InBattleStatusStates[_0x1cda32(0x511)][_0x1cda32(0xbc2)],_0x6aa0b=Math[_0x1cda32(0x6b0)](_0x46fdb9,Math[_0x1cda32(0x66d)](this[_0x1cda32(0x9ce)]/0x2)),_0x18eda5=Graphics[_0x1cda32(0x5f7)]>0x44c?this[_0x1cda32(0x908)]:this[_0x1cda32(0x97b)]()*0x4+this[_0x1cda32(0xb8d)]*0x2,_0x1de5bf=this[_0x1cda32(0x9ce)]-_0x6aa0b,_0x5a8c63=this[_0x1cda32(0x908)]-_0x18eda5;return new Rectangle(_0x1de5bf,_0x5a8c63,_0x6aa0b,_0x18eda5);},Window_InBattleStatus['prototype'][_0x553167(0xa86)]=function(){const _0x3f9223=_0x553167;if(!ConfigManager[_0x3f9223(0x634)])return;if(!Window_InBattleStatus[_0x3f9223(0x511)][_0x3f9223(0xa20)])return;this[_0x3f9223(0xa6b)]=new Sprite_Button(_0x3f9223(0x7e8)),this['_pageupButton']['x']=this[_0x3f9223(0x437)]()+Window_InBattleStatus[_0x3f9223(0x511)][_0x3f9223(0x434)],this[_0x3f9223(0xa6b)]['y']=this[_0x3f9223(0x52e)]()+Window_InBattleStatus['SETTINGS'][_0x3f9223(0xbfe)];const _0x527bc4=this[_0x3f9223(0xa6b)]['x']+this[_0x3f9223(0xa6b)][_0x3f9223(0x9ce)];this[_0x3f9223(0xbbb)]=new Sprite_Button('pagedown'),this[_0x3f9223(0xbbb)]['x']=_0x527bc4+0x4,this[_0x3f9223(0xbbb)]['y']=this['_pageupButton']['y'],this['addChild'](this[_0x3f9223(0xa6b)]),this['addChild'](this[_0x3f9223(0xbbb)]),this[_0x3f9223(0xa6b)][_0x3f9223(0x64b)](this[_0x3f9223(0x526)][_0x3f9223(0x161)](this)),this[_0x3f9223(0xbbb)][_0x3f9223(0x64b)](this['nextActor'][_0x3f9223(0x161)](this));},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x437)]=function(){const _0x95e291=_0x553167;if(Graphics[_0x95e291(0x5f7)]>0x44c&&Graphics[_0x95e291(0xbcf)]>0x2bc){if(Window_InBattleStatus[_0x95e291(0x511)][_0x95e291(0x3c4)]===_0x95e291(0x899)){let _0x32351f=Math['ceil']((-this['x']-0x64)/0x2);if(_0x32351f>=-0x64)_0x32351f=this[_0x95e291(0xb8d)];return _0x32351f;}else{const _0x381cc3=Graphics['boxWidth']-this['x']-this[_0x95e291(0x9ce)];let _0x1852f0=Math['floor']((_0x381cc3-0x64)/0x2)+this[_0x95e291(0x9ce)];return _0x1852f0;}}else return this[_0x95e291(0x9ce)]-0x64-this[_0x95e291(0xb8d)]/0x2;},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x52e)]=function(){const _0x3f1e1a=_0x553167;return Graphics[_0x3f1e1a(0x5f7)]>0x44c&&Graphics[_0x3f1e1a(0xbcf)]>0x2bc?this[_0x3f1e1a(0x908)]-0x30-this[_0x3f1e1a(0xb8d)]:0x30+this[_0x3f1e1a(0xb8d)];},Window_InBattleStatus['prototype']['previousActor']=function(){const _0x358449=_0x553167;let _0x5272bc=this[_0x358449(0x84e)]();if(_0x5272bc[_0x358449(0x635)]<=0x1&&!Window_InBattleStatus[_0x358449(0x511)][_0x358449(0x272)])return;let _0x127a13=_0x5272bc['indexOf'](this[_0x358449(0x928)]);_0x127a13--;_0x127a13<0x0&&(Window_InBattleStatus[_0x358449(0x511)][_0x358449(0x272)]&&(_0x5272bc=this[_0x358449(0x84e)](!![])),_0x127a13=_0x5272bc['length']-0x1);const _0x2664f3=_0x5272bc[_0x127a13];this[_0x358449(0x4e5)](_0x2664f3),SoundManager[_0x358449(0x938)]();},Window_InBattleStatus[_0x553167(0x22b)]['nextActor']=function(){const _0x4dd3e7=_0x553167;let _0x5110a8=this[_0x4dd3e7(0x84e)]();if(_0x5110a8[_0x4dd3e7(0x635)]<=0x1&&!Window_InBattleStatus[_0x4dd3e7(0x511)][_0x4dd3e7(0x272)])return;let _0x59cac6=_0x5110a8[_0x4dd3e7(0x163)](this['_battler']);_0x59cac6++;_0x59cac6>=_0x5110a8[_0x4dd3e7(0x635)]&&(Window_InBattleStatus[_0x4dd3e7(0x511)][_0x4dd3e7(0x272)]&&(_0x5110a8=this[_0x4dd3e7(0x84e)](!![])),_0x59cac6=0x0);const _0x52141b=_0x5110a8[_0x59cac6];this[_0x4dd3e7(0x4e5)](_0x52141b),SoundManager[_0x4dd3e7(0x938)]();},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x84e)]=function(_0x368078){const _0x454c4=_0x553167;let _0x234fe5=[];const _0x1ce4c5=_0x368078?this[_0x454c4(0x928)][_0x454c4(0x8d1)]():this[_0x454c4(0x928)][_0x454c4(0xa3e)]();return _0x1ce4c5===$gameParty?_0x234fe5=$gameParty['battleMembers']():_0x234fe5=$gameTroop[_0x454c4(0x58e)](),_0x234fe5[_0x454c4(0x4c0)](null);},Window_InBattleStatus[_0x553167(0x22b)]['update']=function(){const _0x15d14a=_0x553167;Window_Base[_0x15d14a(0x22b)]['update']['call'](this),this[_0x15d14a(0xbd7)]();},Window_InBattleStatus['prototype'][_0x553167(0xbd7)]=function(){const _0x2c459b=_0x553167;if(this[_0x2c459b(0x7fe)]()){if(this[_0x2c459b(0x4c5)]())return this[_0x2c459b(0x440)]();if(Input['isRepeated'](_0x2c459b(0x7a2)))return this['nextActor']();if(Input['isRepeated']('left'))return this[_0x2c459b(0x526)]();}},SoundManager[_0x553167(0x938)]=function(){this['playSystemSound'](0x0);},Window_InBattleStatus['prototype'][_0x553167(0x7fe)]=function(){const _0x1b0bcf=_0x553167;return this[_0x1b0bcf(0x9af)]()&&this[_0x1b0bcf(0x743)];},Window_InBattleStatus['prototype'][_0x553167(0x4c5)]=function(){const _0x41f1ee=_0x553167;if(Input['isTriggered'](_0x41f1ee(0x32f)))return!![];if(TouchInput[_0x41f1ee(0xa08)]())return!![];return![];},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x440)]=function(){const _0xb442d8=_0x553167;SoundManager[_0xb442d8(0x712)](),this['deactivate'](),this['_statesWindow']&&(this[_0xb442d8(0x3f6)][_0xb442d8(0xbdf)](),this[_0xb442d8(0x3f6)][_0xb442d8(0x836)]()),SceneManager[_0xb442d8(0xa7f)][_0xb442d8(0x182)]();},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x414)]=function(){const _0xfbb032=_0x553167;if(!this[_0xfbb032(0xa6b)])return;if(!this[_0xfbb032(0xbbb)])return;const _0x5954b5=$gameParty[_0xfbb032(0x22d)]()[_0xfbb032(0x635)]>0x0||Window_InBattleStatus[_0xfbb032(0x511)][_0xfbb032(0x272)];this[_0xfbb032(0xa6b)][_0xfbb032(0x743)]=_0x5954b5,this[_0xfbb032(0xbbb)][_0xfbb032(0x743)]=_0x5954b5;},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x215)]=function(){const _0x120a0b=_0x553167;Window_StatusBase[_0x120a0b(0x22b)][_0x120a0b(0x215)][_0x120a0b(0x7f7)](this);if(this[_0x120a0b(0x31f)])this[_0x120a0b(0x31f)][_0x120a0b(0x447)]();this[_0x120a0b(0x5cf)][_0x120a0b(0xa25)](),this[_0x120a0b(0x6a4)][_0x120a0b(0xa25)]();if(!this['_battler'])return;this[_0x120a0b(0x4c7)]();},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x4c7)]=function(){const _0x101ff0=_0x553167;if(VisuMZ[_0x101ff0(0x841)]['Settings']['InBattleStatus']['StatusWindow_DrawJS'])return VisuMZ[_0x101ff0(0x841)][_0x101ff0(0x309)][_0x101ff0(0x907)][_0x101ff0(0x10e)]['call'](this);{const _0x35c955=this[_0x101ff0(0x307)]()/0x2,_0x312e5f=ImageManager[_0x101ff0(0x68a)],_0x1fc8f6=_0x312e5f/0x2-this[_0x101ff0(0x97b)]()*1.5;this[_0x101ff0(0x873)](this[_0x101ff0(0x928)],_0x35c955+0x1,0x0,ImageManager[_0x101ff0(0x996)],_0x312e5f),this[_0x101ff0(0x8a2)](this[_0x101ff0(0x928)],_0x35c955+0xb4,_0x1fc8f6);}{let _0x4628b3=this[_0x101ff0(0xb1e)](),_0x58750e=0x0,_0xc718c5=Math[_0x101ff0(0xbe1)](this['drawingAreaWidth']()/0x2),_0x1b6e71=0x0;const _0x204e4a=this[_0x101ff0(0x2a3)]();let _0x462301=_0x58750e;const _0x4e9d0f=this[_0x101ff0(0x6cb)]-ImageManager[_0x101ff0(0x68a)],_0x427ac9=Math['ceil'](_0x204e4a[_0x101ff0(0x635)]/0x2)*this[_0x101ff0(0x97b)]();let _0x3b392f=Math[_0x101ff0(0xbe1)]((_0x4e9d0f-_0x427ac9)/0x2)+ImageManager[_0x101ff0(0x68a)],_0x533a8a=Math[_0x101ff0(0x66d)](_0x4628b3/0x2);this[_0x101ff0(0x3f6)]['y']!==0x0&&(this['_statesWindow']['y']=_0x3b392f);for(const _0x1ae341 of _0x204e4a){this[_0x101ff0(0x5b7)](_0x462301,_0x3b392f,_0x533a8a,this[_0x101ff0(0x97b)]()),this[_0x101ff0(0x687)](_0x1ae341,_0x462301,_0x3b392f,_0x533a8a),_0x1b6e71++,_0x1b6e71%0x2===0x0?(_0x462301=_0x58750e,_0x3b392f+=this[_0x101ff0(0x97b)]()):_0x462301=_0xc718c5;}}},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x265)]=function(){const _0x272f83=_0x553167;return VisuMZ[_0x272f83(0x841)][_0x272f83(0x309)][_0x272f83(0x907)][_0x272f83(0x152)];},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x873)]=function(_0x1ebcde,_0x13909e,_0x5a9e14,_0x1fd002,_0x2541a4){const _0x2e2ba8=_0x553167;if(_0x1ebcde[_0x2e2ba8(0x8fb)]())switch(this[_0x2e2ba8(0x265)]()){case'none':break;case _0x2e2ba8(0x67d):this[_0x2e2ba8(0x175)](_0x1ebcde,_0x13909e,_0x5a9e14+0x1,_0x1fd002,_0x2541a4-0x2);break;case _0x2e2ba8(0x830):this[_0x2e2ba8(0x147)](_0x1ebcde,_0x13909e,_0x5a9e14+0x1,_0x1fd002,_0x2541a4-0x2);break;default:this[_0x2e2ba8(0x57a)](_0x1ebcde,_0x13909e,_0x5a9e14,_0x1fd002,_0x2541a4);break;}else this[_0x2e2ba8(0x61f)](_0x1ebcde,_0x13909e,_0x5a9e14,_0x1fd002,_0x2541a4);},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x57a)]=function(_0x1b1cbc,_0x591c8d,_0x4eeab8,_0x258027,_0x95b11a){const _0x3116a8=_0x553167;_0x258027=_0x258027||ImageManager[_0x3116a8(0x996)],_0x95b11a=_0x95b11a||ImageManager[_0x3116a8(0x68a)];const _0x5d96c8=ImageManager[_0x3116a8(0x996)],_0xa4db2b=_0x95b11a-0x2,_0x3b541f=_0x591c8d+Math[_0x3116a8(0x66d)]((_0x258027-_0x5d96c8)/0x2);this[_0x3116a8(0x589)]===Window_MenuStatus&&this['changePaintOpacity'](_0x1b1cbc[_0x3116a8(0x2fd)]()),this[_0x3116a8(0x36e)](_0x1b1cbc,_0x3b541f,_0x4eeab8,_0x5d96c8,_0xa4db2b),this['changePaintOpacity'](!![]);},Window_InBattleStatus[_0x553167(0x22b)]['drawItemActorSprite']=function(_0x5e6ce1,_0x13353a,_0x17e8d6,_0x93f36c,_0x47181b){const _0x45e32b=_0x553167;_0x93f36c=_0x93f36c||ImageManager[_0x45e32b(0x996)],_0x47181b=_0x47181b||ImageManager['faceHeight'];const _0x4602b7=_0x5e6ce1[_0x45e32b(0x867)](),_0x7302be=_0x5e6ce1['characterIndex'](),_0x3994f4=ImageManager[_0x45e32b(0x594)](_0x4602b7),_0x2ea135=ImageManager[_0x45e32b(0xadc)](_0x4602b7),_0xacc798=_0x3994f4['width']/(_0x2ea135?0x3:0xc),_0x1eb7f3=_0x3994f4[_0x45e32b(0x908)]/(_0x2ea135?0x4:0x8),_0x594256=_0x93f36c,_0x24e5a9=_0x47181b-0x2,_0x2dfd6b=_0x13353a+Math['floor'](_0x594256/0x2),_0x578fb=_0x17e8d6+Math[_0x45e32b(0xbe1)]((_0x47181b+_0x1eb7f3)/0x2);this['constructor']===Window_MenuStatus&&this[_0x45e32b(0x319)](_0x5e6ce1[_0x45e32b(0x2fd)]());const _0x45944e=Math[_0x45e32b(0x6b0)](_0x93f36c,_0xacc798),_0x2632bf=Math[_0x45e32b(0x6b0)](_0x47181b,_0x1eb7f3),_0x43214e=Math[_0x45e32b(0x66d)](_0x13353a+Math['max'](_0x93f36c-_0xacc798,0x0)/0x2),_0x42fa8c=Math['floor'](_0x17e8d6+Math[_0x45e32b(0x4c1)](_0x47181b-_0x1eb7f3,0x0)/0x2),_0x59c851=_0x2ea135?0x0:_0x7302be,_0x54486d=(_0x59c851%0x4*0x3+0x1)*_0xacc798,_0xd2881b=Math[_0x45e32b(0x66d)](_0x59c851/0x4)*0x4*_0x1eb7f3;this[_0x45e32b(0x5cf)]['blt'](_0x3994f4,_0x54486d,_0xd2881b,_0x45944e,_0x2632bf,_0x43214e,_0x42fa8c),this['changePaintOpacity'](!![]);},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x147)]=function(_0x103b4f,_0x5466eb,_0x2a09d2,_0x28b6d9,_0x3b2c4c,_0x2e1132){const _0x9cce3c=_0x553167;_0x28b6d9=_0x28b6d9||ImageManager['faceWidth'],_0x3b2c4c=_0x3b2c4c||ImageManager[_0x9cce3c(0x68a)];const _0x1c9071=ImageManager[_0x9cce3c(0x530)](_0x2e1132?_0x103b4f['svBattlerName']():_0x103b4f[_0x9cce3c(0xa09)]()),_0x1f1cb0=_0x1c9071['width']/ImageManager['svActorHorzCells'],_0x2de8b4=_0x1c9071[_0x9cce3c(0x908)]/ImageManager[_0x9cce3c(0x1ac)],_0xbd3c45=_0x28b6d9,_0x1917e0=_0x3b2c4c-0x2,_0x46b3e9=_0x5466eb+Math[_0x9cce3c(0x66d)](_0xbd3c45/0x2),_0x15aadc=_0x2a09d2+Math['ceil']((_0x3b2c4c+_0x2de8b4)/0x2);this['constructor']===Window_MenuStatus&&this[_0x9cce3c(0x319)](_0x103b4f[_0x9cce3c(0x2fd)]());const _0x54a1cf=_0x103b4f[_0x9cce3c(0x329)]&&_0x103b4f[_0x9cce3c(0x329)](),_0x415a96=0x0,_0x40ad91=0x0,_0x27f544=_0x54a1cf?_0x1c9071[_0x9cce3c(0x9ce)]:_0x1f1cb0,_0x210af1=_0x54a1cf?_0x1c9071['height']:_0x2de8b4,_0x180d3b=Math[_0x9cce3c(0x6b0)](0x1,_0x28b6d9/_0x27f544,_0x3b2c4c/_0x210af1),_0xa2951d=_0x180d3b*_0x27f544,_0x9b155d=_0x180d3b*_0x210af1,_0x4e02f5=Math[_0x9cce3c(0x66d)](_0x5466eb+Math['max'](_0x28b6d9-_0xa2951d,0x0)/0x2),_0x4350e8=Math[_0x9cce3c(0x66d)](_0x2a09d2+Math[_0x9cce3c(0x4c1)](_0x3b2c4c-_0x9b155d,0x0)/0x2);this[_0x9cce3c(0x5cf)][_0x9cce3c(0x97e)](_0x1c9071,_0x415a96,_0x40ad91,_0x27f544,_0x210af1,_0x4e02f5,_0x4350e8,_0xa2951d,_0x9b155d),this[_0x9cce3c(0x319)](!![]);},Window_InBattleStatus['prototype']['drawEnemyBattler']=function(_0x4b55bf,_0x2fb931,_0x2ff321,_0xad3d41,_0x10f2ab){const _0x470038=_0x553167;if(_0x4b55bf[_0x470038(0x661)]()){this[_0x470038(0x147)](_0x4b55bf,_0x2fb931,_0x2ff321+0x1,_0xad3d41,_0x10f2ab-0x2,!![]);return;}const _0x10837c=_0x4b55bf['battlerName'](),_0x10640e=$gameSystem['isSideView']()?ImageManager[_0x470038(0x64a)](_0x10837c):ImageManager['loadEnemy'](_0x10837c);_0x10640e['addLoadListener'](this['processDrawEnemyBattler'][_0x470038(0x161)](this,_0x4b55bf,_0x10640e,_0x2fb931,_0x2ff321,_0xad3d41,_0x10f2ab));},Window_InBattleStatus['prototype'][_0x553167(0xada)]=function(_0x7d52fc,_0x5b848b,_0x16b022,_0x3035e0,_0x14a340,_0x3566f8){const _0x2e3c89=_0x553167;if(this['_battler']!==_0x7d52fc)return;this[_0x2e3c89(0x31f)][_0x2e3c89(0x8b8)](),this[_0x2e3c89(0x31f)][_0x2e3c89(0xa3a)]=new Bitmap(_0x14a340,_0x3566f8);const _0x57d2f5=_0x14a340,_0x3a011e=_0x3566f8,_0x3f344d=Math[_0x2e3c89(0x6b0)](_0x57d2f5,_0x3a011e),_0x5a2b7a=this['_enemySprite'][_0x2e3c89(0xa3a)],_0x55e9b8=Math['min'](0x1,_0x3f344d/_0x5b848b[_0x2e3c89(0x9ce)],_0x3f344d/_0x5b848b['height']),_0x3eaacb=_0x5b848b[_0x2e3c89(0x9ce)]*_0x55e9b8,_0x316cba=_0x5b848b[_0x2e3c89(0x908)]*_0x55e9b8,_0x52e160=Math[_0x2e3c89(0x462)]((_0x57d2f5-_0x3eaacb)/0x2),_0x1bc2c6=Math[_0x2e3c89(0x462)]((_0x3a011e-_0x316cba)/0x2);_0x5a2b7a[_0x2e3c89(0x97e)](_0x5b848b,0x0,0x0,_0x5b848b[_0x2e3c89(0x9ce)],_0x5b848b[_0x2e3c89(0x908)],_0x52e160,_0x1bc2c6,_0x3eaacb,_0x316cba),this[_0x2e3c89(0x31f)]['anchor']['x']=0.5,this['_enemySprite']['anchor']['y']=0x1,this[_0x2e3c89(0x31f)]['x']=_0x16b022+_0x14a340/0x2+this[_0x2e3c89(0xb8d)],this['_enemySprite']['y']=_0x3035e0+_0x3566f8+this['padding'],this['_enemySprite'][_0x2e3c89(0x889)](this[_0x2e3c89(0x928)][_0x2e3c89(0x404)]());},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x314)]=function(_0x44b376,_0x446efb,_0x4604c8,_0x34f453){const _0x518c7a=_0x553167;if(_0x44b376['isEnemy']())_0x34f453=this['innerWidth']-_0x446efb;Window_StatusBase[_0x518c7a(0x22b)][_0x518c7a(0x314)][_0x518c7a(0x7f7)](this,_0x44b376,_0x446efb,_0x4604c8,_0x34f453);},Window_InBattleStatus['prototype'][_0x553167(0x31e)]=function(_0x477294,_0x3ee74a,_0x437870,_0x421110){const _0x4fba25=_0x553167;if(!_0x477294[_0x4fba25(0x8fb)]())return;Window_StatusBase['prototype'][_0x4fba25(0x31e)][_0x4fba25(0x7f7)](this,_0x477294,_0x3ee74a,_0x437870,_0x421110);},Window_InBattleStatus[_0x553167(0x22b)]['drawActorLevel']=function(_0x475df3,_0x436c19,_0x45d594){const _0x535f53=_0x553167;if(_0x475df3['isEnemy']()&&!Window_InBattleStatus[_0x535f53(0x511)][_0x535f53(0x2f8)])return;Window_StatusBase[_0x535f53(0x22b)][_0x535f53(0x61a)][_0x535f53(0x7f7)](this,_0x475df3,_0x436c19,_0x45d594);},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x3cc)]=function(_0x4ab069,_0x153f84,_0x3c413d,_0x44f200){const _0x2fa5ff=_0x553167;_0x4ab069['_hideAllIcons']=!![],Window_StatusBase['prototype']['drawActorIcons'][_0x2fa5ff(0x7f7)](this,_0x4ab069,_0x153f84,_0x3c413d,_0x44f200),_0x4ab069['_hideAllIcons']=undefined;},VisuMZ['BattleCore'][_0x553167(0x57c)]=Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x177)],Game_BattlerBase[_0x553167(0x22b)][_0x553167(0x177)]=function(){const _0x241bff=_0x553167;if(this[_0x241bff(0xb20)])return[];return VisuMZ[_0x241bff(0x841)][_0x241bff(0x57c)]['call'](this);},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0xa07)]=function(_0x46872a,_0x8132d,_0x43e5af,_0x31ed71){const _0x347177=_0x553167,_0x3dc87f=_0x347177(0x6b4)[_0x347177(0x47d)](_0x46872a['battlerKey'](),_0x8132d);let _0x43014d=![];if(_0x46872a[_0x347177(0x602)]()){const _0x132acd=Window_InBattleStatus['SETTINGS'];if(_0x8132d==='hp'&&_0x132acd['enemyHpGaugeRate'])_0x43014d=!![];if(_0x8132d==='mp'&&_0x132acd[_0x347177(0x721)])_0x43014d=!![];if(_0x8132d==='tp'&&_0x132acd[_0x347177(0x46e)])_0x43014d=!![];}const _0x2ff482=this[_0x347177(0x1cd)](_0x3dc87f,_0x43014d?Sprite_GaugeRate:Sprite_Gauge);_0x2ff482[_0x347177(0x303)](_0x46872a,_0x8132d),_0x2ff482[_0x347177(0x65e)](_0x43e5af,_0x31ed71),_0x2ff482['show']();},Window_InBattleStatus[_0x553167(0x22b)]['drawingAreaWidth']=function(){const _0x5b7444=_0x553167,_0x33844d=this[_0x5b7444(0x3f6)]?this[_0x5b7444(0x3f6)][_0x5b7444(0x9ce)]:0x0;return this[_0x5b7444(0x5f5)]-_0x33844d+this[_0x5b7444(0xb8d)]*0x2;},Window_InBattleStatus[_0x553167(0x22b)]['displayedParams']=function(){const _0x221746=_0x553167;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x221746(0x826)][_0x221746(0x309)][_0x221746(0x5af)][_0x221746(0x5c2)]:['MaxHP',_0x221746(0x457),_0x221746(0x4f6),_0x221746(0xbcb),_0x221746(0x4aa),_0x221746(0x9bb),_0x221746(0x4c9),_0x221746(0xae0)];},Window_InBattleStatus[_0x553167(0x22b)]['drawParamData']=function(_0x260034,_0x54ec7b,_0xe77aeb,_0x5f0042){const _0x5d6d84=_0x553167,_0x2b898e=Window_InBattleStatus[_0x5d6d84(0x511)],_0x22852b=Imported['VisuMZ_0_CoreEngine'];this[_0x5d6d84(0x739)]();let _0x2ec116='',_0x2d0224=0x0,_0x19540f=[_0x5d6d84(0x4fb),_0x5d6d84(0xbd8),_0x5d6d84(0x4f6),_0x5d6d84(0xbcb),_0x5d6d84(0x4aa),_0x5d6d84(0x9bb),'AGI',_0x5d6d84(0xae0)][_0x5d6d84(0x163)](String(_0x260034)[_0x5d6d84(0x512)]()[_0x5d6d84(0x976)]());if(_0x22852b)_0x2ec116=TextManager[_0x5d6d84(0x249)](_0x260034),_0x2d0224=VisuMZ[_0x5d6d84(0xb2c)](_0x260034);else{if(_0x19540f>=0x0&&_0x19540f<0x8)_0x2ec116=TextManager['param'](_0x19540f);}if(_0x19540f>=0x0&&_0x19540f<0x8){const _0x1bed75=this[_0x5d6d84(0x928)][_0x5d6d84(0x782)][_0x19540f];this[_0x5d6d84(0x928)]['buffIconIndex'](_0x1bed75,_0x19540f)!==0x0&&(_0x2d0224=this[_0x5d6d84(0x928)][_0x5d6d84(0x122)](_0x1bed75,_0x19540f));}if(_0x2ec116){let _0x8f115e='\x5cI[%2]\x5cC[16]%1\x5cC[0]'[_0x5d6d84(0x47d)](_0x2ec116,_0x2d0224);_0x5f0042<=0xd4&&(_0x8f115e=_0x5d6d84(0x9df)[_0x5d6d84(0x47d)](_0x2ec116));const _0x399be5=_0x5f0042<=0xd4?'\x20':'\x20\x20';this[_0x5d6d84(0x3cf)](_0x399be5+_0x8f115e,_0x54ec7b,_0xe77aeb);}this[_0x5d6d84(0x29b)]();let _0xf7cdc4='';_0x22852b?_0xf7cdc4=this[_0x5d6d84(0x928)][_0x5d6d84(0x6b3)](_0x260034,!![]):_0xf7cdc4=String(this[_0x5d6d84(0x928)][_0x5d6d84(0x63b)](_0x19540f));if(this[_0x5d6d84(0x928)][_0x5d6d84(0x602)]()){let _0x3e50d4=!![];if(_0x2b898e['enemyShowParametersAlways'])_0x3e50d4=![];if(_0x2b898e[_0x5d6d84(0x5c3)]&&BattleManager['isBattleTest']())_0x3e50d4=![];if(_0x2b898e['enemyShowParametersIfDefeated']&&$gameSystem[_0x5d6d84(0x32a)]()[_0x5d6d84(0xb5d)](this[_0x5d6d84(0x928)]['enemyId']()))_0x3e50d4=![];_0x3e50d4&&(_0xf7cdc4=_0x2b898e['enemyHiddenParameter']);}if(_0x19540f>=0x0&&_0x19540f<0x8){if(this[_0x5d6d84(0x928)][_0x5d6d84(0x292)](_0x19540f)>0x1)_0xf7cdc4=_0x2b898e[_0x5d6d84(0x6f1)]['format'](_0xf7cdc4),Imported[_0x5d6d84(0x14e)]?this[_0x5d6d84(0x12d)](ColorManager[_0x5d6d84(0x644)]()):this[_0x5d6d84(0x12d)](ColorManager[_0x5d6d84(0x598)]());else this[_0x5d6d84(0x928)][_0x5d6d84(0x292)](_0x19540f)<0x1&&(_0xf7cdc4=_0x2b898e['debuffValueFmt'][_0x5d6d84(0x47d)](_0xf7cdc4),Imported[_0x5d6d84(0x14e)]?this[_0x5d6d84(0x12d)](ColorManager[_0x5d6d84(0x48e)]()):this['changeTextColor'](ColorManager[_0x5d6d84(0x7ba)]()));}if(String(_0xf7cdc4)){const _0x2de45d=_0x5f0042<=0xd4?'\x20':'\x20\x20';this[_0x5d6d84(0x4b5)](_0xf7cdc4+_0x2de45d,_0x54ec7b,_0xe77aeb,_0x5f0042,_0x5d6d84(0x7a2));}},Window_InBattleStatus[_0x553167(0x22b)][_0x553167(0x5b7)]=function(_0x393a11,_0x4758f1,_0x4a1bcf,_0x2cc06d){const _0x52a073=_0x553167;_0x2cc06d=_0x2cc06d||this['lineHeight'](),this['contentsBack'][_0x52a073(0x897)]=0xa0;const _0x3d18c8=ColorManager[_0x52a073(0xbd5)]();this[_0x52a073(0x6a4)]['fillRect'](_0x393a11+0x1,_0x4758f1+0x1,_0x4a1bcf-0x2,_0x2cc06d-0x2,_0x3d18c8),this[_0x52a073(0x6a4)]['paintOpacity']=0xff;},Game_BattlerBase['prototype'][_0x553167(0x292)]=function(_0x7ec657){const _0x29da62=_0x553167;let _0x33b0be=0x1;_0x33b0be*=this[_0x29da62(0x170)](_0x7ec657);for(const _0x13f5f1 of this[_0x29da62(0x730)]()){if(!_0x13f5f1)continue;for(const _0x4b3247 of _0x13f5f1[_0x29da62(0xb45)]){if(!_0x4b3247)continue;if(_0x4b3247[_0x29da62(0x148)]!==Game_BattlerBase['TRAIT_PARAM'])continue;if(_0x4b3247[_0x29da62(0xaa4)]!==_0x7ec657)continue;_0x33b0be*=_0x4b3247['value'];}}return _0x33b0be;};function Window_InBattleStatusStates(){const _0x5f0196=_0x553167;this[_0x5f0196(0x7a1)](...arguments);}Window_InBattleStatusStates[_0x553167(0x22b)]=Object['create'](Window_Command[_0x553167(0x22b)]),Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x589)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x553167(0x511)]={'maxWidth':VisuMZ[_0x553167(0x841)][_0x553167(0x309)]['InBattleStatus']['statesMaxWidth']??0x180,'drawStates':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x907)][_0x553167(0x2f3)]??!![],'drawBuffs':VisuMZ['BattleCore'][_0x553167(0x309)]['InBattleStatus'][_0x553167(0xbe8)]??!![],'drawDebuffs':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0xb89)]??!![],'normalIcon':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0xa57)]??0x54,'normalText':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x907)]['normalText']??_0x553167(0x56e),'normalHelp':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x907)]['normalHelp']??'Status\x20is\x20currently\x20normal.','stateHelpFmt':VisuMZ['BattleCore'][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x101)]??'%1\x20%2','buffNameFmt':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x2d0)]??_0x553167(0x7a0),'buffHelpFmt':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)][_0x553167(0x285)]??_0x553167(0x3e6),'debuffNameFmt':VisuMZ[_0x553167(0x841)][_0x553167(0x309)][_0x553167(0x907)]['debuffNameFmt']??_0x553167(0x726),'debuffHelpFmt':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x907)][_0x553167(0x247)]??'Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','actionsFmt':VisuMZ[_0x553167(0x841)]['Settings'][_0x553167(0x907)][_0x553167(0x92e)]??_0x553167(0x26a),'turnsFmt':VisuMZ['BattleCore'][_0x553167(0x309)]['InBattleStatus'][_0x553167(0x76d)]??_0x553167(0x8f2),'passiveText':VisuMZ[_0x553167(0x841)]['Settings']['InBattleStatus'][_0x553167(0x99f)]??'\x5cC[4](Passive)'},Window_InBattleStatusStates['prototype'][_0x553167(0x7a1)]=function(_0x2650c5){const _0xefaa1d=_0x553167;this[_0xefaa1d(0x928)]=null,Window_Command[_0xefaa1d(0x22b)]['initialize'][_0xefaa1d(0x7f7)](this,_0x2650c5),this[_0xefaa1d(0x836)](),this[_0xefaa1d(0xbdf)](),this[_0xefaa1d(0x785)](0x2);},Window_InBattleStatusStates[_0x553167(0x22b)]['setBattler']=function(_0x444e63){const _0x67c930=_0x553167;this['_battler']=_0x444e63||null,this[_0x67c930(0x215)](),this['smoothSelect'](0x0),this['scrollTo'](0x0,0x0),this[_0x67c930(0x706)]();},Window_InBattleStatusStates['prototype']['playOkSound']=function(){},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x999)]=function(){const _0x1929d9=_0x553167;if(!this[_0x1929d9(0x928)])return;this[_0x1929d9(0x5fb)](),this['addBattlerStates'](),this[_0x1929d9(0x3ec)](),this[_0x1929d9(0x11d)]();},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x5fb)]=function(){const _0x1ca7cd=_0x553167;if(!this[_0x1ca7cd(0x928)][_0x1ca7cd(0x602)]())return;if(!this[_0x1ca7cd(0x928)]['hasAspectData']())return;const _0x3124a2=this[_0x1ca7cd(0x928)][_0x1ca7cd(0x4ed)]()[_0x1ca7cd(0xc04)],_0x34978b=this['_battler'][_0x1ca7cd(0x4ed)]()[_0x1ca7cd(0xbde)],_0x5876b0=this[_0x1ca7cd(0x928)][_0x1ca7cd(0x4ed)]()[_0x1ca7cd(0x9e7)];let _0x2cb0e3='';_0x5876b0[_0x1ca7cd(0x750)](/#(.*?)/gi)&&Imported[_0x1ca7cd(0x754)]?_0x2cb0e3='\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x1ca7cd(0x47d)](_0x34978b,_0x3124a2,_0x5876b0):_0x2cb0e3=_0x1ca7cd(0x89e)[_0x1ca7cd(0x47d)](_0x34978b,_0x3124a2,_0x5876b0),this[_0x1ca7cd(0xaf6)](_0x2cb0e3,_0x1ca7cd(0xb86),!![]);},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x350)]=function(){const _0x4138a2=_0x553167;if(!Window_InBattleStatusStates['SETTINGS']['drawStates'])return;for(const _0x2e8cd5 of this[_0x4138a2(0x928)][_0x4138a2(0x730)]()){if(!this[_0x4138a2(0xb53)](_0x2e8cd5))continue;const _0x9d42eb=this[_0x4138a2(0xa8b)](_0x2e8cd5);this[_0x4138a2(0xaf6)](_0x9d42eb,_0x4138a2(0x105),!![],_0x2e8cd5['id']);}},Window_InBattleStatusStates['prototype'][_0x553167(0xb53)]=function(_0x1b4277){const _0xaf672f=_0x553167;if(!_0x1b4277)return![];if(_0x1b4277[_0xaf672f(0xc04)]['trim']()==='')return![];if(_0x1b4277['name'][_0xaf672f(0xb5d)](_0xaf672f(0x5a9)))return![];if(_0x1b4277[_0xaf672f(0xbde)]<=0x0)return![];if(_0x1b4277[_0xaf672f(0x1a6)])return![];return!![];},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0xa8b)]=function(_0x283abb){const _0x2ccc14=_0x553167;let _0x22ff0d=_0x283abb[_0x2ccc14(0xbde)],_0x3669d8=_0x283abb[_0x2ccc14(0xc04)],_0xcc5c9a='0';return Imported[_0x2ccc14(0x14e)]&&Imported['VisuMZ_1_MessageCore']&&(_0xcc5c9a=String(ColorManager[_0x2ccc14(0x42b)](_0x283abb))),_0xcc5c9a[_0x2ccc14(0x750)](/#(.*?)/gi)?_0x2ccc14(0x9c0)[_0x2ccc14(0x47d)](_0x22ff0d,_0x3669d8,_0xcc5c9a):_0x2ccc14(0x89e)['format'](_0x22ff0d,_0x3669d8,_0xcc5c9a);},Window_InBattleStatusStates['prototype'][_0x553167(0x3ec)]=function(){const _0x5f556c=_0x553167;for(let _0x2773e8=0x0;_0x2773e8<0x8;_0x2773e8++){const _0x1288bc=this[_0x5f556c(0x1a4)](_0x2773e8);if(!_0x1288bc)continue;this['addCommand'](_0x1288bc,'buff',!![],_0x2773e8);}},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x1a4)]=function(_0x3dce78){const _0x10fb64=_0x553167;if(!this['_battler'][_0x10fb64(0x251)](_0x3dce78)&&!this['_battler'][_0x10fb64(0xb10)](_0x3dce78))return'';const _0x34d9e4=Window_InBattleStatusStates[_0x10fb64(0x511)];if(this[_0x10fb64(0x928)]['isBuffAffected'](_0x3dce78)&&!_0x34d9e4[_0x10fb64(0xbe8)])return'';if(this['_battler'][_0x10fb64(0xb10)](_0x3dce78)&&!_0x34d9e4[_0x10fb64(0xb89)])return'';const _0x1d7e4d=this[_0x10fb64(0x928)][_0x10fb64(0x782)][_0x3dce78];let _0x278e4f=this[_0x10fb64(0x928)][_0x10fb64(0x122)](_0x1d7e4d,_0x3dce78),_0x292b0e=TextManager['param'](_0x3dce78);_0x1d7e4d>0x0?_0x292b0e=_0x34d9e4[_0x10fb64(0x2d0)]['format'](_0x292b0e):_0x292b0e=_0x34d9e4[_0x10fb64(0x210)][_0x10fb64(0x47d)](_0x292b0e);let _0x4630ef=0x0;return Imported[_0x10fb64(0x14e)]&&(_0x4630ef=_0x1d7e4d>0x0?ColorManager[_0x10fb64(0x644)]():ColorManager[_0x10fb64(0x48e)]()),_0x4630ef[_0x10fb64(0x750)](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x10fb64(0x47d)](_0x278e4f,_0x292b0e,_0x4630ef):_0x10fb64(0x89e)[_0x10fb64(0x47d)](_0x278e4f,_0x292b0e,_0x4630ef);},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x11d)]=function(){const _0x36f503=_0x553167;if(this['_list'][_0x36f503(0x635)]>0x0)return;const _0x77ea9e=Window_InBattleStatusStates[_0x36f503(0x511)],_0x26101e=_0x77ea9e[_0x36f503(0xa57)],_0x397785=_0x77ea9e[_0x36f503(0x72b)],_0x52c61e='\x5cI[%1]%2'['format'](_0x26101e,_0x397785);this[_0x36f503(0xaf6)](_0x52c61e,_0x36f503(0xb16));},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x2f2)]=function(_0x2fd9ad){const _0x3ea30a=_0x553167,_0x4584a1=this['itemLineRect'](_0x2fd9ad);this[_0x3ea30a(0x319)](0xff),this['drawTextEx'](this[_0x3ea30a(0x33c)](_0x2fd9ad),_0x4584a1['x'],_0x4584a1['y']),this[_0x3ea30a(0xb4d)](_0x2fd9ad,_0x4584a1);},Window_InBattleStatusStates['prototype'][_0x553167(0xb4d)]=function(_0x3e5288,_0x5d58f3){const _0x248efe=_0x553167;if(!Imported[_0x248efe(0x14e)])return;const _0x43dd2e=this[_0x248efe(0x9e2)](_0x3e5288),_0x5908f0=_0x5d58f3['x']+0x2;if(_0x43dd2e===_0x248efe(0x105)){const _0x2c53fb=$dataStates[this[_0x248efe(0x179)][_0x3e5288][_0x248efe(0x871)]||0x0];this[_0x248efe(0x28f)](this[_0x248efe(0x928)],_0x2c53fb,_0x5908f0,_0x5d58f3['y']),this['drawActorStateData'](this[_0x248efe(0x928)],_0x2c53fb,_0x5908f0,_0x5d58f3['y']);}else{if(_0x43dd2e===_0x248efe(0x469)){const _0x536237=this[_0x248efe(0x179)][_0x3e5288]['ext'];this[_0x248efe(0x4d9)](this['_battler'],_0x536237,_0x5908f0,_0x5d58f3['y']),this['drawActorBuffRates'](this['_battler'],_0x536237,_0x5908f0,_0x5d58f3['y']);}}},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x402)]=function(){const _0x2469a4=_0x553167,_0x261211=this['currentSymbol']();let _0x2fadd6='';if(_0x261211===_0x2469a4(0xb86))_0x2fadd6=this[_0x2469a4(0x928)]['getAspectData']()[_0x2469a4(0x33b)];else{if(_0x261211===_0x2469a4(0x105))_0x2fadd6=this[_0x2469a4(0x19d)]();else{if(_0x261211===_0x2469a4(0x469))_0x2fadd6=this[_0x2469a4(0x609)]();else _0x261211===_0x2469a4(0xb16)&&(_0x2fadd6=Window_InBattleStatusStates['SETTINGS'][_0x2469a4(0xb7a)]);}}_0x2fadd6?this[_0x2469a4(0x2c1)][_0x2469a4(0x608)](_0x2fadd6):this[_0x2469a4(0x2c1)]['clear']();},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x19d)]=function(){const _0x1fba2c=_0x553167,_0x5e7192=Window_InBattleStatusStates[_0x1fba2c(0x511)],_0x38a1a8=this[_0x1fba2c(0x5dd)]();let _0x35c88c='';const _0x58164d=$dataStates[_0x38a1a8]||null;if(_0x58164d){const _0x2f7850=_0x5e7192['stateHelpFmt'];let _0x1d7b35=_0x58164d['description']||'';Imported['VisuMZ_1_SkillsStatesCore']&&(_0x1d7b35=_0x1d7b35[_0x1fba2c(0x47d)](this[_0x1fba2c(0x928)]['getStateDisplay'](_0x38a1a8)));let _0x15efce=_0x1fba2c(0x268);if(this['_battler'][_0x1fba2c(0x96e)](_0x38a1a8)){if(_0x58164d[_0x1fba2c(0x613)]===0x0)_0x15efce=_0x1fba2c(0x532);if(_0x58164d['autoRemovalTiming']===0x1)_0x15efce=_0x1fba2c(0x1b8);if(_0x58164d[_0x1fba2c(0x613)]===0x2)_0x15efce=_0x1fba2c(0x936);}const _0x264004=this['_battler'][_0x1fba2c(0x357)][_0x38a1a8]||0x0;let _0x972396=_0x1fba2c(0x72d);Imported[_0x1fba2c(0x14e)]&&Imported[_0x1fba2c(0x754)]&&(_0x972396=ColorManager[_0x1fba2c(0x42b)](_0x58164d),_0x972396[_0x1fba2c(0x750)](/#(.*?)/gi)?_0x972396=_0x1fba2c(0x8bb)[_0x1fba2c(0x47d)](_0x972396):_0x972396='\x5cC[%1]'[_0x1fba2c(0x47d)](_0x972396)),_0x35c88c=_0x2f7850[_0x1fba2c(0x47d)](_0x1d7b35,this['makeTurnsText'](_0x15efce,_0x264004,_0x972396));}return _0x35c88c;},Window_InBattleStatusStates[_0x553167(0x22b)][_0x553167(0x609)]=function(){const _0x11e673=_0x553167,_0x1ae194=Window_InBattleStatusStates['SETTINGS'],_0x3e57ff=this['currentExt']();let _0x49a3c4='';const _0x2519a1=this[_0x11e673(0x928)][_0x11e673(0x251)](_0x3e57ff),_0x259220=_0x2519a1?_0x11e673(0x285):_0x11e673(0x247),_0xf51f8=_0x1ae194[_0x259220];let _0x8628aa=_0x11e673(0x72d);Imported[_0x11e673(0x14e)]&&Imported[_0x11e673(0x754)]&&(_0x8628aa=_0x2519a1?ColorManager[_0x11e673(0x644)]():ColorManager[_0x11e673(0x48e)](),_0x8628aa[_0x11e673(0x750)](/#(.*?)/gi)?_0x8628aa=_0x11e673(0x8bb)[_0x11e673(0x47d)](_0x8628aa):_0x8628aa='\x5cC[%1]'[_0x11e673(0x47d)](_0x8628aa));const _0x138ca1=this[_0x11e673(0x928)]['_buffTurns'][_0x3e57ff]||0x0;return _0x49a3c4=_0xf51f8[_0x11e673(0x47d)](TextManager['param'](_0x3e57ff),Math[_0x11e673(0x66d)](this[_0x11e673(0x928)][_0x11e673(0x170)](_0x3e57ff)*0x64)+'%',_0x8628aa,this[_0x11e673(0xa33)](_0x11e673(0x936),_0x138ca1,_0x8628aa)),_0x49a3c4;},Window_InBattleStatusStates['prototype'][_0x553167(0xa33)]=function(_0x45dceb,_0x21adcb,_0x43eb0c){const _0x1f7658=_0x553167,_0x28ef77=Window_InBattleStatusStates[_0x1f7658(0x511)];let _0x22a9a8=_0x28ef77[_0x1f7658(0x99f)];if(_0x45dceb===_0x1f7658(0x1b8))_0x22a9a8=_0x28ef77[_0x1f7658(0x92e)];if(_0x45dceb===_0x1f7658(0x936))_0x22a9a8=_0x28ef77[_0x1f7658(0x992)];if(_0x45dceb===_0x1f7658(0x532))return'';return _0x22a9a8['format'](_0x21adcb,_0x43eb0c);};